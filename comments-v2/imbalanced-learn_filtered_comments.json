{
  "0.13.0": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "use legacy numpy print options to avoid failures due to NumPy 2.+ scalar",
    "representation",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Specify how to identify the prompt when copying code snippets",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Unwrap the object to get the correct source",
    "file in case that is wrapped by a decorator",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.linear_model.LogisticRegression`",
    "classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targeted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "predict_proba was removed in tensorflow 2.6",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "in older versions of scikit-learn, only METHODS is used",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "we only get here if the above didn't raise",
    "If the parameter is a tuple, transform each element of the",
    "tuple. This is needed to support the pattern present in",
    "`lightgbm` and `xgboost` where users can pass multiple",
    "validation sets.",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "we only need to process step_params if transform_input is set",
    "and metadata is given by the user.",
    "here we get the metadata required by sub_pipeline.transform",
    "`step_params` is the output of `process_routing`, so it has a dict for each",
    "method (e.g. fit, transform, predict), which are the args to be passed to",
    "those methods. We need to transform the parameters which are in the",
    "`transform_input`, before returning these dicts.",
    "An example of `(param_name, param_value)` is",
    "`('sample_weight', array([0.5, 0.5, ...]))`",
    "This parameter now needs to be transformed by the sub_pipeline, to",
    "this step. We cache these computations to avoid repeating them.",
    "Estimator interface",
    "def _fit(self, X, y=None, **fit_params_steps):",
    "Setup the memory",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "The `fit_*` methods need to be overridden to support the samplers.",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "metadata routing enabled",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "TODO: remove the following methods when the minimum scikit-learn >= 1.4",
    "They do not depend on resampling but we need to redefine them for the",
    "compatibility with the metadata routing framework.",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "metadata routing enabled",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "metadata routing enabled",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "we don't have to branch here, since params is only non-empty if",
    "enable_metadata_routing=True.",
    "TODO(0.15): Remove the context manager and use check_is_fitted(self)",
    "metadata routing is enabled.",
    "TODO: once scikit-learn >= 1.4, the following function should be simplified by",
    "calling `super().get_metadata_routing()`",
    "first we add all steps except the last one",
    "fit, fit_predict, and fit_transform call fit_transform if it",
    "exists, or else fit and transform",
    "handling sampler if the fit_* stage",
    "then we add the last step",
    "without metadata routing, fit_transform and fit_predict",
    "get all the same params and pass it to the last fit.",
    "First find the last step that is not 'passthrough'",
    "All steps are 'passthrough', so the pipeline is considered fitted",
    "check if the last step of the pipeline is fitted",
    "we only check the last step since if the last step is fit, it",
    "means the previous steps should also be fit. This is faster than",
    "checking if every step of the pipeline is fit.",
    "This happens when the `steps` is not a list of (name, estimator)",
    "tuples and `fit` is not called yet to validate the steps.",
    "This happens when the `steps` is not a list of (name, estimator)",
    "tuples and `fit` is not called yet to validate the steps.",
    "if we have a weight for this transformer, multiply output",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "empty cluster",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "the input of the OneHotEncoder needs to be dense",
    "SMOTE resampling starts here",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inverting the OHE",
    "This variable will be used when generating data",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "With one-hot encoding, the median will be repeated twice. We need",
    "to divide by sqrt(2) such that we only have one median value",
    "contributing to the Euclidean distance",
    "SMOTE resampling ends here",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "backward compatibility when passing a NearestNeighbors object",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "add an additional sample since the query points contains the original dataset",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "with a large `threshold_cleaning`, the algorithm is equivalent to ENN",
    "set a threshold that we should consider only the class #2",
    "making the threshold slightly smaller to take into account class #1",
    "we should have a more aggressive cleaning with n_neighbors is larger",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "TODO(0.15): change warning to checking for NotFittedError",
    "transform_input tests",
    "=====================",
    "end of transform_input tests",
    "=============================",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "#######################################################################################",
    "The following code does not depend on the sklearn version",
    "#######################################################################################",
    "tags infrastructure",
    "Array-API was introduced in 1.3, we need to default to False if not inside",
    "the old-tags.",
    "#######################################################################################",
    "Upgrading for scikit-learn 1.3",
    "#######################################################################################",
    "parameter validation",
    "parameter validation",
    "#######################################################################################",
    "Upgrading for scikit-learn 1.4",
    "#######################################################################################",
    "#######################################################################################",
    "Upgrading for scikit-learn 1.5",
    "#######################################################################################",
    "chunking",
    "extmath",
    "fixes",
    "indexing",
    "mask",
    "missing",
    "optional dependencies",
    "user interface",
    "validation",
    "chunking",
    "indexing",
    "mask",
    "missing",
    "optional dependencies",
    "user interface",
    "extmath",
    "fixes",
    "validation",
    "#######################################################################################",
    "Upgrading for scikit-learn 1.6",
    "#######################################################################################",
    "test_common",
    "fix for raise_unknown which is introduced in scikit-learn 1.6",
    "validation",
    "tags infrastructure",
    "Get tags from class-level _more_tags",
    "Update with the xfail checks",
    "Patch both class and instance level",
    "legacy, on_skip, on_fail, and callback are not supported and ignored",
    "legacy is not supported and ignored",
    "test_common",
    "tags infrastructure",
    "validation",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "We lost the y.index during resampling. We can safely use X.index to align",
    "them.",
    "We special case the following error:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/1055",
    "There is no easy way to have a generic workaround. Here, we detect",
    "that we have a column with only null values that is datetime64",
    "(resulting from the np.vstack of the resampling).",
    "try again",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The following dictionary is to indicate constructor arguments suitable for the test",
    "suite, which uses very small datasets, and is intended to run rather quickly.",
    "estimator",
    "AdaBoostClassifier does not allow nan values",
    "DecisionTreeClassifier allows nan values",
    "over-sampling",
    "under-sampling",
    "combination",
    "This dictionary stores parameters for specific checks. It also enables running the",
    "same check with multiple instances of the same estimator with different parameters.",
    "The special key \"*\" allows to apply the parameters to all checks.",
    "TODO(devtools): allow third-party developers to pass test specific params to checks",
    "raise additional warning to be shown by pytest",
    "TODO(devtools): enable this behavior for third party estimators as well",
    "partial tests",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "local import to not import the file with Python < 3.11",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "pyproject.toml",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "support for missing values",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "use scikit-learn support for monotonic constraints",
    "create an attribute for compatibility with other scikit-learn tools such",
    "as HTML representation.",
    "Validate or convert input data",
    "TODO: remove when the minimum supported version of scipy will be 1.4",
    "Support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "_compute_missing_values_in_feature_mask checks if X has missing values and",
    "will raise an error if the underlying tree base estimator can't handle",
    "missing values. Only the criterion is required to determine if the tree",
    "supports missing values.",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "TODO(0.14): remove this method because algorithm is deprecated.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Create dataset with missing values",
    "Train forest with missing values",
    "Train forest without missing values",
    "Score is still 80 percent of the forest's score that had no missing values",
    "Create a predictive feature using `y` and with some noise",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.12.4": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "use legacy numpy print options to avoid failures due to NumPy 2.+ scalar",
    "representation",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Specify how to identify the prompt when copying code snippets",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.linear_model.LogisticRegression`",
    "classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targeted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "predict_proba was removed in tensorflow 2.6",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "TODO: remove this file when scikit-learn minimum version is 1.3",
    "Return a copy of the threadlocal configuration so that users will",
    "not be able to modify the configuration with the returned dict.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "def _fit(self, X, y=None, **fit_params_steps):",
    "Setup the memory",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "The `fit_*` methods need to be overridden to support the samplers.",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "metadata routing enabled",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "TODO: remove the following methods when the minimum scikit-learn >= 1.4",
    "They do not depend on resampling but we need to redefine them for the",
    "compatibility with the metadata routing framework.",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "we don't have to branch here, since params is only non-empty if",
    "enable_metadata_routing=True.",
    "metadata routing is enabled.",
    "TODO: once scikit-learn >= 1.4, the following function should be simplified by",
    "calling `super().get_metadata_routing()`",
    "first we add all steps except the last one",
    "fit, fit_predict, and fit_transform call fit_transform if it",
    "exists, or else fit and transform",
    "then we add the last step",
    "without metadata routing, fit_transform and fit_predict",
    "get all the same params and pass it to the last fit.",
    "if we have a weight for this transformer, multiply output",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "empty cluster",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "the input of the OneHotEncoder needs to be dense",
    "SMOTE resampling starts here",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inverting the OHE",
    "This variable will be used when generating data",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "With one-hot encoding, the median will be repeated twice. We need",
    "to divide by sqrt(2) such that we only have one median value",
    "contributing to the Euclidean distance",
    "SMOTE resampling ends here",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "TODO: only use `sparse_output` when sklearn >= 1.2",
    "TODO(0.13): remove this test",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "backward compatibility when passing a NearestNeighbors object",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "add an additional sample since the query points contains the original dataset",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "with a large `threshold_cleaning`, the algorithm is equivalent to ENN",
    "set a threshold that we should consider only the class #2",
    "making the threshold slightly smaller to take into account class #1",
    "we should have a more aggressive cleaning with n_neighbors is larger",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "we don't want to validate again for each call to partial_fit",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "Likely a pandas DataFrame, we explicitly check the type to confirm.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "TODO: remove in 0.13",
    "future default in 0.13",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Adrin Jalali <adrin.jalali@gmail.com>",
    "License: BSD 3 clause",
    "Only the following methods are supported in the routing mechanism. Adding new",
    "methods at the moment involves monkeypatching this list.",
    "Note that if this list is changed or monkeypatched, the corresponding method",
    "needs to be added under a TYPE_CHECKING condition like the one done here in",
    "_MetadataRequester",
    "These methods are a composite of other methods and one cannot set their",
    "requests directly. Instead they should be set by setting the requests of the",
    "simple methods which make the composite ones.",
    "Request values",
    "==============",
    "Each request value needs to be one of the following values, or an alias.",
    "this is used in `__metadata_request__*` attributes to indicate that a",
    "metadata is not present even though it may be present in the",
    "corresponding method's signature.",
    "this is used whenever a default value is changed, and therefore the user",
    "should explicitly set the value, otherwise a warning is shown. An example",
    "is when a meta-estimator is only a router, but then becomes also a",
    "consumer in a new release.",
    "this is the default used in `set_{method}_request` methods to indicate no",
    "change requested by the user.",
    "item is only an alias if it's a valid identifier",
    "Metadata Request for Simple Consumers",
    "=====================================",
    "This section includes MethodMetadataRequest and MetadataRequest which are",
    "used in simple consumers.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "Called when the default attribute access fails with an AttributeError",
    "(either __getattribute__() raises an AttributeError because name is",
    "not an instance attribute or an attribute in the class tree for self;",
    "or __get__() of a name property raises AttributeError). This method",
    "should either return the (computed) attribute value or raise an",
    "AttributeError exception.",
    "https://docs.python.org/3/reference/datamodel.html#object.__getattr__",
    "Metadata Request for Routers",
    "============================",
    "This section includes all objects required for MetadataRouter which is used",
    "in routers, returned by their ``get_metadata_routing``.",
    "This namedtuple is used to store a (mapping, routing) pair. Mapping is a",
    "MethodMapping object, and routing is the output of `get_metadata_routing`.",
    "MetadataRouter stores a collection of these namedtuples.",
    "A namedtuple storing a single method route. A collection of these namedtuples",
    "is stored in a MetadataRouter.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance`` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "`_self_request` is used if the router is also a consumer.",
    "_self_request, (added using `add_self_request()`) is treated",
    "differently from the other objects which are stored in",
    "_route_mappings.",
    "conflicts are okay if the passed objects are the same, but it's",
    "an issue if they're different objects.",
    "doing this instead of a try/except since an AttributeError could be raised",
    "for other reasons.",
    "Request method",
    "==============",
    "This section includes what's needed for the request method descriptor and",
    "their dynamic generation in a meta class.",
    "These strings are used to dynamically generate the docstrings for",
    "set_{method}_request methods.",
    "we would want to have a method which accepts only the expected args",
    "This makes it possible to use the decorated method as an unbound",
    "method, for instance when monkeypatching.",
    "https://github.com/scikit-learn/scikit-learn/issues/28632",
    "Replicating python's behavior when positional args are given other",
    "than `self`, and `self` is only allowed if this method is unbound.",
    "Now we set the relevant attributes of the function so that it seems",
    "like a normal method to the end user, with known expected arguments.",
    "This code is never run in runtime, but it's here for type checking.",
    "Type checkers fail to understand that the `set_{method}_request`",
    "methods are dynamically generated, and they complain that they are",
    "not defined. We define them here to make type checkers happy.",
    "During type checking analyzers assume this to be True.",
    "The following list of defined methods mirrors the list of methods",
    "in SIMPLE_METHODS.",
    "fmt: off",
    "fmt: on",
    "if there are any issues in the default values, it will be raised",
    "when ``get_metadata_routing`` is called. Here we are going to",
    "ignore all the issues such as bad defaults etc.",
    "set ``set_{method}_request``` methods",
    "Here we use `isfunction` instead of `ismethod` because calling `getattr`",
    "on a class instead of an instance returns an unbound function.",
    "ignore the first parameter of the method, which is usually \"self\"",
    "Then overwrite those defaults with the ones provided in",
    "__metadata_request__* attributes. Defaults set in",
    "__metadata_request__* attributes take precedence over signature",
    "sniffing.",
    "need to go through the MRO since this is a class attribute and",
    "``vars`` doesn't report the parent class attributes. We go through",
    "the reverse of the MRO so that child classes have precedence over",
    "their parents.",
    "we don't check for attr.startswith() since python prefixes attrs",
    "starting with __ with the `_ClassName`.",
    "Process Routing in Routers",
    "==========================",
    "This is almost always the only method used in routers to process and route",
    "given metadata. This is to minimize the boilerplate required in routers.",
    "Here the first two arguments are positional only which makes everything",
    "passed as keyword argument a metadata. The first two args also have an `_`",
    "prefix to reduce the chances of name collisions with the passed metadata, and",
    "since they're positional only, users will never type those underscores.",
    "If routing is not enabled and kwargs are empty, then we don't have to",
    "try doing any routing, we can simply return a structure which returns",
    "an empty dict on routed_params.ANYTHING.ANY_METHOD.",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "Inherits from ValueError and TypeError to keep backward compatibility.",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error",
    "message, i.e. options that are for internal purpose or not",
    "officially supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "When the function is just a wrapper around an estimator, we allow",
    "the function to delegate validation to the estimator, but we",
    "replace the name of the estimator by the name of the function in",
    "the error message to avoid confusion.",
    "better repr if the bounds were given as integers",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "There's no integer outside (-inf, +inf)",
    "bounds are -inf, +inf",
    "interval is [-inf, +inf]",
    "special case for ndarray since it can't be instantiated without",
    "arguments",
    "special case for Integral and Real since they are abstract classes",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "We lost the y.index during resampling. We can safely use X.index to align",
    "them.",
    "We special case the following error:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/1055",
    "There is no easy way to have a generic workaround. Here, we detect",
    "that we have a column with only null values that is datetime64",
    "(resulting from the np.vstack of the resampling).",
    "try again",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfere with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "does not raise",
    "calls f with a bad parameter type",
    "Validation for g is never skipped.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "resample before to fit the tree",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.1",
    "change of signature in scikit-learn 1.1",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "use scikit-learn support for monotonic constraints",
    "create an attribute for compatibility with other scikit-learn tools such",
    "as HTML representation.",
    "TODO: remove in 0.13",
    "Validate or convert input data",
    "TODO: remove when the minimum supported version of scipy will be 1.4",
    "Support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "_compute_missing_values_in_feature_mask checks if X has missing values and",
    "will raise an error if the underlying tree base estimator can't handle",
    "missing values. Only the criterion is required to determine if the tree",
    "supports missing values.",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "TODO: remove when minimum supported version of scikit-learn is 1.5",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "TODO: remove in 0.13",
    "Create dataset with missing values",
    "Train forest with missing values",
    "Train forest without missing values",
    "Score is still 80 percent of the forest's score that had no missing values",
    "Create a predictive feature using `y` and with some noise",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.12.3": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Specify how to identify the prompt when copying code snippets",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.linear_model.LogisticRegression`",
    "classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targeted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "predict_proba was removed in tensorflow 2.6",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "TODO: remove this file when scikit-learn minimum version is 1.3",
    "Return a copy of the threadlocal configuration so that users will",
    "not be able to modify the configuration with the returned dict.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "def _fit(self, X, y=None, **fit_params_steps):",
    "Setup the memory",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "The `fit_*` methods need to be overridden to support the samplers.",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "metadata routing enabled",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "TODO: remove the following methods when the minimum scikit-learn >= 1.4",
    "They do not depend on resampling but we need to redefine them for the",
    "compatibility with the metadata routing framework.",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "we don't have to branch here, since params is only non-empty if",
    "enable_metadata_routing=True.",
    "metadata routing is enabled.",
    "TODO: once scikit-learn >= 1.4, the following function should be simplified by",
    "calling `super().get_metadata_routing()`",
    "first we add all steps except the last one",
    "fit, fit_predict, and fit_transform call fit_transform if it",
    "exists, or else fit and transform",
    "then we add the last step",
    "without metadata routing, fit_transform and fit_predict",
    "get all the same params and pass it to the last fit.",
    "if we have a weight for this transformer, multiply output",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "empty cluster",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "the input of the OneHotEncoder needs to be dense",
    "SMOTE resampling starts here",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inverting the OHE",
    "This variable will be used when generating data",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "With one-hot encoding, the median will be repeated twice. We need",
    "to divide by sqrt(2) such that we only have one median value",
    "contributing to the Euclidean distance",
    "SMOTE resampling ends here",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "TODO: only use `sparse_output` when sklearn >= 1.2",
    "TODO(0.13): remove this test",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "backward compatibility when passing a NearestNeighbors object",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "add an additional sample since the query points contains the original dataset",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "with a large `threshold_cleaning`, the algorithm is equivalent to ENN",
    "set a threshold that we should consider only the class #2",
    "making the threshold slightly smaller to take into account class #1",
    "we should have a more aggressive cleaning with n_neighbors is larger",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "we don't want to validate again for each call to partial_fit",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "Likely a pandas DataFrame, we explicitly check the type to confirm.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "TODO: remove in 0.13",
    "future default in 0.13",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Adrin Jalali <adrin.jalali@gmail.com>",
    "License: BSD 3 clause",
    "Only the following methods are supported in the routing mechanism. Adding new",
    "methods at the moment involves monkeypatching this list.",
    "Note that if this list is changed or monkeypatched, the corresponding method",
    "needs to be added under a TYPE_CHECKING condition like the one done here in",
    "_MetadataRequester",
    "These methods are a composite of other methods and one cannot set their",
    "requests directly. Instead they should be set by setting the requests of the",
    "simple methods which make the composite ones.",
    "Request values",
    "==============",
    "Each request value needs to be one of the following values, or an alias.",
    "this is used in `__metadata_request__*` attributes to indicate that a",
    "metadata is not present even though it may be present in the",
    "corresponding method's signature.",
    "this is used whenever a default value is changed, and therefore the user",
    "should explicitly set the value, otherwise a warning is shown. An example",
    "is when a meta-estimator is only a router, but then becomes also a",
    "consumer in a new release.",
    "this is the default used in `set_{method}_request` methods to indicate no",
    "change requested by the user.",
    "item is only an alias if it's a valid identifier",
    "Metadata Request for Simple Consumers",
    "=====================================",
    "This section includes MethodMetadataRequest and MetadataRequest which are",
    "used in simple consumers.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "Called when the default attribute access fails with an AttributeError",
    "(either __getattribute__() raises an AttributeError because name is",
    "not an instance attribute or an attribute in the class tree for self;",
    "or __get__() of a name property raises AttributeError). This method",
    "should either return the (computed) attribute value or raise an",
    "AttributeError exception.",
    "https://docs.python.org/3/reference/datamodel.html#object.__getattr__",
    "Metadata Request for Routers",
    "============================",
    "This section includes all objects required for MetadataRouter which is used",
    "in routers, returned by their ``get_metadata_routing``.",
    "This namedtuple is used to store a (mapping, routing) pair. Mapping is a",
    "MethodMapping object, and routing is the output of `get_metadata_routing`.",
    "MetadataRouter stores a collection of these namedtuples.",
    "A namedtuple storing a single method route. A collection of these namedtuples",
    "is stored in a MetadataRouter.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance`` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "`_self_request` is used if the router is also a consumer.",
    "_self_request, (added using `add_self_request()`) is treated",
    "differently from the other objects which are stored in",
    "_route_mappings.",
    "conflicts are okay if the passed objects are the same, but it's",
    "an issue if they're different objects.",
    "doing this instead of a try/except since an AttributeError could be raised",
    "for other reasons.",
    "Request method",
    "==============",
    "This section includes what's needed for the request method descriptor and",
    "their dynamic generation in a meta class.",
    "These strings are used to dynamically generate the docstrings for",
    "set_{method}_request methods.",
    "we would want to have a method which accepts only the expected args",
    "This makes it possible to use the decorated method as an unbound",
    "method, for instance when monkeypatching.",
    "https://github.com/scikit-learn/scikit-learn/issues/28632",
    "Replicating python's behavior when positional args are given other",
    "than `self`, and `self` is only allowed if this method is unbound.",
    "Now we set the relevant attributes of the function so that it seems",
    "like a normal method to the end user, with known expected arguments.",
    "This code is never run in runtime, but it's here for type checking.",
    "Type checkers fail to understand that the `set_{method}_request`",
    "methods are dynamically generated, and they complain that they are",
    "not defined. We define them here to make type checkers happy.",
    "During type checking analyzers assume this to be True.",
    "The following list of defined methods mirrors the list of methods",
    "in SIMPLE_METHODS.",
    "fmt: off",
    "fmt: on",
    "if there are any issues in the default values, it will be raised",
    "when ``get_metadata_routing`` is called. Here we are going to",
    "ignore all the issues such as bad defaults etc.",
    "set ``set_{method}_request``` methods",
    "Here we use `isfunction` instead of `ismethod` because calling `getattr`",
    "on a class instead of an instance returns an unbound function.",
    "ignore the first parameter of the method, which is usually \"self\"",
    "Then overwrite those defaults with the ones provided in",
    "__metadata_request__* attributes. Defaults set in",
    "__metadata_request__* attributes take precedence over signature",
    "sniffing.",
    "need to go through the MRO since this is a class attribute and",
    "``vars`` doesn't report the parent class attributes. We go through",
    "the reverse of the MRO so that child classes have precedence over",
    "their parents.",
    "we don't check for attr.startswith() since python prefixes attrs",
    "starting with __ with the `_ClassName`.",
    "Process Routing in Routers",
    "==========================",
    "This is almost always the only method used in routers to process and route",
    "given metadata. This is to minimize the boilerplate required in routers.",
    "Here the first two arguments are positional only which makes everything",
    "passed as keyword argument a metadata. The first two args also have an `_`",
    "prefix to reduce the chances of name collisions with the passed metadata, and",
    "since they're positional only, users will never type those underscores.",
    "If routing is not enabled and kwargs are empty, then we don't have to",
    "try doing any routing, we can simply return a structure which returns",
    "an empty dict on routed_params.ANYTHING.ANY_METHOD.",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "Inherits from ValueError and TypeError to keep backward compatibility.",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error",
    "message, i.e. options that are for internal purpose or not",
    "officially supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "When the function is just a wrapper around an estimator, we allow",
    "the function to delegate validation to the estimator, but we",
    "replace the name of the estimator by the name of the function in",
    "the error message to avoid confusion.",
    "better repr if the bounds were given as integers",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "There's no integer outside (-inf, +inf)",
    "bounds are -inf, +inf",
    "interval is [-inf, +inf]",
    "special case for ndarray since it can't be instantiated without",
    "arguments",
    "special case for Integral and Real since they are abstract classes",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "We lost the y.index during resampling. We can safely use X.index to align",
    "them.",
    "We special case the following error:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/1055",
    "There is no easy way to have a generic workaround. Here, we detect",
    "that we have a column with only null values that is datetime64",
    "(resulting from the np.vstack of the resampling).",
    "try again",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfere with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "does not raise",
    "calls f with a bad parameter type",
    "Validation for g is never skipped.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "resample before to fit the tree",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.1",
    "change of signature in scikit-learn 1.1",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "use scikit-learn support for monotonic constraints",
    "create an attribute for compatibility with other scikit-learn tools such",
    "as HTML representation.",
    "TODO: remove in 0.13",
    "Validate or convert input data",
    "TODO: remove when the minimum supported version of scipy will be 1.4",
    "Support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "_compute_missing_values_in_feature_mask checks if X has missing values and",
    "will raise an error if the underlying tree base estimator can't handle",
    "missing values. Only the criterion is required to determine if the tree",
    "supports missing values.",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "TODO: remove when minimum supported version of scikit-learn is 1.5",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "TODO: remove in 0.13",
    "Create dataset with missing values",
    "Train forest with missing values",
    "Train forest without missing values",
    "Score is still 80 percent of the forest's score that had no missing values",
    "Create a predictive feature using `y` and with some noise",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.12.2": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Specify how to identify the prompt when copying code snippets",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.linear_model.LogisticRegression`",
    "classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targeted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "predict_proba was removed in tensorflow 2.6",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "TODO: remove this file when scikit-learn minimum version is 1.3",
    "Return a copy of the threadlocal configuration so that users will",
    "not be able to modify the configuration with the returned dict.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "def _fit(self, X, y=None, **fit_params_steps):",
    "Setup the memory",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "The `fit_*` methods need to be overridden to support the samplers.",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "metadata routing enabled",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "TODO: remove the following methods when the minimum scikit-learn >= 1.4",
    "They do not depend on resampling but we need to redefine them for the",
    "compatibility with the metadata routing framework.",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "we don't have to branch here, since params is only non-empty if",
    "enable_metadata_routing=True.",
    "metadata routing is enabled.",
    "TODO: once scikit-learn >= 1.4, the following function should be simplified by",
    "calling `super().get_metadata_routing()`",
    "first we add all steps except the last one",
    "fit, fit_predict, and fit_transform call fit_transform if it",
    "exists, or else fit and transform",
    "then we add the last step",
    "without metadata routing, fit_transform and fit_predict",
    "get all the same params and pass it to the last fit.",
    "if we have a weight for this transformer, multiply output",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "empty cluster",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "the input of the OneHotEncoder needs to be dense",
    "SMOTE resampling starts here",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inverting the OHE",
    "This variable will be used when generating data",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "With one-hot encoding, the median will be repeated twice. We need",
    "to divide by sqrt(2) such that we only have one median value",
    "contributing to the Euclidean distance",
    "SMOTE resampling ends here",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "TODO: only use `sparse_output` when sklearn >= 1.2",
    "TODO(0.13): remove this test",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "backward compatibility when passing a NearestNeighbors object",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "add an additional sample since the query points contains the original dataset",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "with a large `threshold_cleaning`, the algorithm is equivalent to ENN",
    "set a threshold that we should consider only the class #2",
    "making the threshold slightly smaller to take into account class #1",
    "we should have a more aggressive cleaning with n_neighbors is larger",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "we don't want to validate again for each call to partial_fit",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "Likely a pandas DataFrame, we explicitly check the type to confirm.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "TODO: remove in 0.13",
    "future default in 0.13",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Adrin Jalali <adrin.jalali@gmail.com>",
    "License: BSD 3 clause",
    "Only the following methods are supported in the routing mechanism. Adding new",
    "methods at the moment involves monkeypatching this list.",
    "Note that if this list is changed or monkeypatched, the corresponding method",
    "needs to be added under a TYPE_CHECKING condition like the one done here in",
    "_MetadataRequester",
    "These methods are a composite of other methods and one cannot set their",
    "requests directly. Instead they should be set by setting the requests of the",
    "simple methods which make the composite ones.",
    "Request values",
    "==============",
    "Each request value needs to be one of the following values, or an alias.",
    "this is used in `__metadata_request__*` attributes to indicate that a",
    "metadata is not present even though it may be present in the",
    "corresponding method's signature.",
    "this is used whenever a default value is changed, and therefore the user",
    "should explicitly set the value, otherwise a warning is shown. An example",
    "is when a meta-estimator is only a router, but then becomes also a",
    "consumer in a new release.",
    "this is the default used in `set_{method}_request` methods to indicate no",
    "change requested by the user.",
    "item is only an alias if it's a valid identifier",
    "Metadata Request for Simple Consumers",
    "=====================================",
    "This section includes MethodMetadataRequest and MetadataRequest which are",
    "used in simple consumers.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "Called when the default attribute access fails with an AttributeError",
    "(either __getattribute__() raises an AttributeError because name is",
    "not an instance attribute or an attribute in the class tree for self;",
    "or __get__() of a name property raises AttributeError). This method",
    "should either return the (computed) attribute value or raise an",
    "AttributeError exception.",
    "https://docs.python.org/3/reference/datamodel.html#object.__getattr__",
    "Metadata Request for Routers",
    "============================",
    "This section includes all objects required for MetadataRouter which is used",
    "in routers, returned by their ``get_metadata_routing``.",
    "This namedtuple is used to store a (mapping, routing) pair. Mapping is a",
    "MethodMapping object, and routing is the output of `get_metadata_routing`.",
    "MetadataRouter stores a collection of these namedtuples.",
    "A namedtuple storing a single method route. A collection of these namedtuples",
    "is stored in a MetadataRouter.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance`` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "`_self_request` is used if the router is also a consumer.",
    "_self_request, (added using `add_self_request()`) is treated",
    "differently from the other objects which are stored in",
    "_route_mappings.",
    "conflicts are okay if the passed objects are the same, but it's",
    "an issue if they're different objects.",
    "doing this instead of a try/except since an AttributeError could be raised",
    "for other reasons.",
    "Request method",
    "==============",
    "This section includes what's needed for the request method descriptor and",
    "their dynamic generation in a meta class.",
    "These strings are used to dynamically generate the docstrings for",
    "set_{method}_request methods.",
    "we would want to have a method which accepts only the expected args",
    "Now we set the relevant attributes of the function so that it seems",
    "like a normal method to the end user, with known expected arguments.",
    "This code is never run in runtime, but it's here for type checking.",
    "Type checkers fail to understand that the `set_{method}_request`",
    "methods are dynamically generated, and they complain that they are",
    "not defined. We define them here to make type checkers happy.",
    "During type checking analyzers assume this to be True.",
    "The following list of defined methods mirrors the list of methods",
    "in SIMPLE_METHODS.",
    "fmt: off",
    "fmt: on",
    "if there are any issues in the default values, it will be raised",
    "when ``get_metadata_routing`` is called. Here we are going to",
    "ignore all the issues such as bad defaults etc.",
    "set ``set_{method}_request``` methods",
    "Here we use `isfunction` instead of `ismethod` because calling `getattr`",
    "on a class instead of an instance returns an unbound function.",
    "ignore the first parameter of the method, which is usually \"self\"",
    "Then overwrite those defaults with the ones provided in",
    "__metadata_request__* attributes. Defaults set in",
    "__metadata_request__* attributes take precedence over signature",
    "sniffing.",
    "need to go through the MRO since this is a class attribute and",
    "``vars`` doesn't report the parent class attributes. We go through",
    "the reverse of the MRO so that child classes have precedence over",
    "their parents.",
    "we don't check for attr.startswith() since python prefixes attrs",
    "starting with __ with the `_ClassName`.",
    "Process Routing in Routers",
    "==========================",
    "This is almost always the only method used in routers to process and route",
    "given metadata. This is to minimize the boilerplate required in routers.",
    "Here the first two arguments are positional only which makes everything",
    "passed as keyword argument a metadata. The first two args also have an `_`",
    "prefix to reduce the chances of name collisions with the passed metadata, and",
    "since they're positional only, users will never type those underscores.",
    "If routing is not enabled and kwargs are empty, then we don't have to",
    "try doing any routing, we can simply return a structure which returns",
    "an empty dict on routed_params.ANYTHING.ANY_METHOD.",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "Inherits from ValueError and TypeError to keep backward compatibility.",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error",
    "message, i.e. options that are for internal purpose or not",
    "officially supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "When the function is just a wrapper around an estimator, we allow",
    "the function to delegate validation to the estimator, but we",
    "replace the name of the estimator by the name of the function in",
    "the error message to avoid confusion.",
    "better repr if the bounds were given as integers",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "There's no integer outside (-inf, +inf)",
    "bounds are -inf, +inf",
    "interval is [-inf, +inf]",
    "special case for ndarray since it can't be instantiated without",
    "arguments",
    "special case for Integral and Real since they are abstract classes",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "We lost the y.index during resampling. We can safely use X.index to align",
    "them.",
    "We special case the following error:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/1055",
    "There is no easy way to have a generic workaround. Here, we detect",
    "that we have a column with only null values that is datetime64",
    "(resulting from the np.vstack of the resampling).",
    "try again",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfere with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "does not raise",
    "calls f with a bad parameter type",
    "Validation for g is never skipped.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "resample before to fit the tree",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.1",
    "change of signature in scikit-learn 1.1",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "use scikit-learn support for monotonic constraints",
    "create an attribute for compatibility with other scikit-learn tools such",
    "as HTML representation.",
    "TODO: remove in 0.13",
    "Validate or convert input data",
    "TODO: remove when the minimum supported version of scipy will be 1.4",
    "Support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "_compute_missing_values_in_feature_mask checks if X has missing values and",
    "will raise an error if the underlying tree base estimator can't handle",
    "missing values. Only the criterion is required to determine if the tree",
    "supports missing values.",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "TODO: remove in 0.13",
    "Create dataset with missing values",
    "Train forest with missing values",
    "Train forest without missing values",
    "Score is still 80 percent of the forest's score that had no missing values",
    "Create a predictive feature using `y` and with some noise",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.12.1": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Specify how to identify the prompt when copying code snippets",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.linear_model.LogisticRegression`",
    "classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targeted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "predict_proba was removed in tensorflow 2.6",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "TODO: remove this file when scikit-learn minimum version is 1.3",
    "Return a copy of the threadlocal configuration so that users will",
    "not be able to modify the configuration with the returned dict.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "def _fit(self, X, y=None, **fit_params_steps):",
    "Setup the memory",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "The `fit_*` methods need to be overridden to support the samplers.",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "metadata routing enabled",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "TODO: remove the following methods when the minimum scikit-learn >= 1.4",
    "They do not depend on resampling but we need to redefine them for the",
    "compatibility with the metadata routing framework.",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "we don't have to branch here, since params is only non-empty if",
    "enable_metadata_routing=True.",
    "metadata routing is enabled.",
    "TODO: once scikit-learn >= 1.4, the following function should be simplified by",
    "calling `super().get_metadata_routing()`",
    "first we add all steps except the last one",
    "fit, fit_predict, and fit_transform call fit_transform if it",
    "exists, or else fit and transform",
    "then we add the last step",
    "without metadata routing, fit_transform and fit_predict",
    "get all the same params and pass it to the last fit.",
    "if we have a weight for this transformer, multiply output",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "empty cluster",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "the input of the OneHotEncoder needs to be dense",
    "SMOTE resampling starts here",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inverting the OHE",
    "This variable will be used when generating data",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "With one-hot encoding, the median will be repeated twice. We need",
    "to divide by sqrt(2) such that we only have one median value",
    "contributing to the Euclidean distance",
    "SMOTE resampling ends here",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "TODO: only use `sparse_output` when sklearn >= 1.2",
    "TODO(0.13): remove this test",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "backward compatibility when passing a NearestNeighbors object",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "add an additional sample since the query points contains the original dataset",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "with a large `threshold_cleaning`, the algorithm is equivalent to ENN",
    "set a threshold that we should consider only the class #2",
    "making the threshold slightly smaller to take into account class #1",
    "we should have a more aggressive cleaning with n_neighbors is larger",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "we don't want to validate again for each call to partial_fit",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "Likely a pandas DataFrame, we explicitly check the type to confirm.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "TODO: remove in 0.13",
    "future default in 0.13",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Adrin Jalali <adrin.jalali@gmail.com>",
    "License: BSD 3 clause",
    "Only the following methods are supported in the routing mechanism. Adding new",
    "methods at the moment involves monkeypatching this list.",
    "Note that if this list is changed or monkeypatched, the corresponding method",
    "needs to be added under a TYPE_CHECKING condition like the one done here in",
    "_MetadataRequester",
    "These methods are a composite of other methods and one cannot set their",
    "requests directly. Instead they should be set by setting the requests of the",
    "simple methods which make the composite ones.",
    "Request values",
    "==============",
    "Each request value needs to be one of the following values, or an alias.",
    "this is used in `__metadata_request__*` attributes to indicate that a",
    "metadata is not present even though it may be present in the",
    "corresponding method's signature.",
    "this is used whenever a default value is changed, and therefore the user",
    "should explicitly set the value, otherwise a warning is shown. An example",
    "is when a meta-estimator is only a router, but then becomes also a",
    "consumer in a new release.",
    "this is the default used in `set_{method}_request` methods to indicate no",
    "change requested by the user.",
    "item is only an alias if it's a valid identifier",
    "Metadata Request for Simple Consumers",
    "=====================================",
    "This section includes MethodMetadataRequest and MetadataRequest which are",
    "used in simple consumers.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "Called when the default attribute access fails with an AttributeError",
    "(either __getattribute__() raises an AttributeError because name is",
    "not an instance attribute or an attribute in the class tree for self;",
    "or __get__() of a name property raises AttributeError). This method",
    "should either return the (computed) attribute value or raise an",
    "AttributeError exception.",
    "https://docs.python.org/3/reference/datamodel.html#object.__getattr__",
    "Metadata Request for Routers",
    "============================",
    "This section includes all objects required for MetadataRouter which is used",
    "in routers, returned by their ``get_metadata_routing``.",
    "This namedtuple is used to store a (mapping, routing) pair. Mapping is a",
    "MethodMapping object, and routing is the output of `get_metadata_routing`.",
    "MetadataRouter stores a collection of these namedtuples.",
    "A namedtuple storing a single method route. A collection of these namedtuples",
    "is stored in a MetadataRouter.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance`` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "`_self_request` is used if the router is also a consumer.",
    "_self_request, (added using `add_self_request()`) is treated",
    "differently from the other objects which are stored in",
    "_route_mappings.",
    "conflicts are okay if the passed objects are the same, but it's",
    "an issue if they're different objects.",
    "doing this instead of a try/except since an AttributeError could be raised",
    "for other reasons.",
    "Request method",
    "==============",
    "This section includes what's needed for the request method descriptor and",
    "their dynamic generation in a meta class.",
    "These strings are used to dynamically generate the docstrings for",
    "set_{method}_request methods.",
    "we would want to have a method which accepts only the expected args",
    "Now we set the relevant attributes of the function so that it seems",
    "like a normal method to the end user, with known expected arguments.",
    "This code is never run in runtime, but it's here for type checking.",
    "Type checkers fail to understand that the `set_{method}_request`",
    "methods are dynamically generated, and they complain that they are",
    "not defined. We define them here to make type checkers happy.",
    "During type checking analyzers assume this to be True.",
    "The following list of defined methods mirrors the list of methods",
    "in SIMPLE_METHODS.",
    "fmt: off",
    "fmt: on",
    "if there are any issues in the default values, it will be raised",
    "when ``get_metadata_routing`` is called. Here we are going to",
    "ignore all the issues such as bad defaults etc.",
    "set ``set_{method}_request``` methods",
    "Here we use `isfunction` instead of `ismethod` because calling `getattr`",
    "on a class instead of an instance returns an unbound function.",
    "ignore the first parameter of the method, which is usually \"self\"",
    "Then overwrite those defaults with the ones provided in",
    "__metadata_request__* attributes. Defaults set in",
    "__metadata_request__* attributes take precedence over signature",
    "sniffing.",
    "need to go through the MRO since this is a class attribute and",
    "``vars`` doesn't report the parent class attributes. We go through",
    "the reverse of the MRO so that child classes have precedence over",
    "their parents.",
    "we don't check for attr.startswith() since python prefixes attrs",
    "starting with __ with the `_ClassName`.",
    "Process Routing in Routers",
    "==========================",
    "This is almost always the only method used in routers to process and route",
    "given metadata. This is to minimize the boilerplate required in routers.",
    "Here the first two arguments are positional only which makes everything",
    "passed as keyword argument a metadata. The first two args also have an `_`",
    "prefix to reduce the chances of name collisions with the passed metadata, and",
    "since they're positional only, users will never type those underscores.",
    "If routing is not enabled and kwargs are empty, then we don't have to",
    "try doing any routing, we can simply return a structure which returns",
    "an empty dict on routed_params.ANYTHING.ANY_METHOD.",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "Inherits from ValueError and TypeError to keep backward compatibility.",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error",
    "message, i.e. options that are for internal purpose or not",
    "officially supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "When the function is just a wrapper around an estimator, we allow",
    "the function to delegate validation to the estimator, but we",
    "replace the name of the estimator by the name of the function in",
    "the error message to avoid confusion.",
    "better repr if the bounds were given as integers",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "There's no integer outside (-inf, +inf)",
    "bounds are -inf, +inf",
    "interval is [-inf, +inf]",
    "special case for ndarray since it can't be instantiated without",
    "arguments",
    "special case for Integral and Real since they are abstract classes",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "We lost the y.index during resampling. We can safely use X.index to align",
    "them.",
    "We special case the following error:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/1055",
    "There is no easy way to have a generic workaround. Here, we detect",
    "that we have a column with only null values that is datetime64",
    "(resulting from the np.vstack of the resampling).",
    "try again",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfere with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "does not raise",
    "calls f with a bad parameter type",
    "Validation for g is never skipped.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "resample before to fit the tree",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.1",
    "change of signature in scikit-learn 1.1",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "use scikit-learn support for monotonic constraints",
    "create an attribute for compatibility with other scikit-learn tools such",
    "as HTML representation.",
    "TODO: remove in 0.13",
    "Validate or convert input data",
    "TODO: remove when the minimum supported version of scipy will be 1.4",
    "Support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "_compute_missing_values_in_feature_mask checks if X has missing values and",
    "will raise an error if the underlying tree base estimator can't handle",
    "missing values. Only the criterion is required to determine if the tree",
    "supports missing values.",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "TODO: remove in 0.13",
    "Create dataset with missing values",
    "Train forest with missing values",
    "Train forest without missing values",
    "Score is still 80 percent of the forest's score that had no missing values",
    "Create a predictive feature using `y` and with some noise",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.12.0": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Specify how to identify the prompt when copying code snippets",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.linear_model.LogisticRegression`",
    "classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targeted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "predict_proba was removed in tensorflow 2.6",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "TODO: remove this file when scikit-learn minimum version is 1.3",
    "Return a copy of the threadlocal configuration so that users will",
    "not be able to modify the configuration with the returned dict.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "def _fit(self, X, y=None, **fit_params_steps):",
    "Setup the memory",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "The `fit_*` methods need to be overridden to support the samplers.",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "metadata routing enabled",
    "estimators in Pipeline.steps are not validated yet",
    "estimators in Pipeline.steps are not validated yet",
    "TODO: remove the following methods when the minimum scikit-learn >= 1.4",
    "They do not depend on resampling but we need to redefine them for the",
    "compatibility with the metadata routing framework.",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "metadata routing enabled",
    "not branching here since params is only available if",
    "enable_metadata_routing=True",
    "we don't have to branch here, since params is only non-empty if",
    "enable_metadata_routing=True.",
    "metadata routing is enabled.",
    "TODO: once scikit-learn >= 1.4, the following function should be simplified by",
    "calling `super().get_metadata_routing()`",
    "first we add all steps except the last one",
    "fit, fit_predict, and fit_transform call fit_transform if it",
    "exists, or else fit and transform",
    "then we add the last step",
    "without metadata routing, fit_transform and fit_predict",
    "get all the same params and pass it to the last fit.",
    "if we have a weight for this transformer, multiply output",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "empty cluster",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "the input of the OneHotEncoder needs to be dense",
    "SMOTE resampling starts here",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inverting the OHE",
    "This variable will be used when generating data",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "With one-hot encoding, the median will be repeated twice. We need",
    "to divide by sqrt(2) such that we only have one median value",
    "contributing to the Euclidean distance",
    "SMOTE resampling ends here",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "TODO: only use `sparse_output` when sklearn >= 1.2",
    "TODO(0.13): remove this test",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "backward compatibility when passing a NearestNeighbors object",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "add an additional sample since the query points contains the original dataset",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "with a large `threshold_cleaning`, the algorithm is equivalent to ENN",
    "set a threshold that we should consider only the class #2",
    "making the threshold slightly smaller to take into account class #1",
    "we should have a more aggressive cleaning with n_neighbors is larger",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove in 0.14",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "we don't want to validate again for each call to partial_fit",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "Likely a pandas DataFrame, we explicitly check the type to confirm.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "TODO: remove in 0.13",
    "future default in 0.13",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Adrin Jalali <adrin.jalali@gmail.com>",
    "License: BSD 3 clause",
    "Only the following methods are supported in the routing mechanism. Adding new",
    "methods at the moment involves monkeypatching this list.",
    "Note that if this list is changed or monkeypatched, the corresponding method",
    "needs to be added under a TYPE_CHECKING condition like the one done here in",
    "_MetadataRequester",
    "These methods are a composite of other methods and one cannot set their",
    "requests directly. Instead they should be set by setting the requests of the",
    "simple methods which make the composite ones.",
    "Request values",
    "==============",
    "Each request value needs to be one of the following values, or an alias.",
    "this is used in `__metadata_request__*` attributes to indicate that a",
    "metadata is not present even though it may be present in the",
    "corresponding method's signature.",
    "this is used whenever a default value is changed, and therefore the user",
    "should explicitly set the value, otherwise a warning is shown. An example",
    "is when a meta-estimator is only a router, but then becomes also a",
    "consumer in a new release.",
    "this is the default used in `set_{method}_request` methods to indicate no",
    "change requested by the user.",
    "item is only an alias if it's a valid identifier",
    "Metadata Request for Simple Consumers",
    "=====================================",
    "This section includes MethodMetadataRequest and MetadataRequest which are",
    "used in simple consumers.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "Called when the default attribute access fails with an AttributeError",
    "(either __getattribute__() raises an AttributeError because name is",
    "not an instance attribute or an attribute in the class tree for self;",
    "or __get__() of a name property raises AttributeError). This method",
    "should either return the (computed) attribute value or raise an",
    "AttributeError exception.",
    "https://docs.python.org/3/reference/datamodel.html#object.__getattr__",
    "Metadata Request for Routers",
    "============================",
    "This section includes all objects required for MetadataRouter which is used",
    "in routers, returned by their ``get_metadata_routing``.",
    "This namedtuple is used to store a (mapping, routing) pair. Mapping is a",
    "MethodMapping object, and routing is the output of `get_metadata_routing`.",
    "MetadataRouter stores a collection of these namedtuples.",
    "A namedtuple storing a single method route. A collection of these namedtuples",
    "is stored in a MetadataRouter.",
    "this is here for us to use this attribute's value instead of doing",
    "`isinstance`` in our checks, so that we avoid issues when people vendor",
    "this file instead of using it directly from scikit-learn.",
    "`_self_request` is used if the router is also a consumer.",
    "_self_request, (added using `add_self_request()`) is treated",
    "differently from the other objects which are stored in",
    "_route_mappings.",
    "conflicts are okay if the passed objects are the same, but it's",
    "an issue if they're different objects.",
    "doing this instead of a try/except since an AttributeError could be raised",
    "for other reasons.",
    "Request method",
    "==============",
    "This section includes what's needed for the request method descriptor and",
    "their dynamic generation in a meta class.",
    "These strings are used to dynamically generate the docstrings for",
    "set_{method}_request methods.",
    "we would want to have a method which accepts only the expected args",
    "Now we set the relevant attributes of the function so that it seems",
    "like a normal method to the end user, with known expected arguments.",
    "This code is never run in runtime, but it's here for type checking.",
    "Type checkers fail to understand that the `set_{method}_request`",
    "methods are dynamically generated, and they complain that they are",
    "not defined. We define them here to make type checkers happy.",
    "During type checking analyzers assume this to be True.",
    "The following list of defined methods mirrors the list of methods",
    "in SIMPLE_METHODS.",
    "fmt: off",
    "fmt: on",
    "if there are any issues in the default values, it will be raised",
    "when ``get_metadata_routing`` is called. Here we are going to",
    "ignore all the issues such as bad defaults etc.",
    "set ``set_{method}_request``` methods",
    "Here we use `isfunction` instead of `ismethod` because calling `getattr`",
    "on a class instead of an instance returns an unbound function.",
    "ignore the first parameter of the method, which is usually \"self\"",
    "Then overwrite those defaults with the ones provided in",
    "__metadata_request__* attributes. Defaults set in",
    "__metadata_request__* attributes take precedence over signature",
    "sniffing.",
    "need to go through the MRO since this is a class attribute and",
    "``vars`` doesn't report the parent class attributes. We go through",
    "the reverse of the MRO so that child classes have precedence over",
    "their parents.",
    "we don't check for attr.startswith() since python prefixes attrs",
    "starting with __ with the `_ClassName`.",
    "Process Routing in Routers",
    "==========================",
    "This is almost always the only method used in routers to process and route",
    "given metadata. This is to minimize the boilerplate required in routers.",
    "Here the first two arguments are positional only which makes everything",
    "passed as keyword argument a metadata. The first two args also have an `_`",
    "prefix to reduce the chances of name collisions with the passed metadata, and",
    "since they're positional only, users will never type those underscores.",
    "If routing is not enabled and kwargs are empty, then we don't have to",
    "try doing any routing, we can simply return a structure which returns",
    "an empty dict on routed_params.ANYTHING.ANY_METHOD.",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "Inherits from ValueError and TypeError to keep backward compatibility.",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error",
    "message, i.e. options that are for internal purpose or not",
    "officially supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "When the function is just a wrapper around an estimator, we allow",
    "the function to delegate validation to the estimator, but we",
    "replace the name of the estimator by the name of the function in",
    "the error message to avoid confusion.",
    "better repr if the bounds were given as integers",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "There's no integer outside (-inf, +inf)",
    "bounds are -inf, +inf",
    "interval is [-inf, +inf]",
    "special case for ndarray since it can't be instantiated without",
    "arguments",
    "special case for Integral and Real since they are abstract classes",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "We lost the y.index during resampling. We can safely use X.index to align",
    "them.",
    "We special case the following error:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/1055",
    "There is no easy way to have a generic workaround. Here, we detect",
    "that we have a column with only null values that is datetime64",
    "(resulting from the np.vstack of the resampling).",
    "try again",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfere with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "does not raise",
    "calls f with a bad parameter type",
    "Validation for g is never skipped.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "resample before to fit the tree",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.1",
    "change of signature in scikit-learn 1.1",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "use scikit-learn support for monotonic constraints",
    "create an attribute for compatibility with other scikit-learn tools such",
    "as HTML representation.",
    "TODO: remove in 0.13",
    "Validate or convert input data",
    "TODO: remove when the minimum supported version of scipy will be 1.4",
    "Support for missing values",
    "TODO: remove when the minimum supported version of scikit-learn will be 1.4",
    "_compute_missing_values_in_feature_mask checks if X has missing values and",
    "will raise an error if the underlying tree base estimator can't handle",
    "missing values. Only the criterion is required to determine if the tree",
    "supports missing values.",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when minimum supported version of scikit-learn is 1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "The base class require to have the attribute defined. For scikit-learn",
    "> 1.2, we are going to raise an error.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "TODO: remove in 0.13",
    "Create dataset with missing values",
    "Train forest with missing values",
    "Train forest without missing values",
    "Score is still 80 percent of the forest's score that had no missing values",
    "Create a predictive feature using `y` and with some noise",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.11.0": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Specify how to identify the prompt when copying code snippets",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.linear_model.LogisticRegression`",
    "classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "predict_proba was removed in tensorflow 2.6",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "TODO: remove this file when scikit-learn minimum version is 1.3",
    "Return a copy of the threadlocal configuration so that users will",
    "not be able to modify the configuration with the returned dict.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "empty cluster",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "TODO: only use `sparse_output` when sklearn >= 1.2",
    "TODO(0.13): remove this test",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "we don't want to validate again for each call to partial_fit",
    "TODO: remove when scikit-learn minimum version is 1.3",
    "Likely a pandas DataFrame, we explicitly check the type to confirm.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "TODO: remove in 0.13",
    "future default in 0.13",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "TODO: remove `if True` when we have clear support for:",
    "- ignoring `*args` and `**kwargs` in the signature",
    "Inherits from ValueError and TypeError to keep backward compatibility.",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error",
    "message, i.e. options that are for internal purpose or not",
    "officially supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "When the function is just a wrapper around an estimator,",
    "we allow the function to delegate validation to the",
    "estimator, but we replace the name of the estimator by",
    "the name of the function in the error message to avoid",
    "confusion.",
    "better repr if the bounds were given as integers",
    "TODO(1.4) remove support for Integral.",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "There's no integer outside (-inf, +inf)",
    "bounds are -inf, +inf",
    "interval is [-inf, +inf]",
    "special case for ndarray since it can't be instantiated without",
    "arguments",
    "special case for Integral and Real since they are abstract classes",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "We lost the y.index during resampling. We can safely use X.index to align",
    "them.",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfere with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "an int is also valid but deprecated",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "does not raise",
    "calls f with a bad parameter type",
    "Validation for g is never skipped.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "resample before to fit the tree",
    "TODO: remove when the minimum version of scikit-learn supported is 1.1",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn < 1.2",
    "TODO: remove in 0.13",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "TODO: remove when supporting scikit-learn>=1.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "make a deepcopy to not modify the original dictionary",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "TODO: remove in 0.13",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.10.1": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.svm.LinearSVC` classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "compute the median of the standard deviation of the minority class",
    "scikit-learn >= 1.2",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "TODO: remove `if True` when we have clear support for:",
    "- ignoring `*args` and `**kwargs` in the signature",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error message,",
    "i.e. options that are for internal purpose or not officially",
    "supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "TODO(1.4) remove support for Integral.",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "constraint is an interval",
    "generate a non-integer value such that it can't be valid even if there's",
    "also an integer interval constraint.",
    "We need to check if there's also a real interval constraint to generate a",
    "value that is not valid for any of the 2 interval constraints.",
    "Only the integer interval constraint -> easy",
    "There's also a real interval constraint. Try to find a value left to both",
    "or right to both or in between them.",
    "redefine left and right bounds to be smallest and largest valid integers",
    "in both intervals.",
    "there exists an int left to both intervals",
    "there exists an int right to both intervals",
    "there exists an int between the 2 intervals",
    "there exists an int between the 2 intervals",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfer with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "an int is also valid but deprecated",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "TODO: remove when the minimum version of scikit-learn supported is 1.1",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "scikit-learn < 1.2",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "TODO: remove when supporting scikit-learn>=1.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.10.0": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.svm.LinearSVC` classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decision tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each bootstrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\alpha_{us} \\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\alpha_{os}` defined by :math:`N_{rm} = \\alpha_{os} \\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` has a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: to be removed in 0.12",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: to be removed in 0.12",
    "FIXME: to be removed in 0.12",
    "compute the median of the standard deviation of the minority class",
    "scikit-learn >= 1.2",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "FIXME: to be removed in 0.12",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: to be removed in 0.12",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Generate valid values for the required parameters",
    "The parameters `*args` and `**kwargs` are ignored since we cannot generate",
    "constraints.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "scikit-learn >= 1.2",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "transformer will not change `y` and sampler will always preserve the type of `y`",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: Remove when SciPy 1.9 is the minimum supported version",
    "TODO: Remove when scikit-learn 1.1 is the minimum supported version",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "scikit-learn >= 1.2",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Check that an informative error is raised when the value of a constructor",
    "parameter does not have an appropriate type or value.",
    "check that there is a constraint for each parameter",
    "this object does not have a valid type for sure for all params",
    "This parameter is not validated",
    "First, check that the error is raised if param doesn't match any valid type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Then, for constraints that are more than a type constraint, check that the",
    "error is raised if param does match a valid type but does not match any valid",
    "value for this type.",
    "the method is not accessible with the current set of parameters",
    "The estimator is a label transformer and take only `y`",
    "Check that calling `fit` does not raise any warnings about feature names.",
    "Only check imblearn estimators for feature_names_in_ in docstring",
    "partial_fit checks on second call",
    "Do not call partial fit if early_stopping is on",
    "input_features names is not the same length as n_features_in_",
    "error is raised when `input_features` do not match feature_names_in",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "mypy: ignore-errors",
    "update the docstring of the descriptor",
    "delegate only on instances, not the classes.",
    "this is to allow access to the docstrings.",
    "This makes it possible to use the decorated method as an",
    "unbound method, for instance when monkeypatching.",
    "mypy: ignore-errors",
    "TODO: remove `if True` when we have clear support for:",
    "- ignoring `*args` and `**kwargs` in the signature",
    "We allow parameters to not have a constraint so that third party",
    "estimators can inherit from sklearn estimators without having to",
    "necessarily use the validation tools.",
    "this constraint is satisfied, no need to check further.",
    "No constraint is satisfied, raise with an informative message.",
    "Ignore constraints that we don't want to expose in the error message,",
    "i.e. options that are for internal purpose or not officially",
    "supported.",
    "The dict of parameter constraints is set as an attribute of the function",
    "to make it possible to dynamically introspect the constraints for",
    "automatic testing.",
    "Map *args/**kwargs to the function signature",
    "ignore self/cls and positional/keyword markers",
    "TODO(1.4) remove support for Integral.",
    "we use an interval of Real to ignore np.nan that has its own",
    "constraint",
    "constraint is an interval",
    "generate a non-integer value such that it can't be valid even if there's",
    "also an integer interval constraint.",
    "We need to check if there's also a real interval constraint to generate a",
    "value that is not valid for any of the 2 interval constraints.",
    "Only the integer interval constraint -> easy",
    "There's also a real interval constraint. Try to find a value left to both",
    "or right to both or in between them.",
    "redefine left and right bounds to be smallest and largest valid integers",
    "in both intervals.",
    "there exists an int left to both intervals",
    "there exists an int right to both intervals",
    "there exists an int between the 2 intervals",
    "there exists an int between the 2 intervals",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "_is_neighbors_object(nn_object)",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Some helpers for the tests",
    "check in the presence of extra positional and keyword args",
    "outer decorator does not interfer with validation",
    "validated method can be decorated",
    "no validation in init",
    "list and dict are valid params",
    "the list option is not exposed in the error message",
    "\"auto\" and \"warn\" are valid params",
    "the \"warn\" option is not exposed in the error message",
    "True/False and np.bool_(True/False) are valid params",
    "an int is also valid but deprecated",
    "param1 is validated",
    "param2 is not validated: any type is valid.",
    "does not raise, even though \"b\" is not in the constraints dict and \"a\" is not",
    "a parameter of the estimator.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "TODO: remove when the minimum version of scikit-learn supported is 1.1",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "scikit-learn < 1.2",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "SAMME-R requires predict_proba-enabled estimators",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "TODO: remove when supporting scikit-learn>=1.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "make a deepcopy to not modify the original dictionary",
    "scikit-learn >= 1.2",
    "TODO: remove when supporting scikit-learn>=1.2",
    "scikit-learn < 1.2",
    "TODO: remove when supporting scikit-learn>=1.4",
    "TODO: remove when supporting scikit-learn>=1.2",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "TODO: remove when minimum supported version of scikit-learn is 1.1",
    "Check data",
    "Parallel loop",
    "Reduce",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.9.1": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for math equations -----------------------------------------------",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.svm.LinearSVC` classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` has a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "validate the parameters",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that we deprecate the `n_jobs` parameter.",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "TODO: remove in 0.9",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "FIXME: we could consider to support multiclass-multioutput if",
    "we introduce or reuse a constructor parameter (e.g.",
    "oob_score) allowing our user to pass a callable defining the",
    "scoring strategy on OOB sample.",
    "Decapsulate classes_ attributes",
    "drop the n_outputs axis if there is a single output",
    "Prediction requires X to be in CSR format",
    "n_classes_ is a ndarray at this stage",
    "all the supported type of target will have the same number of",
    "classes in all outputs",
    "for regression, n_classes_ does not exist and we create an empty",
    "axis to be consistent with the classification case and make",
    "the array operations compatible with the 2 settings",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.9.0": [
    "This file is here so that when running from the root folder",
    "./imblearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use imblearn from the local folder",
    "rather than the one from site-packages.",
    "! /usr/bin/env python",
    "Python 2 compat: just to be able to declare that Python >=3.7 is needed.",
    "This is a bit (!) hackish: we are setting a global variable so that the",
    "main imblearn __init__ can detect if it is being loaded by the setup",
    "routine, to avoid attempting to load components that aren't built yet:",
    "the numpy distutils extensions that are used by imbalanced-learn to",
    "recursively build the compiled extensions in sub-packages is based on the",
    "Python import machinery.",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for math equations -----------------------------------------------",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Dependencies generation ----------------------------------------------",
    "get length of header",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.svm.LinearSVC` classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "%% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` has a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "- GL02: If there's a blank line, it should be before the",
    "first line of the Returns section, not after (it allows to have",
    "short docstrings for properties).",
    "Ignore PR02: Unknown parameters for properties. We sometimes use",
    "properties for ducktyping, i.e. SGDClassifier.predict_proba",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "numpy scipy and cython should by in sync with pyproject.toml",
    "We pinned PyWavelet (a scikit-image dependence) to 1.1.1 in the minimum",
    "documentation CI builds that is the latest version that support our",
    "minimum NumPy version required. If PyWavelets 1.2+ is installed, it would",
    "require NumPy 1.17+ that trigger a bug with Pandas 0.25:",
    "https://github.com/numpy/numpy/issues/18355#issuecomment-774610226",
    "When upgrading NumPy, we can unpin PyWavelets but we need to update the",
    "minimum version of Pandas >= 1.0.5.",
    "'build' and 'install' is included to have structured metadata for CI.",
    "It will NOT be included in setup's extras_require",
    "The values are (version_spec, comma separated tags)",
    "create inverse mapping for setuptools",
    "Used by CI to get the min dependencies",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "This variable is injected in the __builtins__ by the build",
    "process. It is used to enable importing subpackages of sklearn when",
    "the binaries are not built",
    "mypy error: Cannot determine type of '__SKLEARN_SETUP__'",
    "We are not importing the rest of scikit-learn during the build",
    "process, as it may not be compiled yet",
    "FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "the following solution:",
    "https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "validate the parameters",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that we deprecate the `n_jobs` parameter.",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Alexandre Gramfort <alexandre.gramfort@inria.fr>",
    "Raghav RV <rvraghav93@gmail.com>",
    "License: BSD 3 clause",
    "walk_packages() ignores DeprecationWarnings, now we need to ignore",
    "FutureWarnings",
    "mypy error: Module has no attribute \"__path__\"",
    "functions to ignore args / docstring of",
    "Methods where y param should be ignored if y=None by default",
    "numpydoc 0.8.0's docscrape tool raises because of collections.abc under",
    "Python 3.7",
    "Test module docstring formatting",
    "Skip test if numpydoc is not found",
    "XXX unreached code as of v0.22",
    "pytest tooling, not part of the scikit-learn API",
    "Exclude non-scikit-learn classes",
    "Now skip docstring test for y when y is None",
    "by default for API reason",
    "Exclude imported functions",
    "Don't test private methods / functions",
    "Test that there are no tabs in our source files",
    "because we don't import",
    "Minimal / degenerate instances: only useful to test the docstrings.",
    "As certain attributes are present \"only\" if a certain parameter is",
    "provided, this checks if the word \"only\" is present in the attribute",
    "description, and if not the attribute is required to be present.",
    "ignore deprecation warnings",
    "attributes",
    "properties",
    "ignore properties that raises an AttributeError and deprecated",
    "properties",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "FIXME: we should use to_numpy with pandas >= 0.25",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Test that the minimum dependencies in the README.rst file are",
    "consistent with the minimum dependencies defined at the file:",
    "imblearn/_min_dependencies.py",
    "Skip the test if the README.rst file is not available.",
    "For instance, when installing scikit-learn from wheels",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "TODO: remove in 0.9",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "with the resampling, we are likely to have rows not included",
    "for the OOB score leading to division by zero",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "overwrite the base class method by disallowing `sample_weight`",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "overwrite the base class method by disallowing `sample_weight`",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.8.1": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for math equations -----------------------------------------------",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.svm.LinearSVC` classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` has a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "# FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "# the following solution:",
    "# https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "validate the parameters",
    "negate diagonal elements",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that we deprecate the `n_jobs` parameter.",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "TODO: remove in 0.9",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "with the resampling, we are likely to have rows not included",
    "for the OOB score leading to division by zero",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.8.0": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix of source filenames.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "The name of the Pygments (syntax highlighting) style to use.",
    "-- Options for math equations -----------------------------------------------",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "\"twitter_url\": \"https://twitter.com/pandas_dev\",",
    "\"navbar_align\": \"right\",  # For testing that the navbar items align properly",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Output file base name for HTML help builder.",
    "-- Options for autodoc ------------------------------------------------------",
    "generate autosummary even if no references",
    "-- Options for numpydoc -----------------------------------------------------",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "-- Options for sphinxcontrib-bibtex -----------------------------------------",
    "bibtex file",
    "-- Options for intersphinx --------------------------------------------------",
    "intersphinx configuration",
    "-- Options for sphinx-gallery -----------------------------------------------",
    "Generate the plot for the gallery",
    "sphinx-gallery configuration",
    "-- Options for github link for what's new -----------------------------------",
    "Config for sphinx_issues",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "-- Additional temporary hacks -----------------------------------------------",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%%",
    "First, we will generate a toy classification dataset with only few samples.",
    "The ratio between the classes will be imbalanced.",
    "%%",
    "%%",
    "Now, we will use a :class:`~imblearn.over_sampling.RandomOverSampler` to",
    "generate a bootstrap for the minority class with as many samples as in the",
    "majority class.",
    "%%",
    "%%",
    "We observe that the minority samples are less transparent than the samples",
    "from the majority class. Indeed, it is due to the fact that these samples",
    "of the minority class are repeated during the bootstrap generation.",
    "",
    "We can set `shrinkage` to a floating value to add a small perturbation to the",
    "samples created and therefore create a smoothed bootstrap.",
    "%%",
    "%%",
    "In this case, we see that the samples in the minority class are not",
    "overlapping anymore due to the added noise.",
    "",
    "The parameter `shrinkage` allows to add more or less perturbation. Let's",
    "add more perturbation when generating the smoothed bootstrap.",
    "%%",
    "%%",
    "Increasing the value of `shrinkage` will disperse the new samples. Forcing",
    "the shrinkage to 0 will be equivalent to generating a normal bootstrap.",
    "%%",
    "%%",
    "Therefore, the `shrinkage` is handy to manually tune the dispersion of the",
    "new samples.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    "Illustration of the influence of the balancing ratio",
    "----------------------------------------------------",
    "",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a logistic regression classifier which is a linear model.",
    "%%",
    "%% [markdown]",
    "We will fit and show the decision boundary model to illustrate the impact of",
    "dealing with imbalanced classes.",
    "%%",
    "%% [markdown]",
    "Greater is the difference between the number of samples in each class, poorer",
    "are the classification results.",
    "",
    "Random over-sampling to balance the data set",
    "--------------------------------------------",
    "",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biased toward the majority",
    "class. The class :class:`~imblearn.over_sampling.RandomOverSampler`",
    "implements such of a strategy.",
    "%%",
    "%% [markdown]",
    "By default, random over-sampling generates a bootstrap. The parameter",
    "`shrinkage` allows adding a small perturbation to the generated data",
    "to generate a smoothed bootstrap instead. The plot below shows the difference",
    "between the two data generation strategies.",
    "%%",
    "%% [markdown]",
    "It looks like more samples are generated with smoothed bootstrap. This is due",
    "to the fact that the samples generated are not superimposing with the",
    "original samples.",
    "",
    "More advanced over-sampling using ADASYN and SMOTE",
    "--------------------------------------------------",
    "",
    "Instead of repeating the same samples when over-sampling or perturbating the",
    "generated bootstrap samples, one can use some specific heuristic instead.",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE` can be used in this case.",
    "%%",
    "%% [markdown]",
    "The following plot illustrates the difference between",
    ":class:`~imblearn.over_sampling.ADASYN` and",
    ":class:`~imblearn.over_sampling.SMOTE`.",
    ":class:`~imblearn.over_sampling.ADASYN` will focus on the samples which are",
    "difficult to classify with a nearest-neighbors rule while regular",
    ":class:`~imblearn.over_sampling.SMOTE` will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "%% [markdown]",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "%%",
    "%% [markdown]",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version",
    "(:class:`~imblearn.over_sampling.BorderlineSMOTE`) will detect which point to",
    "select which are in the border between two classes. The SVM version",
    "(:class:`~imblearn.over_sampling.SVMSMOTE`) will use the support vectors",
    "found using an SVM algorithm to create new sample while the KMeans version",
    "(:class:`~imblearn.over_sampling.KMeansSMOTE`) will make a clustering before",
    "to generate samples in each cluster independently depending each cluster",
    "density.",
    "%%",
    "%% [markdown]",
    "When dealing with a mixed of continuous and categorical features,",
    ":class:`~imblearn.over_sampling.SMOTENC` is the only method which can handle",
    "this case.",
    "%%",
    "Create a dataset of a mix of numerical and categorical data",
    "%% [markdown]",
    "However, if the dataset is composed of only categorical features then one",
    "should use :class:`~imblearn.over_sampling.SMOTEN`.",
    "%%",
    "Generate only categorical data",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first generate a dataset with imbalanced class distribution.",
    "%%",
    "%% [markdown]",
    "We will use an over-sampler :class:`~imblearn.over_sampling.SMOTE` followed",
    "by a :class:`~sklearn.tree.DecisionTreeClassifier`. The aim will be to",
    "search which `k_neighbors` parameter is the most adequate with the dataset",
    "that we generated.",
    "%%",
    "%% [markdown]",
    "We can use the :class:`~sklearn.model_selection.validation_curve` to inspect",
    "the impact of varying the parameter `k_neighbors`. In this case, we need",
    "to use a score to evaluate the generalization score during the",
    "cross-validation.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can now plot the results of the cross-validation for the different",
    "parameter values that we tried.",
    "%%",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "First, we will generate some imbalanced dataset.",
    "%%",
    "%% [markdown]",
    "We will split the data into a training and testing set.",
    "%%",
    "%% [markdown]",
    "We will create a pipeline made of a :class:`~imblearn.over_sampling.SMOTE`",
    "over-sampler followed by a :class:`~sklearn.svm.LinearSVC` classifier.",
    "%%",
    "%% [markdown]",
    "Now, we will train the model on the training set and get the prediction",
    "associated with the testing set. Be aware that the resampling will happen",
    "only when calling `fit`: the number of samples in `y_pred` is the same than",
    "in `y_test`.",
    "%%",
    "%% [markdown]",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "%%",
    "%% [markdown]",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Dataset generation",
    "------------------",
    "",
    "We will create an imbalanced dataset with a couple of samples. We will use",
    ":func:`~sklearn.datasets.make_classification` to generate this dataset.",
    "%%",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.over_sampling.SMOTE` allows to generate samples. However,",
    "this method of over-sampling does not have any knowledge regarding the",
    "underlying distribution. Therefore, some noisy samples can be generated, e.g.",
    "when the different classes cannot be well separated. Hence, it can be",
    "beneficial to apply an under-sampling algorithm to clean the noisy samples.",
    "Two methods are usually used in the literature: (i) Tomek's link and (ii)",
    "edited nearest neighbours cleaning methods. Imbalanced-learn provides two",
    "ready-to-use samplers :class:`~imblearn.combine.SMOTETomek` and",
    ":class:`~imblearn.combine.SMOTEENN`. In general,",
    ":class:`~imblearn.combine.SMOTEENN` cleans more noisy data than",
    ":class:`~imblearn.combine.SMOTETomek`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load an imbalanced dataset",
    "--------------------------",
    "",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "%%",
    "%% [markdown]",
    "Classification using a single decision tree",
    "-------------------------------------------",
    "",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using bagging classifier with and without sampling",
    "-----------------------------------------------------------------",
    "",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "%%",
    "%% [markdown]",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "%%",
    "%%",
    "%% [markdown]",
    "Classification using random forest classifier with and without sampling",
    "-----------------------------------------------------------------------",
    "",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "%%",
    "%% [markdown]",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "%%",
    "%%",
    "%% [markdown]",
    "Boosting classifier",
    "-------------------",
    "",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "%%",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate an imbalanced dataset",
    "------------------------------",
    "",
    "For this example, we will create a synthetic dataset using the function",
    ":func:`~sklearn.datasets.make_classification`. The problem will be a toy",
    "classification problem with a ratio of 1:9 between the two classes.",
    "%%",
    "%%",
    "%% [markdown]",
    "In the following sections, we will show a couple of algorithms that have",
    "been proposed over the years. We intend to illustrate how one can reuse the",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier` by passing different",
    "sampler.",
    "%%",
    "%% [markdown]",
    "Exactly Balanced Bagging and Over-Bagging",
    "-----------------------------------------",
    "",
    "The :class:`~imblearn.ensemble.BalancedBaggingClassifier` can use in",
    "conjunction with a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler`. These methods are",
    "referred as Exactly Balanced Bagging and Over-Bagging, respectively and have",
    "been proposed first in [1]_.",
    "%%",
    "Exactly Balanced Bagging",
    "%%",
    "Over-bagging",
    "%% [markdown]",
    "SMOTE-Bagging",
    "-------------",
    "",
    "Instead of using a :class:`~imblearn.over_sampling.RandomOverSampler` that",
    "make a bootstrap, an alternative is to use",
    ":class:`~imblearn.over_sampling.SMOTE` as an over-sampler. This is known as",
    "SMOTE-Bagging [2]_.",
    "%%",
    "SMOTE-Bagging",
    "%% [markdown]",
    "Roughly Balanced Bagging",
    "------------------------",
    "While using a :class:`~imblearn.under_sampling.RandomUnderSampler` or",
    ":class:`~imblearn.over_sampling.RandomOverSampler` will create exactly the",
    "desired number of samples, it does not follow the statistical spirit wanted",
    "in the bagging framework. The authors in [3]_ proposes to use a negative",
    "binomial distribution to compute the number of samples of the majority",
    "class to be selected and then perform a random under-sampling.",
    "",
    "Here, we illustrate this method by implementing a function in charge of",
    "resampling and use the :class:`~imblearn.FunctionSampler` to integrate it",
    "within a :class:`~imblearn.pipeline.Pipeline` and",
    ":class:`~sklearn.model_selection.cross_validate`.",
    "%%",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "%% [markdown]",
    ".. topic:: References:",
    "",
    ".. [1] R. Maclin, and D. Opitz. \"An empirical evaluation of bagging and",
    "boosting.\" AAAI/IAAI 1997 (1997): 546-551.",
    "",
    ".. [2] S. Wang, and X. Yao. \"Diversity analysis on imbalanced data sets by",
    "using ensemble models.\" 2009 IEEE symposium on computational",
    "intelligence and data mining. IEEE, 2009.",
    "",
    ".. [3] S. Hido, H. Kashima, and Y. Takahashi. \"Roughly balanced bagging",
    "for imbalanced data.\" Statistical Analysis and Data Mining: The ASA",
    "Data Science Journal 2.5\u20106 (2009): 412-426.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "The following function will be used to create toy dataset. It uses the",
    ":func:`~sklearn.datasets.make_classification` from scikit-learn but fixing",
    "some parameters.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the specificities of an algorithm.",
    "%%",
    "%% [markdown]",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "%%",
    "%%",
    "%% [markdown]",
    "Prototype generation: under-sampling by generating new samples",
    "--------------------------------------------------------------",
    "",
    ":class:`~imblearn.under_sampling.ClusterCentroids` under-samples by replacing",
    "the original samples by the centroids of the cluster found.",
    "%%",
    "%% [markdown]",
    "Prototype selection: under-sampling by selecting existing samples",
    "-----------------------------------------------------------------",
    "",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified.",
    ":class:`~imblearn.under_sampling.RandomUnderSampler` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.NearMiss` algorithms implement some",
    "heuristic rules in order to select samples. NearMiss-1 selects samples from",
    "the majority class for which the average distance of the :math:`k`` nearest",
    "samples of the minority class is the smallest. NearMiss-2 selects the samples",
    "from the majority class for which the average distance to the farthest",
    "samples of the negative class is the smallest. NearMiss-3 is a 2-step",
    "algorithm: first, for each minority sample, their :math:`m`",
    "nearest-neighbors will be kept; then, the majority samples selected are the",
    "on for which the average distance to the :math:`k` nearest neighbors is the",
    "largest.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` removes samples of",
    "the majority class for which their class differ from the one of their",
    "nearest-neighbors. This sieve can be repeated which is the principle of the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours`.",
    ":class:`~imblearn.under_sampling.AllKNN` is slightly different from the",
    ":class:`~imblearn.under_sampling.RepeatedEditedNearestNeighbours` by changing",
    "the :math:`k` parameter of the internal nearest neighors algorithm,",
    "increasing it at each iteration.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.CondensedNearestNeighbour` makes use of a",
    "1-NN to iteratively decide if a sample should be kept in a dataset or not.",
    "The issue is that :class:`~imblearn.under_sampling.CondensedNearestNeighbour`",
    "is sensitive to noise by preserving the noisy samples.",
    ":class:`~imblearn.under_sampling.OneSidedSelection` also used the 1-NN and",
    "use :class:`~imblearn.under_sampling.TomekLinks` to remove the samples",
    "considered noisy. The",
    ":class:`~imblearn.under_sampling.NeighbourhoodCleaningRule` use a",
    ":class:`~imblearn.under_sampling.EditedNearestNeighbours` to remove some",
    "sample. Additionally, they use a 3 nearest-neighbors to remove samples which",
    "do not agree with this rule.",
    "%%",
    "%% [markdown]",
    ":class:`~imblearn.under_sampling.InstanceHardnessThreshold` uses the",
    "prediction of classifier to exclude samples. All samples which are classified",
    "with a low probability will be removed.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "This function allows to make nice plotting",
    "%%",
    "%% [markdown]",
    "We will generate some toy data that illustrates how",
    ":class:`~imblearn.under_sampling.TomekLinks` is used to clean a dataset.",
    "%%",
    "%% [markdown]",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbors of each other.",
    "highlight the samples of interest",
    "%% [markdown]",
    "We can run the :class:`~imblearn.under_sampling.TomekLinks` sampling to",
    "remove the corresponding samples. If `sampling_strategy='auto'` only the",
    "sample from the majority class will be removed. If `sampling_strategy='all'`",
    "both samples will be removed.",
    "%%",
    "highlight the samples of interest",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "We define a function allowing to make some nice decoration on the plot.",
    "%%",
    "%% [markdown]",
    "We can start by generating some data to later illustrate the principle of",
    "each :class:`~imblearn.under_sampling.NearMiss` heuristic rules.",
    "%%",
    "%% [mardown]",
    "NearMiss-1",
    "----------",
    "",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "%%",
    "%% [mardown]",
    "NearMiss-2",
    "----------",
    "",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "%%",
    "%% [mardown]",
    "NearMiss-3",
    "----------",
    "",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "%%",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Let's first create an imbalanced dataset and split in to two sets.",
    "%%",
    "%% [markdown]",
    "Now, we will create each individual steps that we would like later to combine",
    "%%",
    "%% [markdown]",
    "Now, we can finally create a pipeline to specify in which order the different",
    "transformers and samplers should be executed before to provide the data to",
    "the final classifier.",
    "%%",
    "%% [markdown]",
    "We can now use the pipeline created as a normal classifier where resampling",
    "will happen when calling `fit` and disabled when calling `decision_function`,",
    "`predict_proba`, or `predict`.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`~sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Problem definition",
    "------------------",
    "",
    "We are dropping the following features:",
    "",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "%%",
    "%% [markdown]",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "%%",
    "%% [markdown]",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "%%",
    "%% [markdown]",
    "We will perform a cross-validation evaluation to get an estimate of the test",
    "score.",
    "",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "%%",
    "%% [markdown]",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "%%",
    "%% [markdown]",
    "Strategies to learn from an imbalanced dataset",
    "----------------------------------------------",
    "We will use a dictionary and a list to continuously store the results of",
    "our experiments and show them as a pandas dataframe.",
    "%%",
    "%% [markdown]",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our :class:`~sklearn.dummy.DummyClassifier`.",
    "%%",
    "%% [markdown]",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier. In this regard,",
    "we will need to one-hot encode the categorical columns and standardized the",
    "numerical columns before to inject the data into the",
    ":class:`~sklearn.linear_model.LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "%%",
    "%% [markdown]",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "%%",
    "%% [markdown]",
    "Finally, we connect our preprocessor with our",
    ":class:`~sklearn.linear_model.LogisticRegression`. We can then evaluate our",
    "model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as :class:`~sklearn.ensemble.RandomForestClassifier`. With this type of",
    "classifier, we will not need to scale the numerical data, and we will only",
    "need to ordinal encode the categorical data.",
    "%%",
    "%%",
    "%% [markdown]",
    "The :class:`~sklearn.ensemble.RandomForestClassifier` is as well affected by",
    "the class imbalanced, slightly less than the linear model. Now, we will",
    "present different approach to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the :class:`~sklearn.ensemble.RandomForestClassifier` is still biased toward",
    "the majority class, mainly due to the criterion which is not suited enough to",
    "fight the class imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "%%",
    "%%",
    "%%",
    "%%",
    "%% [markdown]",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of specific balanced algorithms from imbalanced-learn",
    ".........................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the :class:`imblearn.ensemble.BalancedRandomForestClassifier` and",
    ":class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%%",
    "%%",
    "%% [markdown]",
    "The performance with the",
    ":class:`~imblearn.ensemble.BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a :class:`~imblearn.ensemble.BalancedBaggingClassifier`.",
    "%% [markdown]",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Load the dataset",
    "----------------",
    "",
    "We will use a dataset containing image from know person where we will",
    "build a model to recognize the person on the image. We will make this problem",
    "a binary problem by taking picture of only George W. Bush and Bill Clinton.",
    "%%",
    "%%",
    "%% [markdown]",
    "We can check the ratio between the two classes.",
    "%%",
    "%% [markdown]",
    "We see that we have an imbalanced classification problem with ~95% of the",
    "data belonging to the class G.W. Bush.",
    "",
    "Compare over-sampling approaches",
    "--------------------------------",
    "",
    "We will use different over-sampling approaches and use a kNN classifier",
    "to check if we can recognize the 2 presidents. The evaluation will be",
    "performed through cross-validation and we will plot the mean ROC curve.",
    "",
    "We will create different pipelines and evaluate them.",
    "%%",
    "%%",
    "%% [markdown]",
    "We will compute the mean ROC curve for each pipeline using a different splits",
    "provided by the :class:`~sklearn.model_selection.StratifiedKFold`",
    "cross-validation.",
    "%%",
    "compute the mean fpr/tpr to get the mean ROC curve",
    "Create a display that we will reuse to make the aggregated plots for",
    "all methods",
    "%% [markdown]",
    "In the previous cell, we created the different mean ROC curve and we can plot",
    "them on the same plot.",
    "%%",
    "%% [markdown]",
    "We see that for this task, methods that are generating new samples with some",
    "interpolation (i.e. ADASYN and SMOTE) perform better than random",
    "over-sampling or no resampling.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Setting the data set",
    "--------------------",
    "",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "%%",
    "%%",
    "% [markdown]",
    "The usual scikit-learn pipeline",
    "-------------------------------",
    "",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "%%",
    "%%",
    "%% [markdown]",
    "Balancing the class before classification",
    "-----------------------------------------",
    "",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a :class:`~imblearn.under_sampling.RandomUnderSampler` to equalize the",
    "number of samples in all the classes before the training.",
    "",
    "It is also important to note that we are using the",
    ":class:`~imblearn.pipeline.make_pipeline` function implemented in",
    "imbalanced-learn to properly handle the samplers.",
    "%%",
    "%% [markdown]",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`~imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`~sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`~imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Generate the dataset",
    "--------------------",
    "",
    "First, we will generate a dataset and convert it to a",
    ":class:`~pandas.DataFrame` with arbitrary column names. We will plot the",
    "original dataset.",
    "%%",
    "%% [markdown]",
    "Make a dataset imbalanced",
    "-------------------------",
    "",
    "Now, we will show the helpers :func:`~imblearn.datasets.make_imbalance`",
    "that is useful to random select a subset of samples. It will impact the",
    "class distribution as specified by the parameters.",
    "%%",
    "%%",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "%%",
    "%% [markdown]",
    "Create an imbalanced dataset",
    "----------------------------",
    "",
    "First, we will create an imbalanced data set from a the iris data set.",
    "%%",
    "%%",
    "%% [markdown]",
    "Using ``sampling_strategy`` in resampling algorithms",
    "====================================================",
    "",
    "`sampling_strategy` as a `float`",
    "--------------------------------",
    "",
    "`sampling_strategy` can be given a `float`. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "%%",
    "select only 2 classes since the ratio make sense in this case",
    "%%",
    "%% [markdown]",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` has a `str`",
    "-------------------------------",
    "",
    "`sampling_strategy` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "%%",
    "%% [markdown]",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy as a `dict`",
    "------------------------------",
    "",
    "When `sampling_strategy` is a `dict`, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a `list` instead.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a `list`",
    "-------------------------------",
    "",
    "When `sampling_strategy` is a `list`, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "%%",
    "%% [markdown]",
    "`sampling_strategy` as a callable",
    "---------------------------------",
    "",
    "When callable, function taking `y` and returns a `dict`. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "%%",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we need to overwrite SamplerMixin.fit to bypass the validation",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transformer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "# FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "# the following solution:",
    "# https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "categories are expected to be encoded from 0 to n_categories - 1",
    "list of length n_features of ndarray (n_categories, n_classes)",
    "compute the counts",
    "normalize by the summing over the classes",
    "silence potential warning due to in-place division by zero",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Check basic feature of the metric:",
    "* the shape of the distance matrix is (n_samples, n_samples)",
    "* computing pairwise distance of X is the same than explicitely between",
    "X and X.",
    "Check the property of the vdm distance. Let's check the property",
    "described in \"Improved Heterogeneous Distance Functions\", D.R. Wilson and",
    "T.R. Martinez, Journal of Artificial Intelligence Research 6 (1997) 1-34",
    "https://arxiv.org/pdf/cs/9701101.pdf",
    "",
    "\"if an attribute color has three values red, green and blue, and the",
    "application is to identify whether or not an object is an apple, red and",
    "green would be considered closer than red and blue because the former two",
    "both have similar correlations with the output class apple.\"",
    "defined our feature",
    "0 - not an apple / 1 - an apple",
    "computing the distance between a sample of the same category should",
    "give a null distance",
    "check the property explained in the introduction example",
    "green and red are very close",
    "blue is closer to red than green",
    "Check that \"auto\" is equivalent to provide the number categories",
    "beforehand",
    "Check that we raise an error if n_categories is inconsistent with the",
    "number of features in X",
    "Check that we don't get issue when a category is missing between 0",
    "n_categories - 1",
    "remove a categories that could be between 0 and n_categories",
    "Check that we raise a NotFittedError when `fit` is not not called before",
    "pairwise.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "smoothed bootstrap imposes to make numerical operation; we need",
    "to be sure to have only numerical data in X",
    "generate a smoothed bootstrap with a perturbation",
    "generate a bootstrap",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "validate the parameters",
    "negate diagonal elements",
    "target_class_indices = np.flatnonzero(y == class_sample)",
    "X_class = _safe_indexing(X, target_class_indices)",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "generate sample indices that will be used to generate new samples",
    "for each drawn samples, select its k-neighbors and generate a sample",
    "where for each feature individually, each category generated is the",
    "most common category",
    "the kneigbors search will include the sample itself which is",
    "expected from the original algorithm",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "overall check for SMOTEN",
    "check if the SMOTEN resample data as expected",
    "we generate data such that \"not apple\" will be the minority class and",
    "samples from this class will be generated. We will force the \"blue\"",
    "category to be associated with this class. Therefore, the new generated",
    "samples should as well be from the \"blue\" category.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check the random over-sampling with a multiclass problem",
    "check that resampling with heterogeneous dtype is working with basic",
    "resampling",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "check that we raise an error when heterogeneous dtype data are given",
    "and a smoothed bootstrap is requested",
    "check that smoothed bootstrap is working for numerical array",
    "check that a shrinkage factor of 0 is equivalent to not create a smoothed",
    "bootstrap",
    "check the behaviour of the shrinkage parameter",
    "the covariance of the data generated with the larger shrinkage factor",
    "should also be larger.",
    "check the validation of the shrinkage parameter",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "fmt: off",
    "fmt: on",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that we deprecate the `n_jobs` parameter.",
    "check that the samples selecting by the hard voting corresponds to the",
    "targeted class",
    "non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/738",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Check that the validation is bypass when calling `fit`",
    "Non-regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/782",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "we don't filter samplers based on their tag here because we want to make",
    "sure that the fitted attribute does not exist if the tag is not",
    "stipulated",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "TODO: remove in 0.9",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "with the resampling, we are likely to have rows not included",
    "for the OOB score leading to division by zero",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "the sampler needs to be validated before to call _fit because",
    "_validate_y is called before _validate_estimator and would require",
    "to know which type of sampler we are using.",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "check that we can pass any kind of sampler to a bagging classifier",
    "check that we have balanced class with the right counts of class",
    "sample depending on the sampling strategy",
    "check that we can provide a FunctionSampler in BalancedBaggingClassifier",
    "find the minority and majority classes",
    "compute the number of sample to draw from the majority class using",
    "a negative binomial distribution",
    "draw randomly with or without replacement",
    "Roughly Balanced Bagging",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.7.0": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new sample while",
    "the KMeans version will make a clustering before to generate samples in each",
    "cluster independently depending each cluster density.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Problem definition",
    "##############################################################################",
    "we are dropping the following features:",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "##############################################################################",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "##############################################################################",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "##############################################################################",
    "For the rest of the notebook, we will make a single split to get training",
    "and testing data. Note that you should use cross-validation to have an",
    "estimate of the performance variation in practice.",
    "##############################################################################",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "#############################################################################",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "##############################################################################",
    "Strategies to learn from an imbalanced dataset",
    "##############################################################################",
    "##############################################################################",
    "We will first define a helper function which will train a given model",
    "and compute both accuracy and balanced accuracy. The results will be stored",
    "in a dataframe",
    "Let's define an empty dataframe to store the results",
    "##############################################################################",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our `DummyClassifier`.",
    "##############################################################################",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a `LogisticRegression`",
    "classifier. In this regard, we will need to one-hot encode the categorical",
    "columns and standardized the numerical columns before to inject the data into",
    "the `LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "##############################################################################",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "##############################################################################",
    "Finally, we connect our preprocessor with our `LogisticRegression`. We can",
    "then evaluate our model.",
    "##############################################################################",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as `RandomForestClassifier`. With this type of classifier, we will not",
    "need to scale the numerical data, and we will only need to ordinal encode the",
    "categorical data.",
    "##############################################################################",
    "The `RandomForestClassifier` is as well affected by the class imbalanced,",
    "slightly less than the linear model. Now, we will present different approach",
    "to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "##############################################################################",
    "",
    "##############################################################################",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the `RandomForestClassifier` is still biased toward the majority class,",
    "mainly due to the criterion which is not suited enough to fight the class",
    "imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "##############################################################################",
    "",
    "##############################################################################",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of `BalancedRandomForestClassifier` and `BalancedBaggingClassifier`",
    ".......................................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the `BalancedRandomForestClassifier` and",
    "`BalancedBaggingClassifier`.",
    "##############################################################################",
    "The performance with the `BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a `BalancedBaggingClassifier`.",
    "##############################################################################",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "",
    "We will repeat the same experiment but with a ratio of 100:1 and make a",
    "similar analysis.",
    "##############################################################################",
    "Increase imbalanced ratio",
    "##############################################################################",
    "##############################################################################",
    "When we analyse the results, we can draw similar conclusions than in the",
    "previous discussion. However, we can observe that the strategy",
    "`class_weight=\"balanced\"` does not improve the performance when using a",
    "`RandomForestClassifier`. A resampling is indeed required. The most effective",
    "method remains the `BalancedBaggingClassifier` using a GBDT as a base",
    "learner.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "# FIXME: When we get Python 3.7 as minimal version, we will need to switch to",
    "# the following solution:",
    "# https://snarky.ca/lazy-importing-in-python-3-7/",
    "Import the target module and insert it into the parent's namespace",
    "Update this object's dict so that if someone keeps a reference to the",
    "LazyLoader, lookups are efficient (__getattr__ is only called on",
    "lookups that fail).",
    "delay the import of keras since we are going to import either tensorflow",
    "or keras",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "@Substitution(",
    "sampling_strategy=BaseOverSampler._sampling_strategy_docstring,",
    "random_state=_random_state_docstring)",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "In the edge case where the median of the std is equal to 0, the 1s",
    "entries will be also nullified. In this case, we store the original",
    "categorical encoding which will be later used for inversing the OHE",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "In the case that the median std was equal to zeros, we have to",
    "create non-null entry based on the encoded of OHE",
    "tie breaking argmax",
    "validate the parameters",
    "negate diagonal elements",
    "target_class_indices = np.flatnonzero(y == class_sample)",
    "X_class = _safe_indexing(X, target_class_indices)",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Non-regression test for #662",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/662",
    "check that the categorical feature is not random but correspond to the",
    "categories seen in the minority class samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "check that we deprecate the `n_jobs` parameter.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "For NearMiss, let's check the three algorithms",
    "Common tests for estimator instances",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "trigger our checks if this is a SamplerMixin",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Non-regression test for #709",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/709",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ignore deprecation warnings triggered at import time and from walking",
    "packages",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "ignore first 'self' argument for instance methods",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "The * is place before a keyword only argument without a default value",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "with the resampling, we are likely to have rows not included",
    "for the OOB score leading to division by zero",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.6.2": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new sample while",
    "the KMeans version will make a clustering before to generate samples in each",
    "cluster independently depending each cluster density.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Problem definition",
    "##############################################################################",
    "we are dropping the following features:",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "##############################################################################",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "##############################################################################",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "##############################################################################",
    "For the rest of the notebook, we will make a single split to get training",
    "and testing data. Note that you should use cross-validation to have an",
    "estimate of the performance variation in practice.",
    "##############################################################################",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "#############################################################################",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "##############################################################################",
    "Strategies to learn from an imbalanced dataset",
    "##############################################################################",
    "##############################################################################",
    "We will first define a helper function which will train a given model",
    "and compute both accuracy and balanced accuracy. The results will be stored",
    "in a dataframe",
    "Let's define an empty dataframe to store the results",
    "##############################################################################",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our `DummyClassifier`.",
    "##############################################################################",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a `LogisticRegression`",
    "classifier. In this regard, we will need to one-hot encode the categorical",
    "columns and standardized the numerical columns before to inject the data into",
    "the `LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "##############################################################################",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "##############################################################################",
    "Finally, we connect our preprocessor with our `LogisticRegression`. We can",
    "then evaluate our model.",
    "##############################################################################",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as `RandomForestClassifier`. With this type of classifier, we will not",
    "need to scale the numerical data, and we will only need to ordinal encode the",
    "categorical data.",
    "##############################################################################",
    "The `RandomForestClassifier` is as well affected by the class imbalanced,",
    "slightly less than the linear model. Now, we will present different approach",
    "to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "##############################################################################",
    "",
    "##############################################################################",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the `RandomForestClassifier` is still biased toward the majority class,",
    "mainly due to the criterion which is not suited enough to fight the class",
    "imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "##############################################################################",
    "",
    "##############################################################################",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of `BalancedRandomForestClassifier` and `BalancedBaggingClassifier`",
    ".......................................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the `BalancedRandomForestClassifier` and",
    "`BalancedBaggingClassifier`.",
    "##############################################################################",
    "The performance with the `BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a `BalancedBaggingClassifier`.",
    "##############################################################################",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "",
    "We will repeat the same experiment but with a ratio of 100:1 and make a",
    "similar analysis.",
    "##############################################################################",
    "Increase imbalanced ratio",
    "##############################################################################",
    "##############################################################################",
    "When we analyse the results, we can draw similar conclusions than in the",
    "previous discussion. However, we can observe that the strategy",
    "`class_weight=\"balanced\"` does not improve the performance when using a",
    "`RandomForestClassifier`. A resampling is indeed required. The most effective",
    "method remains the `BalancedBaggingClassifier` using a GBDT as a base",
    "learner.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib <= 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "@Substitution(",
    "sampling_strategy=BaseOverSampler._sampling_strategy_docstring,",
    "random_state=_random_state_docstring)",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "tie breaking argmax",
    "validate the parameters",
    "negate diagonal elements",
    "target_class_indices = np.flatnonzero(y == class_sample)",
    "X_class = _safe_indexing(X, target_class_indices)",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "trigger our checks if this is a SamplerMixin",
    "scikit-learn common tests",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return the same type for dataframes or series types",
    "Check that the can samplers handle simple lists",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "DataFrame and DataFrame case",
    "DataFrames and Series case",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "with the resampling, we are likely to have rows not included",
    "for the OOB score leading to division by zero",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.6.1": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new sample while",
    "the KMeans version will make a clustering before to generate samples in each",
    "cluster independently depending each cluster density.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Problem definition",
    "##############################################################################",
    "we are dropping the following features:",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "##############################################################################",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "##############################################################################",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "##############################################################################",
    "For the rest of the notebook, we will make a single split to get training",
    "and testing data. Note that you should use cross-validation to have an",
    "estimate of the performance variation in practice.",
    "##############################################################################",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "#############################################################################",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "##############################################################################",
    "Strategies to learn from an imbalanced dataset",
    "##############################################################################",
    "##############################################################################",
    "We will first define a helper function which will train a given model",
    "and compute both accuracy and balanced accuracy. The results will be stored",
    "in a dataframe",
    "Let's define an empty dataframe to store the results",
    "##############################################################################",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our `DummyClassifier`.",
    "##############################################################################",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a `LogisticRegression`",
    "classifier. In this regard, we will need to one-hot encode the categorical",
    "columns and standardized the numerical columns before to inject the data into",
    "the `LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "##############################################################################",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "##############################################################################",
    "Finally, we connect our preprocessor with our `LogisticRegression`. We can",
    "then evaluate our model.",
    "##############################################################################",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as `RandomForestClassifier`. With this type of classifier, we will not",
    "need to scale the numerical data, and we will only need to ordinal encode the",
    "categorical data.",
    "##############################################################################",
    "The `RandomForestClassifier` is as well affected by the class imbalanced,",
    "slightly less than the linear model. Now, we will present different approach",
    "to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "##############################################################################",
    "",
    "##############################################################################",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the `RandomForestClassifier` is still biased toward the majority class,",
    "mainly due to the criterion which is not suited enough to fight the class",
    "imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "##############################################################################",
    "",
    "##############################################################################",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of `BalancedRandomForestClassifier` and `BalancedBaggingClassifier`",
    ".......................................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the `BalancedRandomForestClassifier` and",
    "`BalancedBaggingClassifier`.",
    "##############################################################################",
    "The performance with the `BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a `BalancedBaggingClassifier`.",
    "##############################################################################",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "",
    "We will repeat the same experiment but with a ratio of 100:1 and make a",
    "similar analysis.",
    "##############################################################################",
    "Increase imbalanced ratio",
    "##############################################################################",
    "##############################################################################",
    "When we analyse the results, we can draw similar conclusions than in the",
    "previous discussion. However, we can observe that the strategy",
    "`class_weight=\"balanced\"` does not improve the performance when using a",
    "`RandomForestClassifier`. A resampling is indeed required. The most effective",
    "method remains the `BalancedBaggingClassifier` using a GBDT as a base",
    "learner.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "store information to build dataframe",
    "store information to build a series",
    "store the columns name to reconstruct a dataframe",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib <= 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store information to build dataframe",
    "store information to build a series",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "@Substitution(",
    "sampling_strategy=BaseOverSampler._sampling_strategy_docstring,",
    "random_state=_random_state_docstring)",
    "store information to build dataframe",
    "store information to build a series",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "tie breaking argmax",
    "validate the parameters",
    "negate diagonal elements",
    "target_class_indices = np.flatnonzero(y == class_sample)",
    "X_class = _safe_indexing(X, target_class_indices)",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store information to build dataframe",
    "store information to build a series",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "trigger our checks if this is a SamplerMixin",
    "scikit-learn common tests",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return a pandas dataframe if a dataframe was given in",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "with the resampling, we are likely to have rows not included",
    "for the OOB score leading to division by zero",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.6.0": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "Temporary work-around for spacing problem between parameter and parameter",
    "type in the doc, see https://github.com/numpy/numpydoc/issues/215. The bug",
    "has been fixed in sphinx (https://github.com/sphinx-doc/sphinx/pull/5976) but",
    "through a change in sphinx basic.css except rtd_theme does not use basic.css.",
    "In an ideal world, this would get fixed in this PR:",
    "https://github.com/readthedocs/sphinx_rtd_theme/pull/747/files",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new sample while",
    "the KMeans version will make a clustering before to generate samples in each",
    "cluster independently depending each cluster density.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Problem definition",
    "##############################################################################",
    "we are dropping the following features:",
    "- \"fnlwgt\": this feature was created while studying the \"adult\" dataset.",
    "Thus, we will not use this feature which is not acquired during the survey.",
    "- \"education-num\": it is encoding the same information than \"education\".",
    "Thus, we are removing one of these 2 features.",
    "##############################################################################",
    "The \"adult\" dataset as a class ratio of about 3:1",
    "##############################################################################",
    "This dataset is only slightly imbalanced. To better highlight the effect of",
    "learning from an imbalanced dataset, we will increase its ratio to 30:1",
    "##############################################################################",
    "For the rest of the notebook, we will make a single split to get training",
    "and testing data. Note that you should use cross-validation to have an",
    "estimate of the performance variation in practice.",
    "##############################################################################",
    "As a baseline, we could use a classifier which will always predict the",
    "majority class independently of the features provided.",
    "#############################################################################",
    "Instead of using the accuracy, we can use the balanced accuracy which will",
    "take into account the balancing issue.",
    "##############################################################################",
    "Strategies to learn from an imbalanced dataset",
    "##############################################################################",
    "##############################################################################",
    "We will first define a helper function which will train a given model",
    "and compute both accuracy and balanced accuracy. The results will be stored",
    "in a dataframe",
    "Let's define an empty dataframe to store the results",
    "##############################################################################",
    "Dummy baseline",
    "..............",
    "",
    "Before to train a real machine learning model, we can store the results",
    "obtained with our `DummyClassifier`.",
    "##############################################################################",
    "Linear classifier baseline",
    "..........................",
    "",
    "We will create a machine learning pipeline using a `LogisticRegression`",
    "classifier. In this regard, we will need to one-hot encode the categorical",
    "columns and standardized the numerical columns before to inject the data into",
    "the `LogisticRegression` classifier.",
    "",
    "First, we define our numerical and categorical pipelines.",
    "##############################################################################",
    "Then, we can create a preprocessor which will dispatch the categorical",
    "columns to the categorical pipeline and the numerical columns to the",
    "numerical pipeline",
    "##############################################################################",
    "Finally, we connect our preprocessor with our `LogisticRegression`. We can",
    "then evaluate our model.",
    "##############################################################################",
    "We can see that our linear model is learning slightly better than our dummy",
    "baseline. However, it is impacted by the class imbalance.",
    "",
    "We can verify that something similar is happening with a tree-based model",
    "such as `RandomForestClassifier`. With this type of classifier, we will not",
    "need to scale the numerical data, and we will only need to ordinal encode the",
    "categorical data.",
    "##############################################################################",
    "The `RandomForestClassifier` is as well affected by the class imbalanced,",
    "slightly less than the linear model. Now, we will present different approach",
    "to improve the performance of these 2 models.",
    "",
    "Use `class_weight`",
    "..................",
    "",
    "Most of the models in `scikit-learn` have a parameter `class_weight`. This",
    "parameter will affect the computation of the loss in linear model or the",
    "criterion in the tree-based model to penalize differently a false",
    "classification from the minority and majority class. We can set",
    "`class_weight=\"balanced\"` such that the weight applied is inversely",
    "proportional to the class frequency. We test this parametrization in both",
    "linear model and tree-based model.",
    "##############################################################################",
    "",
    "##############################################################################",
    "We can see that using `class_weight` was really effective for the linear",
    "model, alleviating the issue of learning from imbalanced classes. However,",
    "the `RandomForestClassifier` is still biased toward the majority class,",
    "mainly due to the criterion which is not suited enough to fight the class",
    "imbalance.",
    "",
    "Resample the training set during learning",
    ".........................................",
    "",
    "Another way is to resample the training set by under-sampling or",
    "over-sampling some of the samples. `imbalanced-learn` provides some samplers",
    "to do such processing.",
    "##############################################################################",
    "",
    "##############################################################################",
    "Applying a random under-sampler before the training of the linear model or",
    "random forest, allows to not focus on the majority class at the cost of",
    "making more mistake for samples in the majority class (i.e. decreased",
    "accuracy).",
    "",
    "We could apply any type of samplers and find which sampler is working best",
    "on the current dataset.",
    "",
    "Instead, we will present another way by using classifiers which will apply",
    "sampling internally.",
    "",
    "Use of `BalancedRandomForestClassifier` and `BalancedBaggingClassifier`",
    ".......................................................................",
    "",
    "We already showed that random under-sampling can be effective on decision",
    "tree. However, instead of under-sampling once the dataset, one could",
    "under-sample the original dataset before to take a bootstrap sample. This is",
    "the base of the `BalancedRandomForestClassifier` and",
    "`BalancedBaggingClassifier`.",
    "##############################################################################",
    "The performance with the `BalancedRandomForestClassifier` is better than",
    "applying a single random under-sampling. We will use a gradient-boosting",
    "classifier within a `BalancedBaggingClassifier`.",
    "##############################################################################",
    "This last approach is the most effective. The different under-sampling allows",
    "to bring some diversity for the different GBDT to learn and not focus on a",
    "portion of the majority class.",
    "",
    "We will repeat the same experiment but with a ratio of 100:1 and make a",
    "similar analysis.",
    "##############################################################################",
    "Increase imbalanced ratio",
    "##############################################################################",
    "##############################################################################",
    "When we analyse the results, we can draw similar conclusions than in the",
    "previous discussion. However, we can observe that the strategy",
    "`class_weight=\"balanced\"` does not improve the performance when using a",
    "`RandomForestClassifier`. A resampling is indeed required. The most effective",
    "method remains the `BalancedBaggingClassifier` using a GBDT as a base",
    "learner.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "List of whitelisted modules and methods; regexp are supported.",
    "These docstrings will fail because they are inheriting from scikit-learn",
    "skip private classes",
    "We ignore following error code,",
    "- RT02: The first line of the Returns section",
    "should contain only the type, ..",
    "(as we may need refer to the name of the returned",
    "object)",
    "- GL01: Docstring text (summary) should start in the line",
    "immediately after the opening quotes (not in the same line,",
    "or leaving a blank line in between)",
    "Following codes are only taken into account for the",
    "top level class docstrings:",
    "- ES01: No extended summary found",
    "- SA01: See Also section not found",
    "- EX01: No examples section found",
    "In particular we can't parse the signature of properties",
    "When applied to classes, detect class method. For functions",
    "method = None.",
    "TODO: this detection can be improved. Currently we assume that we have",
    "class # methods if the second path element before last is in camel case.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "store information to build dataframe",
    "store information to build a series",
    "store the columns name to reconstruct a dataframe",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib <= 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "rounding may cause new amount for n_samples",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store information to build dataframe",
    "store information to build a series",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "np.newaxis for backwards compatability with random_state",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "@Substitution(",
    "sampling_strategy=BaseOverSampler._sampling_strategy_docstring,",
    "random_state=_random_state_docstring)",
    "store information to build dataframe",
    "store information to build a series",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "change in sparsity structure more efficient with LIL than CSR",
    "convert to dense array since scipy.sparse doesn't handle 3D",
    "tie breaking argmax",
    "validate the parameters",
    "negate diagonal elements",
    "target_class_indices = np.flatnonzero(y == class_sample)",
    "X_class = _safe_indexing(X, target_class_indices)",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can oversample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store information to build dataframe",
    "store information to build a series",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that we can undersample even with missing or infinite data",
    "regression tests for #605",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that we can let a pass a regression variable by turning down the",
    "validation",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "trigger our checks if this is a SamplerMixin",
    "scikit-learn common tests",
    "should raise warning if the target is continuous (we cannot raise error)",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "check that we return a pandas dataframe if a dataframe was given in",
    "Check that multiclass target lead to the same results than OVA encoding",
    "Cast X and y to not default dtype",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is None",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is none",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Get bootstrap sample size",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "with the resampling, we are likely to have rows not included",
    "for the OOB score leading to division by zero",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "First fit with no restriction on max samples",
    "Second fit with max samples restricted to just 2",
    "Regression test for #655: check that the oob score is closed to 0.5",
    "a binomial experiment.",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.5.0": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "pngmath / imgmath compatibility layer for different sphinx versions",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Format template for PR URI",
    "e.g. 'https://github.com/sloria/marshmallow/pull/{issue}",
    "Format template for commit URI",
    "e.g. 'https://github.com/sloria/marshmallow/commits/{commit}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{M}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new sample while",
    "the KMeans version will make a clustering before to generate samples in each",
    "cluster independently depending each cluster density.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "FIXME: remove in 0.6",
    "FIXME: remove in 0.6",
    "both ratio and sampling_strategy should not be set",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib < 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove the str tag once the following PR is merged:",
    "https://github.com/scikit-learn/scikit-learn/pull/14043",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: remove in 0.6",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "FIXME: In 0.6, SMOTE should inherit only from BaseSMOTE.",
    "FIXME: in 0.6 call super()",
    "FIXME: in 0.6 call super()",
    "FIXME: remove in 0.6 after deprecation cycle",
    "FIXME: to be removed in 0.6",
    "FIXME: uncomment in version 0.6",
    "self._validate_estimator()",
    "@Substitution(",
    "sampling_strategy=BaseOverSampler._sampling_strategy_docstring,",
    "random_state=_random_state_docstring)",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "To avoid conversion and since there is only few samples used, we",
    "convert those samples to dense array.",
    "tie breaking argmax",
    "validate the parameters",
    "negate diagonal elements",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "target_class_indices = np.flatnonzero(y == class_sample)",
    "X_class = safe_indexing(X, target_class_indices)",
    "identify cluster which are answering the requirements",
    "the cluster is already considered balanced",
    "not enough samples to apply SMOTE",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check that m_neighbors is properly set. Regression test for:",
    "https://github.com/scikit-learn-contrib/imbalanced-learn/issues/568",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "check for deprecated random_state",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "check for deprecated random_state",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "TODO: remove the str tag once the following PR is merged:",
    "https://github.com/scikit-learn/scikit-learn/pull/14043",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Pipeline accepts steps as tuple",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check 'passthrough' step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Test that the score_samples method is implemented on a pipeline.",
    "Test that the score_samples method on pipeline yields same results as",
    "applying transform and score_samples steps separately.",
    "Check the shapes",
    "Check the values",
    "Test that a pipeline does not have score_samples method when the final",
    "step of the pipeline does not have score_samples defined.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: remove in 0.6",
    "trigger our checks if this is a SamplerMixin",
    "scikit-learn common tests",
    "should raise warning if the target is continuous (we cannot raise error)",
    "FIXME: in 0.6 set the random_state for all",
    "if the target is multilabel then we should raise an error",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "FIXME remove in 0.6 -> ratio will be deprecated",
    "in this test we will force all samplers to not change the class 1",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "FIXME: in 0.6 set the random_state for all",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: in 0.6 set the random_state for all",
    "Check that multiclass target lead to the same results than OVA encoding",
    "FIXME: in 0.6 set the random_state for all",
    "Cast X and y to not default dtype",
    "FIXME: in 0.6 set the random_state for all",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "FIXME: Turn into an error in 0.6",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "Author: Alexander L. Hayes <hayesall@iu.edu>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is 1",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check if default job count is 1",
    "Check if job count is set",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ensemble are a bit specific since they are returning an array of",
    "resampled arrays.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a sampling_strategy",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME remove ratio at 0.6",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check an error is raised with we don't pass sampling_strategy and ratio",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "flag for keras sequence duck-typing",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.4.3": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "pngmath / imgmath compatibility layer for different sphinx versions",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{m}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "FIXME: remove in 0.6",
    "FIXME: remove in 0.6",
    "both ratio and sampling_strategy should not be set",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib < 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: remove in 0.6",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "FIXME: In 0.6, SMOTE should inherit only from BaseSMOTE.",
    "FIXME: in 0.6 call super()",
    "FIXME: in 0.6 call super()",
    "FIXME: remove in 0.6 after deprecation cycle",
    "FIXME: to be removed in 0.6",
    "FIXME: uncomment in version 0.6",
    "self._validate_estimator()",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "To avoid conversion and since there is only few samples used, we",
    "convert those samples to dense array.",
    "tie breaking argmax",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "check for deprecated random_state",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "check for deprecated random_state",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: remove in 0.6",
    "check that estimators treat dtype object as numeric if possible",
    "trigger our checks if this is a SamplerMixin",
    "monkey patch check_dtype_object for the sampler allowing strings",
    "scikit-learn common tests",
    "FIXME: in 0.6 set the random_state for all",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "FIXME remove in 0.6 -> ratio will be deprecated",
    "in this test we will force all samplers to not change the class 1",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "FIXME: in 0.6 set the random_state for all",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: in 0.6 set the random_state for all",
    "Check that multiclass target lead to the same results than OVA encoding",
    "FIXME: in 0.6 set the random_state for all",
    "Cast X and y to not default dtype",
    "FIXME: in 0.6 set the random_state for all",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "FIXME: Turn into an error in 0.6",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ensemble are a bit specific since they are returning an array of",
    "resampled arrays.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a sampling_strategy",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME remove ratio at 0.6",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check an error is raised with we don't pass sampling_strategy and ratio",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.4.2": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "pngmath / imgmath compatibility layer for different sphinx versions",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{m}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "FIXME: remove in 0.6",
    "FIXME: remove in 0.6",
    "both ratio and sampling_strategy should not be set",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib < 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: remove in 0.6",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "FIXME: In 0.6, SMOTE should inherit only from BaseSMOTE.",
    "FIXME: in 0.6 call super()",
    "FIXME: in 0.6 call super()",
    "FIXME: remove in 0.6 after deprecation cycle",
    "FIXME: to be removed in 0.6",
    "FIXME: uncomment in version 0.6",
    "self._validate_estimator()",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "To avoid conversion and since there is only few samples used, we",
    "convert those samples to dense array.",
    "tie breaking argmax",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "check for deprecated random_state",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "check for deprecated random_state",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: remove in 0.6",
    "check that estimators treat dtype object as numeric if possible",
    "trigger our checks if this is a SamplerMixin",
    "monkey patch check_dtype_object for the sampler allowing strings",
    "scikit-learn common tests",
    "FIXME: in 0.6 set the random_state for all",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "FIXME remove in 0.6 -> ratio will be deprecated",
    "in this test we will force all samplers to not change the class 1",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "FIXME: in 0.6 set the random_state for all",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: in 0.6 set the random_state for all",
    "Check that multiclass target lead to the same results than OVA encoding",
    "FIXME: in 0.6 set the random_state for all",
    "Cast X and y to not default dtype",
    "FIXME: in 0.6 set the random_state for all",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "FIXME: Turn into an error in 0.6",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ensemble are a bit specific since they are returning an array of",
    "resampled arrays.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a sampling_strategy",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME remove ratio at 0.6",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check an error is raised with we don't pass sampling_strategy and ratio",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.4.1": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "pngmath / imgmath compatibility layer for different sphinx versions",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{m}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "FIXME: remove in 0.6",
    "FIXME: remove in 0.6",
    "both ratio and sampling_strategy should not be set",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib < 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: remove in 0.6",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "FIXME: In 0.6, SMOTE should inherit only from BaseSMOTE.",
    "FIXME: in 0.6 call super()",
    "FIXME: in 0.6 call super()",
    "FIXME: remove in 0.6 after deprecation cycle",
    "FIXME: to be removed in 0.6",
    "FIXME: uncomment in version 0.6",
    "self._validate_estimator()",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "To avoid conversion and since there is only few samples used, we",
    "convert those samples to dense array.",
    "tie breaking argmax",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "check for deprecated random_state",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "check for deprecated random_state",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: remove in 0.6",
    "check that estimators treat dtype object as numeric if possible",
    "trigger our checks if this is a SamplerMixin",
    "monkey patch check_dtype_object for the sampler allowing strings",
    "scikit-learn common tests",
    "FIXME: in 0.6 set the random_state for all",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "FIXME remove in 0.6 -> ratio will be deprecated",
    "in this test we will force all samplers to not change the class 1",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "FIXME: in 0.6 set the random_state for all",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: in 0.6 set the random_state for all",
    "Check that multiclass target lead to the same results than OVA encoding",
    "FIXME: in 0.6 set the random_state for all",
    "Cast X and y to not default dtype",
    "FIXME: in 0.6 set the random_state for all",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "FIXME: Turn into an error in 0.6",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ensemble are a bit specific since they are returning an array of",
    "resampled arrays.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a sampling_strategy",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME remove ratio at 0.6",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check an error is raised with we don't pass sampling_strategy and ratio",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.4.0": [
    "This file is here so that when running from the root folder",
    "./sklearn is added to sys.path by pytest.",
    "See https://docs.pytest.org/en/latest/pythonpath.html for more details.",
    "For example, this allows to build extensions in place and run pytest",
    "doc/modules/clustering.rst and use sklearn from the local folder",
    "rather than the one from site-packages.",
    "Set numpy array str/repr to legacy behaviour on numpy > 1.13 to make",
    "the doctests pass",
    "! /usr/bin/env python",
    "get __version__ from _version.py",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "this is needed for some reason...",
    "see https://github.com/numpy/numpydoc/issues/69",
    "pngmath / imgmath compatibility layer for different sphinx versions",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plot for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "intersphinx configuration",
    "sphinx-gallery configuration",
    "-- Options for manual page output ---------------------------------------",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "def generate_example_rst(app, what, name, obj, options, lines):",
    "# generate empty examples files, so that we don't get",
    "# inclusion errors if there are no examples for a class / module",
    "examples_path = os.path.join(app.srcdir, \"generated\",",
    "\"%s.examples\" % name)",
    "if not os.path.exists(examples_path):",
    "# touch file",
    "open(examples_path, 'w').close()",
    "Config for sphinx_issues",
    "app.connect('autodoc-process-docstring', generate_example_rst)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "First, we will create an imbalanced data set from a the iris data set.",
    "##############################################################################",
    "Using ``sampling_strategy`` in resampling algorithms",
    "##############################################################################",
    "##############################################################################",
    "``sampling_strategy`` as a ``float``",
    "....................................",
    "",
    "``sampling_strategy`` can be given a ``float``. For **under-sampling",
    "methods**, it corresponds to the ratio :math:`\\\\alpha_{us}` defined by",
    ":math:`N_{rM} = \\\\alpha_{us} \\\\times N_{m}` where :math:`N_{rM}` and",
    ":math:`N_{m}` are the number of samples in the majority class after",
    "resampling and the number of samples in the minority class, respectively.",
    "select only 2 classes since the ratio make sense in this case",
    "##############################################################################",
    "For **over-sampling methods**, it correspond to the ratio",
    ":math:`\\\\alpha_{os}` defined by :math:`N_{rm} = \\\\alpha_{os} \\\\times N_{m}`",
    "where :math:`N_{rm}` and :math:`N_{M}` are the number of samples in the",
    "minority class after resampling and the number of samples in the majority",
    "class, respectively.",
    "##############################################################################",
    "``sampling_strategy`` has a ``str``",
    "...................................",
    "",
    "``sampling_strategy`` can be given as a string which specify the class",
    "targeted by the resampling. With under- and over-sampling, the number of",
    "samples will be equalized.",
    "",
    "Note that we are using multiple classes from now on.",
    "##############################################################################",
    "With **cleaning method**, the number of samples in each class will not be",
    "equalized even if targeted.",
    "##############################################################################",
    "``sampling_strategy`` as a ``dict``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``dict``, the keys correspond to the targeted",
    "classes. The values correspond to the desired number of samples for each",
    "targeted class. This is working for both **under- and over-sampling**",
    "algorithms but not for the **cleaning algorithms**. Use a ``list`` instead.",
    "##############################################################################",
    "``sampling_strategy`` as a ``list``",
    "...................................",
    "",
    "When ``sampling_strategy`` is a ``list``, the list contains the targeted",
    "classes. It is used only for **cleaning methods** and raise an error",
    "otherwise.",
    "##############################################################################",
    "``sampling_strategy`` as a callable",
    "...................................",
    "",
    "When callable, function taking ``y`` and returns a ``dict``. The keys",
    "correspond to the targeted classes. The values correspond to the desired",
    "number of samples for each class.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "#############################################################################",
    "Toy data generation",
    "#############################################################################",
    "#############################################################################",
    "We are generating some non Gaussian data set contaminated with some unform",
    "noise.",
    "#############################################################################",
    "We will generate some cleaned test data without outliers.",
    "#############################################################################",
    "How to use the :class:`imblearn.FunctionSampler`",
    "#############################################################################",
    "#############################################################################",
    "We first define a function which will use",
    ":class:`sklearn.ensemble.IsolationForest` to eliminate some outliers from",
    "our dataset during training. The function passed to the",
    ":class:`imblearn.FunctionSampler` will be called when using the method",
    "``fit_resample``.",
    "#############################################################################",
    "Integrate it within a pipeline",
    "#############################################################################",
    "#############################################################################",
    "By elimnating outliers before the training, the classifier will be less",
    "affected during the prediction.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "##############################################################################",
    "When dealing with a mixed of continuous and categorical features, SMOTE-NC",
    "is the only method which can handle this case.",
    "create a synthetic data set with continuous and categorical features",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Load an imbalanced dataset",
    "##############################################################################",
    "We will load the UCI SatImage dataset which has an imbalanced ratio of 9.3:1",
    "(number of majority sample for a minority sample). The data are then split",
    "into training and testing.",
    "##############################################################################",
    "Classification using a single decision tree",
    "##############################################################################",
    "We train a decision tree classifier which will be used as a baseline for the",
    "rest of this example.",
    "##############################################################################",
    "The results are reported in terms of balanced accuracy and geometric mean",
    "which are metrics widely used in the literature to validate model trained on",
    "imbalanced set.",
    "##############################################################################",
    "Classification using bagging classifier with and without sampling",
    "##############################################################################",
    "Instead of using a single tree, we will check if an ensemble of decsion tree",
    "can actually alleviate the issue induced by the class imbalancing. First, we",
    "will use a bagging classifier and its counter part which internally uses a",
    "random under-sampling to balanced each boostrap sample.",
    "##############################################################################",
    "Balancing each bootstrap sample allows to increase significantly the balanced",
    "accuracy and the geometric mean.",
    "##############################################################################",
    "Classification using random forest classifier with and without sampling",
    "##############################################################################",
    "Random forest is another popular ensemble method and it is usually",
    "outperforming bagging. Here, we used a vanilla random forest and its balanced",
    "counterpart in which each bootstrap sample is balanced.",
    "Similarly to the previous experiment, the balanced classifier outperform the",
    "classifier which learn from imbalanced bootstrap samples. In addition, random",
    "forest outsperforms the bagging classifier.",
    "##############################################################################",
    "Boosting classifier",
    "##############################################################################",
    "In the same manner, easy ensemble classifier is a bag of balanced AdaBoost",
    "classifier. However, it will be slower to train than random forest and will",
    "achieve worse performance.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``sampling_strategy='auto'`` only the sample from the majority",
    "class will be removed. If ``sampling_strategy='all'`` both samples will be",
    "removed.",
    "highlight the samples of interest",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Data loading",
    "##############################################################################",
    "##############################################################################",
    "First, you should download the Porto Seguro data set from Kaggle. See the",
    "link in the introduction.",
    "##############################################################################",
    "The data set is imbalanced and it will have an effect on the fitting.",
    "##############################################################################",
    "Define the pre-processing pipeline",
    "##############################################################################",
    "##############################################################################",
    "We want to standard scale the numerical features while we want to one-hot",
    "encode the categorical features. In this regard, we make use of the",
    ":class:`sklearn.compose.ColumnTransformer`.",
    "Create an environment variable to avoid using the GPU. This can be changed.",
    "##############################################################################",
    "Create a neural-network",
    "##############################################################################",
    "##############################################################################",
    "We create a decorator to report the computation time",
    "##############################################################################",
    "The first model will be trained using the ``fit`` method and with imbalanced",
    "mini-batches.",
    "##############################################################################",
    "In the contrary, we will use imbalanced-learn to create a generator of",
    "mini-batches which will yield balanced mini-batches.",
    "##############################################################################",
    "Classification loop",
    "##############################################################################",
    "##############################################################################",
    "We will perform a 10-fold cross-validation and train the neural-network with",
    "the two different strategies previously presented.",
    "##############################################################################",
    "Plot of the results and computation time",
    "##############################################################################",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "define an alias for back-compatibility",
    "FIXME: remove in 0.6",
    "FIXME: remove in 0.6",
    "both ratio and sampling_strategy should not be set",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "joblib >= 0.12",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "joblib < 0.11",
    "we do not clone when caching is disabled to",
    "preserve backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "FIXME: remove in 0.6",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "FIXME: rename _sample -> _fit_resample in 0.6",
    "FIXME: In 0.6, SMOTE should inherit only from BaseSMOTE.",
    "FIXME: in 0.6 call super()",
    "FIXME: in 0.6 call super()",
    "FIXME: remove in 0.6 after deprecation cycle",
    "FIXME: to be removed in 0.6",
    "FIXME: uncomment in version 0.6",
    "self._validate_estimator()",
    "compute the median of the standard deviation of the minority class",
    "the input of the OneHotEncoder needs to be dense",
    "we can replace the 1 entries of the categorical features with the",
    "median of the standard deviation. It will ensure that whenever",
    "distance is computed between 2 samples, the difference will be equal",
    "to the median of the standard deviation as in the original paper.",
    "reverse the encoding of the categorical features",
    "the matrix is supposed to be in the CSR format after the stacking",
    "To avoid conversion and since there is only few samples used, we",
    "convert those samples to dense array.",
    "tie breaking argmax",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "Dzianis Dudnik",
    "License: MIT",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "return the categories",
    "create 2 random continuous feature",
    "create a categorical feature using some string",
    "create a categorical feature using some integer",
    "part of the common test which apply to SMOTE-NC even if it is not default",
    "constructible",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Cast X and y to not default dtype",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class",
    "helper functions",
    "input and output",
    "build the model and weights",
    "build the loss, predict, and train operator",
    "Initialization of all variables in the graph",
    "For each epoch, run accuracy on train and test",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "check for deprecated random_state",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "check for deprecated random_state",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "check for deprecated random_state",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1else:",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check for deprecated random_state",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "don't run twice the sampler tests. Meta-estimator do not have a",
    "fit_resample method.",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "tests that Pipeline passes predict_params to the final estimator",
    "when predict is invoked",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: remove in 0.6",
    "check that estimators treat dtype object as numeric if possible",
    "trigger our checks if this is a SamplerMixin",
    "monkey patch check_dtype_object for the sampler allowing strings",
    "scikit-learn common tests",
    "FIXME: in 0.6 set the random_state for all",
    "IHT does not enforce the number of samples but provide a number",
    "of samples the closest to the desired target.",
    "FIXME remove in 0.6 -> ratio will be deprecated",
    "in this test we will force all samplers to not change the class 1",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "FIXME: in 0.6 set the random_state for all",
    "Check that the samplers handle pandas dataframe and pandas series",
    "FIXME: in 0.6 set the random_state for all",
    "Check that multiclass target lead to the same results than OVA encoding",
    "FIXME: in 0.6 set the random_state for all",
    "Cast X and y to not default dtype",
    "FIXME: in 0.6 set the random_state for all",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in sampling_strategy are also in y",
    "check that there is no negative number",
    "FIXME: Turn into an error in 0.6",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "check that all keys in sampling_strategy are also in y",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "We pass on purpose a non sorted dictionary and check that the resulting",
    "dictionary is sorted. Refer to issue #428.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Otherwise create a default SMOTE",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "resample before to fit the tree",
    "Validate or convert input data",
    "Pre-sort indices to avoid that each individual tree of the",
    "ensemble sorts the indices.",
    "Remap output",
    "reshape is necessary to preserve the data contiguity against vs",
    "[:, np.newaxis] that does not.",
    "Check parameters",
    "Free allocated memory, if any",
    "We draw from the random state to get the random state we",
    "would have got if we hadn't used a warm_start.",
    "Parallel loop: we prefer the threading backend as the Cython code",
    "for fitting the trees is internally releasing the Python GIL",
    "making threading more efficient than multiprocessing in",
    "that case. However, we respect any parallel_backend contexts set",
    "at a higher level, since correctness does not rely on using",
    "threads.",
    "Collect newly grown trees",
    "Create pipeline with the fitted samplers and trees",
    "Decapsulate classes_ attributes",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Construct y coding as described in Zhu et al [2]:",
    "",
    "y_k = 1 if c == k else -1 / (K - 1)",
    "",
    "where K == n_classes_ and c, k in [0, K) are indices along the second",
    "axis of the y coding with c being the index corresponding to the true",
    "class label.",
    "Displace zero probabilities so the log is defined.",
    "Also fix negative elements which may occur with",
    "negative sample weights.",
    "Boost weight using multi-class AdaBoost SAMME.R alg",
    "Only boost the weights if it will fit again",
    "Only boost positive weights",
    "Instances incorrectly classified",
    "Error fraction",
    "Stop if classification is perfect",
    "Stop if the error is at least as bad as random guessing",
    "Boost weight using multi-class AdaBoost SAMME alg",
    "Only boost the weights if I will fit again",
    "Only boost positive weights",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Ensemble are a bit specific since they are returning an array of",
    "resampled arrays.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "check that we have an ensemble of samplers and estimators with a",
    "consistent size",
    "each sampler in the ensemble should have different random state",
    "each estimator in the ensemble should have different random state",
    "check the consistency of the feature importances",
    "check the consistency of the prediction outpus",
    "Predictions should be the same when sample_weight are all ones",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a sampling_strategy",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the sampling_strategy parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check classification for various parameter settings.",
    "test the different prediction function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check warning if not enough estimators",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME remove ratio at 0.6",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check an error is raised with we don't pass sampling_strategy and ratio",
    "we are reusing part of utils.check_sampling_strategy, however this is not",
    "cover in the common tests so we will repeat it here",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "This is a trick to avoid an error during tests collection with pytest. We",
    "avoid the error when importing the package raise the error at the moment of",
    "creating the instance.",
    "FIXME: Remove in 0.6",
    "shuffle the indices since the sampler are packing them by class"
  ],
  "0.3.4": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If extensions (or modules to document with autodoc) are in another",
    "directory, add these directories to sys.path here. If the directory",
    "is relative to the documentation root, use os.path.abspath to make it",
    "absolute, like shown here.",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "to make references clickable",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Config for sphinx_issues",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Creation of an imbalanced data set from a balanced data set",
    "##############################################################################",
    "##############################################################################",
    "We will show how to use the parameter ``ratio`` when dealing with the",
    "``make_imbalance`` function. For this function, this parameter accepts both",
    "dictionary and callable. When using a dictionary, each key will correspond to",
    "the class of interest and the corresponding value will be the number of",
    "samples desired in this class.",
    "##############################################################################",
    "You might required more flexibility and require your own heuristic to",
    "determine the number of samples by class and you can define your own callable",
    "as follow. In this case we will define a function which will use a float",
    "multiplier to define the number of samples per class.",
    "##############################################################################",
    "Using ``ratio`` in resampling algorithm",
    "##############################################################################",
    "##############################################################################",
    "In all sampling algorithms, ``ratio`` can be used as illustrated earlier. In",
    "addition, some predefined functions are available and can be executed using a",
    "``str`` with the following choices: (i) ``'minority'``: resample the minority",
    "class; (ii) ``'majority'``: resample the majority class, (iii) ``'not",
    "minority'``: resample all classes apart of the minority class, (iv)",
    "``'all'``: resample all classes, and (v) ``'auto'``: correspond to 'all' with",
    "for over-sampling methods and 'not minority' for under-sampling methods. The",
    "classes targeted will be over-sampled or under-sampled to achieve an equal",
    "number of sample with the majority or minority class.",
    "##############################################################################",
    "However, you can use the dictionary or the callable options as previously",
    "mentioned.",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Remove axis for second plot",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Turning the balanced bagging classifier into a balanced random forest",
    "##############################################################################",
    "It is possible to turn the ``BalancedBaggingClassifier`` into a balanced",
    "random forest by using a ``DecisionTreeClassifier`` with",
    "``max_features='auto'``. We illustrate such changes below.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Andreas Mueller",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "remove Tomek links",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss",
    "Two subplots, unpack the axes array immediately",
    "plot the missing samples",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "make nice plotting",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Use hard voting instead of soft voting",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``ratio='auto'`` only the sample from the majority class will be",
    "removed. If ``ratio='all'`` both samples will be removed.",
    "highlight the samples of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "plot samples which have been removed",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check the consistency of X and y",
    "self.sampling_type is already checked in check_ratio",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "we do not clone when caching is disabled to preserve",
    "backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "XXX: Calling sample in pipeline it means that the",
    "last estimator is a sampler. Samplers don't carry",
    "the sampled data. So, call 'fit_sample' in all intermediate",
    "steps to get the sampled data for the last estimator.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "No average: zeros in array",
    "Macro average is changed",
    "Check for micro",
    "Check for weighted",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "Compute the geometric mean for each of the classes",
    "average tests",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Get the version",
    "sensitivity scorer",
    "specificity scorer",
    "geometric_mean scorer",
    "make a iba metric before a scorer",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME Deprecated in 0.2, to be removed in 0.4",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated from 0.2. To be removed in 0.4.",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "To be removed in 0.4",
    "Select the appropriate classifier",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME remove at the end of the deprecation 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "some can just not be sensibly default constructed",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "make the checks from scikit-learn",
    "trigger our checks if this is a SamplerMixin",
    "FIXME already present in scikit-learn 0.19",
    "test scikit-learn compatibility",
    "Estimators in mono_output_task_error raise ValueError if y is of 1-D",
    "Convert into a 2-D y for those estimators.",
    "check that fit method only changes or sets private attributes",
    "to not check deprecated classes",
    "check that fit doesn't add any public attribute",
    "check that fit doesn't change any public attribute",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in ratio are also in y",
    "check that there is no negative number",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "tests that the estimator actually fails on \"bad\" estimators.",
    "not a complete test of all checks, which are very extensive.",
    "check that we have a set_params and can clone",
    "check that we have a fit method",
    "check that fit does input validation",
    "check that predict does input validation (doesn't accept dicts in input)",
    "check that estimator state does not change",
    "at transform/predict/predict_proba time",
    "check that `fit` only changes attributes that",
    "are private (start with an _ or end with a _).",
    "check that `fit` doesn't add any public attribute",
    "check for sparse matrix input handling",
    "the check for sparse input handling prints to the stdout,",
    "instead of raising an error, so as not to remove the original traceback.",
    "that means we need to jump through some hoops to catch it.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "If an object was given, affect",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "To be removed in 0.4",
    "Define the classifier to use",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "FIXME: uncomment when #9723 is merged in scikit-learn",
    "def test_estimators_samples():",
    "# Check that format of estimators_samples_ is correct and that results",
    "# generated at fit time can be identically reproduced at a later time",
    "# using data saved in object attributes.",
    "X, y = make_hastie_10_2(n_samples=200, random_state=1)",
    "# remap the y outside of the BalancedBaggingclassifier",
    "# _, y = np.unique(y, return_inverse=True)",
    "bagging = BalancedBaggingClassifier(LogisticRegression(),",
    "max_samples=0.5,",
    "max_features=0.5, random_state=1,",
    "bootstrap=False)",
    "bagging.fit(X, y)",
    "# Get relevant attributes",
    "estimators_samples = bagging.estimators_samples_",
    "estimators_features = bagging.estimators_features_",
    "estimators = bagging.estimators_",
    "# Test for correct formatting",
    "assert len(estimators_samples) == len(estimators)",
    "assert len(estimators_samples[0]) == len(X)",
    "assert estimators_samples[0].dtype.kind == 'b'",
    "# Re-fit single estimator to test for consistent sampling",
    "estimator_index = 0",
    "estimator_samples = estimators_samples[estimator_index]",
    "estimator_features = estimators_features[estimator_index]",
    "estimator = estimators[estimator_index]",
    "X_train = (X[estimator_samples])[:, estimator_features]",
    "y_train = y[estimator_samples]",
    "orig_coefs = estimator.steps[-1][1].coef_",
    "estimator.fit(X_train, y_train)",
    "new_coefs = estimator.steps[-1][1].coef_",
    "assert_array_almost_equal(orig_coefs, new_coefs)",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a ratio",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME: deprecated in 0.2 to be removed in 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_ratio, however this is not cover in",
    "the common tests so we will repeat it here",
    "FIXME: to be removed in 0.4 due to deprecation",
    "resample without using min_c_",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT"
  ],
  "0.3.3": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If extensions (or modules to document with autodoc) are in another",
    "directory, add these directories to sys.path here. If the directory",
    "is relative to the documentation root, use os.path.abspath to make it",
    "absolute, like shown here.",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "to make references clickable",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Config for sphinx_issues",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Creation of an imbalanced data set from a balanced data set",
    "##############################################################################",
    "##############################################################################",
    "We will show how to use the parameter ``ratio`` when dealing with the",
    "``make_imbalance`` function. For this function, this parameter accepts both",
    "dictionary and callable. When using a dictionary, each key will correspond to",
    "the class of interest and the corresponding value will be the number of",
    "samples desired in this class.",
    "##############################################################################",
    "You might required more flexibility and require your own heuristic to",
    "determine the number of samples by class and you can define your own callable",
    "as follow. In this case we will define a function which will use a float",
    "multiplier to define the number of samples per class.",
    "##############################################################################",
    "Using ``ratio`` in resampling algorithm",
    "##############################################################################",
    "##############################################################################",
    "In all sampling algorithms, ``ratio`` can be used as illustrated earlier. In",
    "addition, some predefined functions are available and can be executed using a",
    "``str`` with the following choices: (i) ``'minority'``: resample the minority",
    "class; (ii) ``'majority'``: resample the majority class, (iii) ``'not",
    "minority'``: resample all classes apart of the minority class, (iv)",
    "``'all'``: resample all classes, and (v) ``'auto'``: correspond to 'all' with",
    "for over-sampling methods and 'not minority' for under-sampling methods. The",
    "classes targeted will be over-sampled or under-sampled to achieve an equal",
    "number of sample with the majority or minority class.",
    "##############################################################################",
    "However, you can use the dictionary or the callable options as previously",
    "mentioned.",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Remove axis for second plot",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Turning the balanced bagging classifier into a balanced random forest",
    "##############################################################################",
    "It is possible to turn the ``BalancedBaggingClassifier`` into a balanced",
    "random forest by using a ``DecisionTreeClassifier`` with",
    "``max_features='auto'``. We illustrate such changes below.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Andreas Mueller",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "remove Tomek links",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss",
    "Two subplots, unpack the axes array immediately",
    "plot the missing samples",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "make nice plotting",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Use hard voting instead of soft voting",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``ratio='auto'`` only the sample from the majority class will be",
    "removed. If ``ratio='all'`` both samples will be removed.",
    "highlight the samples of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "plot samples which have been removed",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check the consistency of X and y",
    "self.sampling_type is already checked in check_ratio",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "we do not clone when caching is disabled to preserve",
    "backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "XXX: Calling sample in pipeline it means that the",
    "last estimator is a sampler. Samplers don't carry",
    "the sampled data. So, call 'fit_sample' in all intermediate",
    "steps to get the sampled data for the last estimator.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "No average: zeros in array",
    "Macro average is changed",
    "Check for micro",
    "Check for weighted",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "Compute the geometric mean for each of the classes",
    "average tests",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Get the version",
    "sensitivity scorer",
    "specificity scorer",
    "geometric_mean scorer",
    "make a iba metric before a scorer",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME Deprecated in 0.2, to be removed in 0.4",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated from 0.2. To be removed in 0.4.",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "To be removed in 0.4",
    "Select the appropriate classifier",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME remove at the end of the deprecation 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "some can just not be sensibly default constructed",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "make the checks from scikit-learn",
    "trigger our checks if this is a SamplerMixin",
    "FIXME already present in scikit-learn 0.19",
    "test scikit-learn compatibility",
    "Estimators in mono_output_task_error raise ValueError if y is of 1-D",
    "Convert into a 2-D y for those estimators.",
    "check that fit method only changes or sets private attributes",
    "to not check deprecated classes",
    "check that fit doesn't add any public attribute",
    "check that fit doesn't change any public attribute",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in ratio are also in y",
    "check that there is no negative number",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "tests that the estimator actually fails on \"bad\" estimators.",
    "not a complete test of all checks, which are very extensive.",
    "check that we have a set_params and can clone",
    "check that we have a fit method",
    "check that fit does input validation",
    "check that predict does input validation (doesn't accept dicts in input)",
    "check that estimator state does not change",
    "at transform/predict/predict_proba time",
    "check that `fit` only changes attributes that",
    "are private (start with an _ or end with a _).",
    "check that `fit` doesn't add any public attribute",
    "check for sparse matrix input handling",
    "the check for sparse input handling prints to the stdout,",
    "instead of raising an error, so as not to remove the original traceback.",
    "that means we need to jump through some hoops to catch it.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "If an object was given, affect",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "To be removed in 0.4",
    "Define the classifier to use",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "FIXME: uncomment when #9723 is merged in scikit-learn",
    "def test_estimators_samples():",
    "# Check that format of estimators_samples_ is correct and that results",
    "# generated at fit time can be identically reproduced at a later time",
    "# using data saved in object attributes.",
    "X, y = make_hastie_10_2(n_samples=200, random_state=1)",
    "# remap the y outside of the BalancedBaggingclassifier",
    "# _, y = np.unique(y, return_inverse=True)",
    "bagging = BalancedBaggingClassifier(LogisticRegression(),",
    "max_samples=0.5,",
    "max_features=0.5, random_state=1,",
    "bootstrap=False)",
    "bagging.fit(X, y)",
    "# Get relevant attributes",
    "estimators_samples = bagging.estimators_samples_",
    "estimators_features = bagging.estimators_features_",
    "estimators = bagging.estimators_",
    "# Test for correct formatting",
    "assert len(estimators_samples) == len(estimators)",
    "assert len(estimators_samples[0]) == len(X)",
    "assert estimators_samples[0].dtype.kind == 'b'",
    "# Re-fit single estimator to test for consistent sampling",
    "estimator_index = 0",
    "estimator_samples = estimators_samples[estimator_index]",
    "estimator_features = estimators_features[estimator_index]",
    "estimator = estimators[estimator_index]",
    "X_train = (X[estimator_samples])[:, estimator_features]",
    "y_train = y[estimator_samples]",
    "orig_coefs = estimator.steps[-1][1].coef_",
    "estimator.fit(X_train, y_train)",
    "new_coefs = estimator.steps[-1][1].coef_",
    "assert_array_almost_equal(orig_coefs, new_coefs)",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a ratio",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME: deprecated in 0.2 to be removed in 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_ratio, however this is not cover in",
    "the common tests so we will repeat it here",
    "FIXME: to be removed in 0.4 due to deprecation",
    "resample without using min_c_",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT"
  ],
  "0.3.2": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If extensions (or modules to document with autodoc) are in another",
    "directory, add these directories to sys.path here. If the directory",
    "is relative to the documentation root, use os.path.abspath to make it",
    "absolute, like shown here.",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "to make references clickable",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Config for sphinx_issues",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Creation of an imbalanced data set from a balanced data set",
    "##############################################################################",
    "##############################################################################",
    "We will show how to use the parameter ``ratio`` when dealing with the",
    "``make_imbalance`` function. For this function, this parameter accepts both",
    "dictionary and callable. When using a dictionary, each key will correspond to",
    "the class of interest and the corresponding value will be the number of",
    "samples desired in this class.",
    "##############################################################################",
    "You might required more flexibility and require your own heuristic to",
    "determine the number of samples by class and you can define your own callable",
    "as follow. In this case we will define a function which will use a float",
    "multiplier to define the number of samples per class.",
    "##############################################################################",
    "Using ``ratio`` in resampling algorithm",
    "##############################################################################",
    "##############################################################################",
    "In all sampling algorithms, ``ratio`` can be used as illustrated earlier. In",
    "addition, some predefined functions are available and can be executed using a",
    "``str`` with the following choices: (i) ``'minority'``: resample the minority",
    "class; (ii) ``'majority'``: resample the majority class, (iii) ``'not",
    "minority'``: resample all classes apart of the minority class, (iv)",
    "``'all'``: resample all classes, and (v) ``'auto'``: correspond to 'all' with",
    "for over-sampling methods and 'not minority' for under-sampling methods. The",
    "classes targeted will be over-sampled or under-sampled to achieve an equal",
    "number of sample with the majority or minority class.",
    "##############################################################################",
    "However, you can use the dictionary or the callable options as previously",
    "mentioned.",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Remove axis for second plot",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Turning the balanced bagging classifier into a balanced random forest",
    "##############################################################################",
    "It is possible to turn the ``BalancedBaggingClassifier`` into a balanced",
    "random forest by using a ``DecisionTreeClassifier`` with",
    "``max_features='auto'``. We illustrate such changes below.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Andreas Mueller",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "remove Tomek links",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss",
    "Two subplots, unpack the axes array immediately",
    "plot the missing samples",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "make nice plotting",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Use hard voting instead of soft voting",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``ratio='auto'`` only the sample from the majority class will be",
    "removed. If ``ratio='all'`` both samples will be removed.",
    "highlight the samples of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "plot samples which have been removed",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check the consistency of X and y",
    "self.sampling_type is already checked in check_ratio",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "we do not clone when caching is disabled to preserve",
    "backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "XXX: Calling sample in pipeline it means that the",
    "last estimator is a sampler. Samplers don't carry",
    "the sampled data. So, call 'fit_sample' in all intermediate",
    "steps to get the sampled data for the last estimator.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "No average: zeros in array",
    "Macro average is changed",
    "Check for micro",
    "Check for weighted",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "Compute the geometric mean for each of the classes",
    "average tests",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Get the version",
    "sensitivity scorer",
    "specificity scorer",
    "geometric_mean scorer",
    "make a iba metric before a scorer",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME Deprecated in 0.2, to be removed in 0.4",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated from 0.2. To be removed in 0.4.",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "To be removed in 0.4",
    "Select the appropriate classifier",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME remove at the end of the deprecation 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "some can just not be sensibly default constructed",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "make the checks from scikit-learn",
    "trigger our checks if this is a SamplerMixin",
    "FIXME already present in scikit-learn 0.19",
    "test scikit-learn compatibility",
    "Estimators in mono_output_task_error raise ValueError if y is of 1-D",
    "Convert into a 2-D y for those estimators.",
    "check that fit method only changes or sets private attributes",
    "to not check deprecated classes",
    "check that fit doesn't add any public attribute",
    "check that fit doesn't change any public attribute",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in ratio are also in y",
    "check that there is no negative number",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "tests that the estimator actually fails on \"bad\" estimators.",
    "not a complete test of all checks, which are very extensive.",
    "check that we have a set_params and can clone",
    "check that we have a fit method",
    "check that fit does input validation",
    "check that predict does input validation (doesn't accept dicts in input)",
    "check that estimator state does not change",
    "at transform/predict/predict_proba time",
    "check that `fit` only changes attributes that",
    "are private (start with an _ or end with a _).",
    "check that `fit` doesn't add any public attribute",
    "check for sparse matrix input handling",
    "the check for sparse input handling prints to the stdout,",
    "instead of raising an error, so as not to remove the original traceback.",
    "that means we need to jump through some hoops to catch it.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "If an object was given, affect",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "To be removed in 0.4",
    "Define the classifier to use",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "FIXME: uncomment when #9723 is merged in scikit-learn",
    "def test_estimators_samples():",
    "# Check that format of estimators_samples_ is correct and that results",
    "# generated at fit time can be identically reproduced at a later time",
    "# using data saved in object attributes.",
    "X, y = make_hastie_10_2(n_samples=200, random_state=1)",
    "# remap the y outside of the BalancedBaggingclassifier",
    "# _, y = np.unique(y, return_inverse=True)",
    "bagging = BalancedBaggingClassifier(LogisticRegression(),",
    "max_samples=0.5,",
    "max_features=0.5, random_state=1,",
    "bootstrap=False)",
    "bagging.fit(X, y)",
    "# Get relevant attributes",
    "estimators_samples = bagging.estimators_samples_",
    "estimators_features = bagging.estimators_features_",
    "estimators = bagging.estimators_",
    "# Test for correct formatting",
    "assert len(estimators_samples) == len(estimators)",
    "assert len(estimators_samples[0]) == len(X)",
    "assert estimators_samples[0].dtype.kind == 'b'",
    "# Re-fit single estimator to test for consistent sampling",
    "estimator_index = 0",
    "estimator_samples = estimators_samples[estimator_index]",
    "estimator_features = estimators_features[estimator_index]",
    "estimator = estimators[estimator_index]",
    "X_train = (X[estimator_samples])[:, estimator_features]",
    "y_train = y[estimator_samples]",
    "orig_coefs = estimator.steps[-1][1].coef_",
    "estimator.fit(X_train, y_train)",
    "new_coefs = estimator.steps[-1][1].coef_",
    "assert_array_almost_equal(orig_coefs, new_coefs)",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a ratio",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME: deprecated in 0.2 to be removed in 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_ratio, however this is not cover in",
    "the common tests so we will repeat it here",
    "FIXME: to be removed in 0.4 due to deprecation",
    "resample without using min_c_",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT"
  ],
  "0.3.1": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If extensions (or modules to document with autodoc) are in another",
    "directory, add these directories to sys.path here. If the directory",
    "is relative to the documentation root, use os.path.abspath to make it",
    "absolute, like shown here.",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "to make references clickable",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Config for sphinx_issues",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Creation of an imbalanced data set from a balanced data set",
    "##############################################################################",
    "##############################################################################",
    "We will show how to use the parameter ``ratio`` when dealing with the",
    "``make_imbalance`` function. For this function, this parameter accepts both",
    "dictionary and callable. When using a dictionary, each key will correspond to",
    "the class of interest and the corresponding value will be the number of",
    "samples desired in this class.",
    "##############################################################################",
    "You might required more flexibility and require your own heuristic to",
    "determine the number of samples by class and you can define your own callable",
    "as follow. In this case we will define a function which will use a float",
    "multiplier to define the number of samples per class.",
    "##############################################################################",
    "Using ``ratio`` in resampling algorithm",
    "##############################################################################",
    "##############################################################################",
    "In all sampling algorithms, ``ratio`` can be used as illustrated earlier. In",
    "addition, some predefined functions are available and can be executed using a",
    "``str`` with the following choices: (i) ``'minority'``: resample the minority",
    "class; (ii) ``'majority'``: resample the majority class, (iii) ``'not",
    "minority'``: resample all classes apart of the minority class, (iv)",
    "``'all'``: resample all classes, and (v) ``'auto'``: correspond to 'all' with",
    "for over-sampling methods and 'not minority' for under-sampling methods. The",
    "classes targeted will be over-sampled or under-sampled to achieve an equal",
    "number of sample with the majority or minority class.",
    "##############################################################################",
    "However, you can use the dictionary or the callable options as previously",
    "mentioned.",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Remove axis for second plot",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Andreas Mueller",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "remove Tomek links",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss",
    "Two subplots, unpack the axes array immediately",
    "plot the missing samples",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "make nice plotting",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Use hard voting instead of soft voting",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``ratio='auto'`` only the sample from the majority class will be",
    "removed. If ``ratio='all'`` both samples will be removed.",
    "highlight the samples of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "plot samples which have been removed",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check the consistency of X and y",
    "self.sampling_type is already checked in check_ratio",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "we do not clone when caching is disabled to preserve",
    "backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "XXX: Calling sample in pipeline it means that the",
    "last estimator is a sampler. Samplers don't carry",
    "the sampled data. So, call 'fit_sample' in all intermediate",
    "steps to get the sampled data for the last estimator.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "No average: zeros in array",
    "Macro average is changed",
    "Check for micro",
    "Check for weighted",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "Compute the geometric mean for each of the classes",
    "average tests",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Get the version",
    "sensitivity scorer",
    "specificity scorer",
    "geometric_mean scorer",
    "make a iba metric before a scorer",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME Deprecated in 0.2, to be removed in 0.4",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated from 0.2. To be removed in 0.4.",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "To be removed in 0.4",
    "Select the appropriate classifier",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME remove at the end of the deprecation 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "some can just not be sensibly default constructed",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "make the checks from scikit-learn",
    "trigger our checks if this is a SamplerMixin",
    "FIXME already present in scikit-learn 0.19",
    "test scikit-learn compatibility",
    "Estimators in mono_output_task_error raise ValueError if y is of 1-D",
    "Convert into a 2-D y for those estimators.",
    "check that fit method only changes or sets private attributes",
    "to not check deprecated classes",
    "check that fit doesn't add any public attribute",
    "check that fit doesn't change any public attribute",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in ratio are also in y",
    "check that there is no negative number",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "tests that the estimator actually fails on \"bad\" estimators.",
    "not a complete test of all checks, which are very extensive.",
    "check that we have a set_params and can clone",
    "check that we have a fit method",
    "check that fit does input validation",
    "check that predict does input validation (doesn't accept dicts in input)",
    "check that estimator state does not change",
    "at transform/predict/predict_proba time",
    "check that `fit` only changes attributes that",
    "are private (start with an _ or end with a _).",
    "check that `fit` doesn't add any public attribute",
    "check for sparse matrix input handling",
    "the check for sparse input handling prints to the stdout,",
    "instead of raising an error, so as not to remove the original traceback.",
    "that means we need to jump through some hoops to catch it.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "If an object was given, affect",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "To be removed in 0.4",
    "Define the classifier to use",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a ratio",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME: deprecated in 0.2 to be removed in 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_ratio, however this is not cover in",
    "the common tests so we will repeat it here",
    "FIXME: to be removed in 0.4 due to deprecation",
    "resample without using min_c_",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT"
  ],
  "0.3.0": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If extensions (or modules to document with autodoc) are in another",
    "directory, add these directories to sys.path here. If the directory",
    "is relative to the documentation root, use os.path.abspath to make it",
    "absolute, like shown here.",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "to make references clickable",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "Custom style",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {'prev_next_buttons_location': None}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Config for sphinx_issues",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "The following is used by sphinx.ext.linkcode to provide links to github",
    "get the styles from the current theme",
    "create and add the button to all the code blocks that contain >>>",
    "tracebacks (.gt) contain bare text elements that need to be",
    "wrapped in a span to work with .nextUntil() (see later)",
    "define the behavior of the button when it's clicked",
    "hide the code output",
    "show the code output",
    "-*- coding: utf-8 -*-",
    "Format template for issues URI",
    "e.g. 'https://github.com/sloria/marshmallow/issues/{issue}",
    "Shortcut for Github, e.g. 'sloria/marshmallow'",
    "Format template for user profile URI",
    "e.g. 'https://github.com/{user}'",
    "Python 2 only",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Creation of an imbalanced data set from a balanced data set",
    "##############################################################################",
    "##############################################################################",
    "We will show how to use the parameter ``ratio`` when dealing with the",
    "``make_imbalance`` function. For this function, this parameter accepts both",
    "dictionary and callable. When using a dictionary, each key will correspond to",
    "the class of interest and the corresponding value will be the number of",
    "samples desired in this class.",
    "##############################################################################",
    "You might required more flexibility and require your own heuristic to",
    "determine the number of samples by class and you can define your own callable",
    "as follow. In this case we will define a function which will use a float",
    "multiplier to define the number of samples per class.",
    "##############################################################################",
    "Using ``ratio`` in resampling algorithm",
    "##############################################################################",
    "##############################################################################",
    "In all sampling algorithms, ``ratio`` can be used as illustrated earlier. In",
    "addition, some predefined functions are available and can be executed using a",
    "``str`` with the following choices: (i) ``'minority'``: resample the minority",
    "class; (ii) ``'majority'``: resample the majority class, (iii) ``'not",
    "minority'``: resample all classes apart of the minority class, (iv)",
    "``'all'``: resample all classes, and (v) ``'auto'``: correspond to 'all' with",
    "for over-sampling methods and 'not minority' for under-sampling methods. The",
    "classes targeted will be over-sampled or under-sampled to achieve an equal",
    "number of sample with the majority or minority class.",
    "##############################################################################",
    "However, you can use the dictionary or the callable options as previously",
    "mentioned.",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Remove axis for second plot",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "generate some data points",
    "plot the majority and minority samples",
    "draw the circle in which the new sample will generated",
    "plot the line on which the sample will be generated",
    "create and plot the new sample",
    "make the plot nicer with legend and label",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characterisitic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Illustration of the influence of the balancing ratio",
    "##############################################################################",
    "##############################################################################",
    "We will first illustrate the influence of the balancing ratio on some toy",
    "data using a linear SVM classifier. Greater is the difference between the",
    "number of samples in each class, poorer are the classfication results.",
    "##############################################################################",
    "Random over-sampling to balance the data set",
    "##############################################################################",
    "##############################################################################",
    "Random over-sampling can be used to repeat some samples and balance the",
    "number of samples between the dataset. It can be seen that with this trivial",
    "approach the boundary decision is already less biaised toward the majority",
    "class.",
    "##############################################################################",
    "More advanced over-sampling using ADASYN and SMOTE",
    "##############################################################################",
    "##############################################################################",
    "Instead of repeating the same samples when over-sampling, we can use some",
    "specific heuristic instead. ADASYN and SMOTE can be used in this case.",
    "Make an identity sampler",
    "##############################################################################",
    "The following plot illustrate the difference between ADASYN and SMOTE. ADASYN",
    "will focus on the samples which are difficult to classify with a",
    "nearest-neighbors rule while regular SMOTE will not make any distinction.",
    "Therefore, the decision function depending of the algorithm.",
    "##############################################################################",
    "Due to those sampling particularities, it can give rise to some specific",
    "issues as illustrated below.",
    "##############################################################################",
    "SMOTE proposes several variants by identifying specific samples to consider",
    "during the resampling. The borderline version will detect which point to",
    "select which are in the border between two classes. The SVM version will use",
    "the support vectors found using an SVM algorithm to create new samples.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "``SMOTE`` allows to generate samples. However, this method of over-sampling",
    "does not have any knowledge regarding the underlying distribution. Therefore,",
    "some noisy samples can be generated, e.g. when the different classes cannot",
    "be well separated. Hence, it can be beneficial to apply an under-sampling",
    "algorithm to clean the noisy samples. Two methods are usually used in the",
    "literature: (i) Tomek's link and (ii) edited nearest neighbours cleaning",
    "methods. Imbalanced-learn provides two ready-to-use samplers ``SMOTETomek``",
    "and ``SMOTEENN``. In general, ``SMOTEENN`` cleans more noisy data than",
    "``SMOTETomek``.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "Authors: Andreas Mueller",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "remove Tomek links",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss",
    "Two subplots, unpack the axes array immediately",
    "plot the missing samples",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "make nice plotting",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "The following function will be used to create toy dataset. It using the",
    "``make_classification`` from scikit-learn but fixing some parameters.",
    "##############################################################################",
    "The following function will be used to plot the sample space after resampling",
    "to illustrate the characteristic of an algorithm.",
    "make nice plotting",
    "##############################################################################",
    "The following function will be used to plot the decision function of a",
    "classifier given some data.",
    "##############################################################################",
    "Prototype generation: under-sampling by generating new samples",
    "##############################################################################",
    "##############################################################################",
    "``ClusterCentroids`` under-samples by replacing the original samples by the",
    "centroids of the cluster found.",
    "##############################################################################",
    "Prototype selection: under-sampling by selecting existing samples",
    "##############################################################################",
    "##############################################################################",
    "The algorithm performing prototype selection can be subdivided into two",
    "groups: (i) the controlled under-sampling methods and (ii) the cleaning",
    "under-sampling methods.",
    "##############################################################################",
    "With the controlled under-sampling methods, the number of samples to be",
    "selected can be specified. ``RandomUnderSampler`` is the most naive way of",
    "performing such selection by randomly selecting a given number of samples by",
    "the targetted class.",
    "##############################################################################",
    "``NearMiss`` algorithms implement some heuristic rules in order to select",
    "samples. NearMiss-1 selects samples from the majority class for which the",
    "average distance of the :math:`k`` nearest samples of the minority class is",
    "the smallest. NearMiss-2 selects the samples from the majority class for",
    "which the average distance to the farthest samples of the negative class is",
    "the smallest. NearMiss-3 is a 2-step algorithm: first, for each minority",
    "sample, their ::math:`m` nearest-neighbors will be kept; then, the majority",
    "samples selected are the on for which the average distance to the :math:`k`",
    "nearest neighbors is the largest.",
    "##############################################################################",
    "``EditedNearestNeighbours`` removes samples of the majority class for which",
    "their class differ from the one of their nearest-neighbors. This sieve can be",
    "repeated which is the principle of the",
    "``RepeatedEditedNearestNeighbours``. ``AllKNN`` is slightly different from",
    "the ``RepeatedEditedNearestNeighbours`` by changing the :math:`k` parameter",
    "of the internal nearest neighors algorithm, increasing it at each iteration.",
    "##############################################################################",
    "``CondensedNearestNeighbour`` makes use of a 1-NN to iteratively decide if a",
    "sample should be kept in a dataset or not. The issue is that",
    "``CondensedNearestNeighbour`` is sensitive to noise by preserving the noisy",
    "samples. ``OneSidedSelection`` also used the 1-NN and use ``TomekLinks`` to",
    "remove the samples considered noisy. The ``NeighbourhoodCleaningRule`` use a",
    "``EditedNearestNeighbours`` to remove some sample. Additionally, they use a 3",
    "nearest-neighbors to remove samples which do not agree with this rule.",
    "##############################################################################",
    "``InstanceHardnessThreshold`` uses the prediction of classifier to exclude",
    "samples. All samples which are classified with a low probability will be",
    "removed.",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "make nice plotting",
    "Authors: Fernando Nogueira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Use hard voting instead of soft voting",
    "Two subplots, unpack the axes array immediately",
    "make nice plotting",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "Generate some data with one Tomek link",
    "minority class",
    "majority class",
    "##############################################################################",
    "In the figure above, the samples highlighted in green form a Tomek link since",
    "they are of different classes and are nearest neighbours of each other.",
    "highlight the samples of interest",
    "##############################################################################",
    "We can run the ``TomekLinks`` sampling to remove the corresponding",
    "samples. If ``ratio='auto'`` only the sample from the majority class will be",
    "removed. If ``ratio='all'`` both samples will be removed.",
    "highlight the samples of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "make nice plotting",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "plot samples which have been removed",
    "##############################################################################",
    "This function allows to make nice plotting",
    "##############################################################################",
    "We can start by generating some data to later illustrate the principle of",
    "each NearMiss heuritic rules.",
    "minority class",
    "majority class",
    "##############################################################################",
    "NearMiss-1",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-1 selects samples from the majority class for which the average",
    "distance to some nearest neighbours is the smallest. In the following",
    "example, we use a 3-NN to compute the average distance on 2 specific samples",
    "of the majority class. Therefore, in this case the point linked by the",
    "green-dashed line will be selected since the average distance is smaller.",
    "##############################################################################",
    "NearMiss-2",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-2 selects samples from the majority class for which the average",
    "distance to the farthest neighbors is the smallest. With the same",
    "configuration as previously presented, the sample linked to the green-dashed",
    "line will be selected since its distance the 3 farthest neighbors is the",
    "smallest.",
    "##############################################################################",
    "NearMiss-3",
    "##############################################################################",
    "##############################################################################",
    "NearMiss-3 can be divided into 2 steps. First, a nearest-neighbors is used to",
    "short-list samples from the majority class (i.e. correspond to the",
    "highlighted samples in the following plot). Then, the sample with the largest",
    "average distance to the *k* nearest-neighbors are selected.",
    "select only the majority point of interest",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create the classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Authors: Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Load the dataset",
    "make nice plotting",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Create a folder to fetch the dataset",
    "Create a pipeline",
    "Classify and report the results",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "##############################################################################",
    "Setting the data set",
    "##############################################################################",
    "##############################################################################",
    "We use a part of the 20 newsgroups data set by loading 4 topics. Using the",
    "scikit-learn loader, the data are split into a training and a testing set.",
    "",
    "Note the class \\#3 is the minority class and has almost twice less samples",
    "than the majority class.",
    "##############################################################################",
    "The usual scikit-learn pipeline",
    "##############################################################################",
    "##############################################################################",
    "You might usually use scikit-learn pipeline by combining the TF-IDF",
    "vectorizer to feed a multinomial naive bayes classifier. A classification",
    "report summarized the results on the testing set.",
    "",
    "As expected, the recall of the class \\#3 is low mainly due to the class",
    "imbalanced.",
    "##############################################################################",
    "Balancing the class before classification",
    "##############################################################################",
    "##############################################################################",
    "To improve the prediction of the class \\#3, it could be interesting to apply",
    "a balancing before to train the naive bayes classifier. Therefore, we will",
    "use a ``RandomUnderSampler`` to equalize the number of samples in all the",
    "classes before the training.",
    "",
    "It is also important to note that we are using the ``make_pipeline`` function",
    "implemented in imbalanced-learn to properly handle the samplers.",
    "##############################################################################",
    "Although the results are almost identical, it can be seen that the resampling",
    "allowed to correct the poor recall of the class \\#3 at the cost of reducing",
    "the other metrics for the other classes. However, the overall results are",
    "slightly better.",
    "Authors: Dayvid Oliveira",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check the consistency of X and y",
    "self.sampling_type is already checked in check_ratio",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "Christos Aridas",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "validate names",
    "validate estimators",
    "We allow last estimator to be None as an identity transformation",
    "Estimator interface",
    "Setup the memory",
    "we do not clone when caching is disabled to preserve",
    "backward compatibility",
    "Fit or load from cache the current transfomer",
    "Replace the transformer of the step with the fitted",
    "transformer. This is necessary when loading the transformer",
    "from the cache.",
    "XXX: Calling sample in pipeline it means that the",
    "last estimator is a sampler. Samplers don't carry",
    "the sampled data. So, call 'fit_sample' in all intermediate",
    "steps to get the sampled data for the last estimator.",
    "_final_estimator is None or has transform, otherwise attribute error",
    "raise AttributeError if necessary for hasattr behaviour",
    "if we have a weight for this transformer, multiply output",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "coding: utf-8",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dariusz Brzezinski",
    "License: MIT",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Retain only selected labels",
    "old version of scipy return MaskedConstant instead of 0.0",
    "Create the list of tags",
    "check that the scoring function does not need a score",
    "and only a prediction",
    "Compute the score from the scoring function",
    "Square if desired",
    "Get the signature of the sens/spec function",
    "We need to extract from kwargs only the one needed by the",
    "specificity and specificity",
    "Make the intersection between the parameters",
    "Create a sub dictionary",
    "Check if the metric is the geometric mean",
    "We do not support multilabel so the only average supported",
    "is binary",
    "Create the list of parameters through signature binding",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "No average: zeros in array",
    "Macro average is changed",
    "Check for micro",
    "Check for weighted",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary",
    "compute the geometric mean for the binary problem",
    "Compute the geometric mean for each of the classes",
    "average tests",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Get the version",
    "sensitivity scorer",
    "specificity scorer",
    "geometric_mean scorer",
    "make a iba metric before a scorer",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "The ratio is computed using a one-vs-rest manner. Using majority",
    "in multi-class would lead to slightly different results at the",
    "cost of introducing a new parameter.",
    "the nearest neighbors need to be fitted only on the current class",
    "to find the class NN to generate new samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "FIXME Deprecated in 0.2, to be removed in 0.4",
    "divergence between borderline-1 and borderline-2",
    "Create synthetic samples for borderline points.",
    "only minority",
    "we use a one-vs-rest policy to handle the multiclass in which",
    "new samples will be created considering not only the majority",
    "class but all over classes.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "select a sample from the current class",
    "create the set composed of all minority samples and one",
    "sample from the current class.",
    "create the set S with removing the seed from S",
    "since that it will be added anyway",
    "apply Tomek cleaning",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "FIXME: Deprecated in 0.2. To be removed in 0.4.",
    "idx_tmp is relative to the feature selected in the",
    "previous step and we need to find the indirection",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Fernando Nogueira",
    "Christos Aridas",
    "License: MIT",
    "find which class to not consider",
    "there is a Tomek link between two samples if they are both nearest",
    "neighbors of each others.",
    "Find the nearest neighbour of every point",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "fit knn on C",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "fit a knn on C",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated from 0.2. To be removed in 0.4.",
    "clean the neighborhood",
    "compute which classes to consider for cleaning for the A2 group",
    "compute a2 group",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "FIXME: Deprecated in 0.2. To be removed in 0.4",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Case 3",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "overwrite b_min_bec_maj",
    "Case 2",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Dayvid Oliveira",
    "Christos Aridas",
    "License: MIT",
    "To be removed in 0.4",
    "Select the appropriate classifier",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "FIXME remove at the end of the deprecation 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "test that all_estimators doesn't find abstract classes.",
    "some can just not be sensibly default constructed",
    "input validation etc for non-meta estimators",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "store timestamp to figure out whether the result of 'fit' has been",
    "cached or not",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't instantiate with non-transformers on the way",
    "Note that NoTrans implements fit, but not transform",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "invalid parameters should raise an error message",
    "Pipeline should pass sample_weight",
    "When sample_weight is None it shouldn't be passed",
    "Test pipeline raises set params error message for nested models.",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "As pipeline doesn't clone estimators on construction,",
    "it must have its own estimators",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "tests that Pipeline passes fit_params to intermediate steps",
    "when fit_predict is invoked",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Directly setting attr",
    "Using set_params",
    "Using set_params to replace single step",
    "With invalid data",
    "Test setting Pipeline steps to None",
    "for other methods, ensure no AttributeErrors on None:",
    "mult2 and mult3 are active",
    "Check None step at construction time",
    "Test that an error is raised when memory is not a string or a Memory",
    "instance",
    "Define memory as an integer",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test with Transformer + SVC",
    "Memoize the transformer at the first fit",
    "Get the time stamp of the tranformer in the cached pipeline",
    "Check that cached_pipe and pipe yield identical results",
    "Check that we are reading the cache while fitting",
    "a second time",
    "Check that cached_pipe and pipe yield identical results",
    "Create a new pipeline with cloned estimators",
    "Check that even changing the name step does not affect the cache hit",
    "Check that cached_pipe and pipe yield identical results",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "We round the value near to zero. It seems that PCA has some issue",
    "with that",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test pipeline using None as preprocessing step and a classifier",
    "Test pipeline using None, RUS and a classifier",
    "Test pipeline using RUS, None and a classifier",
    "Test pipeline using None step and a sampler",
    "Test pipeline using None and a transformer that implements transform and",
    "inverse_transform",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Adapated from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "make the checks from scikit-learn",
    "trigger our checks if this is a SamplerMixin",
    "FIXME already present in scikit-learn 0.19",
    "test scikit-learn compatibility",
    "Estimators in mono_output_task_error raise ValueError if y is of 1-D",
    "Convert into a 2-D y for those estimators.",
    "check that fit method only changes or sets private attributes",
    "to not check deprecated classes",
    "check that fit doesn't add any public attribute",
    "check that fit doesn't change any public attribute",
    "in this test we will force all samplers to not change the class 1",
    "check that sparse matrices can be passed through the sampler leading to",
    "the same results than dense",
    "set KMeans to full since it support sparse and dense",
    "Check that the samplers handle pandas dataframe and pandas series",
    "Adapted from scikit-learn",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "meta-estimators need another estimator to be instantiated.",
    "estimators that there is no way to default-construct sensibly",
    "some strange ones",
    "get parent folder",
    "get rid of abstract base classes",
    "get rid of sklearn estimators which have been imported in some classes",
    "possibly get rid of meta estimators",
    "drop duplicates, sort for reproducibility",
    "itemgetter is used to ensure the sort does not extend to the 2nd item of",
    "the tuple",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "FIXME: perfectly we should raise an error but the sklearn API does",
    "not allow for it",
    "check that all keys in ratio are also in y",
    "check that there is no negative number",
    "clean-sampling can be more permissive since those samplers do not",
    "use samples",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "this function could create an equal number of samples",
    "tests that the estimator actually fails on \"bad\" estimators.",
    "not a complete test of all checks, which are very extensive.",
    "check that we have a set_params and can clone",
    "check that we have a fit method",
    "check that fit does input validation",
    "check that predict does input validation (doesn't accept dicts in input)",
    "check that estimator state does not change",
    "at transform/predict/predict_proba time",
    "check that `fit` only changes attributes that",
    "are private (start with an _ or end with a _).",
    "check that `fit` doesn't add any public attribute",
    "check for sparse matrix input handling",
    "the check for sparse input handling prints to the stdout,",
    "instead of raising an error, so as not to remove the original traceback.",
    "that means we need to jump through some hoops to catch it.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "check if the filtering is working with a list or a single string",
    "check that all estimators are sampler",
    "check that an error is raised when the type is unknown",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "If an object was given, affect",
    "Otherwise create a default TomekLinks",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "RandomUnderSampler is not supporting sample_weight. We need to pass",
    "None.",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "doctest: +ELLIPSIS",
    "To be removed in 0.4",
    "Define the classifier to use",
    "array to know which samples are available to be taken",
    "where the different set will be stored",
    "store the index of the data to under-sample",
    "value which will be picked at each round",
    "extract the data of interest for this round from the",
    "current class",
    "select randomly the desired features",
    "store the set created",
    "fit and predict using cross validation",
    "extract the prediction about the targeted classes only",
    "check the stopping criterion",
    "check that there is enough samples for another round",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Check classification for various parameter settings.",
    "Test that bootstrapping samples generate non-perfect base estimators.",
    "without bootstrap, all trees are perfect on the training set",
    "disable the resampling by passing an empty dictionary.",
    "with bootstrap, trees are no longer perfect on the training set",
    "Test that bootstrapping features may generate duplicate features.",
    "Predict probabilities.",
    "Normal case",
    "Degenerate case, where some classes are missing",
    "Check that oob prediction is a good estimation of the generalization",
    "error.",
    "Test with few estimators",
    "Check singleton ensembles.",
    "Test that it gives proper exception on deficient input.",
    "Test n_estimators",
    "Test max_samples",
    "Test max_features",
    "Test support of decision_function",
    "Check that bagging ensembles can be grid-searched.",
    "Transform iris into a binary classification task",
    "Grid search with scoring based on decision_function",
    "Check base_estimator and its default values.",
    "Test if fitting incrementally with warm start gives a forest of the",
    "right size and the same results as a normal fit.",
    "Test if warm start'ed second fit with smaller n_estimators raises error.",
    "Test that nothing happens when fitting without increasing n_estimators",
    "modify X to nonsense values, this should not change anything",
    "warm started classifier with 5+5 estimators should be equivalent to",
    "one classifier with 10 estimators",
    "Check using oob_score and warm_start simultaneously fails",
    "Make sure OOB scores are identical when random_state, estimator, and",
    "training data are fixed and fitting is done twice",
    "Check that format of estimators_samples_ is correct and that results",
    "generated at fit time can be identically reproduced at a later time",
    "using data saved in object attributes.",
    "remap the y outside of the BalancedBaggingclassifier",
    "_, y = np.unique(y, return_inverse=True)",
    "Get relevant attributes",
    "Test for correct formatting",
    "Re-fit single estimator to test for consistent sampling",
    "Make sure validated max_samples and original max_samples are identical",
    "when valid integer max_samples supplied by user",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "Generate a global dataset to use",
    "Define a ratio",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Author: Guillaume Lemaitre",
    "License: BSD 3 clause",
    "The index start at one, then we need to remove one",
    "to not have issue with the indexing.",
    "go through the list and check if the data are available",
    "Authors: Dayvid Oliveira",
    "Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "restrict ratio to be a dict or a callable",
    "FIXME: deprecated in 0.2 to be removed in 0.4",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT",
    "we are reusing part of utils.check_ratio, however this is not cover in",
    "the common tests so we will repeat it here",
    "FIXME: to be removed in 0.4 due to deprecation",
    "resample without using min_c_",
    "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
    "Christos Aridas",
    "License: MIT"
  ],
  "0.2.1": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Load the dataset",
    "Create a folder to fetch the dataset",
    "Make the dataset imbalanced",
    "Select only half of the first class",
    "Create a pipeline",
    "Classify and report the results",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Announce deprecation if necessary",
    "Check that the target type is binary",
    "Check that the target type is either binary or multiclass",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "XXX: Calling sample in pipeline it means that the",
    "last estimator is a sampler. Samplers don't carry",
    "the sampled data. So, call 'fit_sample' in all intermediate",
    "steps to get the sampled data for the last estimator.",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "coding: utf-8",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "Compute the score from the scoring function",
    "Square if desired",
    "Create the list of tags",
    "Get the signature of the sens/spec function",
    "Filter the inputs required by the sens/spec function",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "No average: zeros in array",
    "Macro average is changed",
    "Check for micro",
    "Check for weighted",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary\"\"\"",
    "compute the geometric mean for the binary problem",
    "Compute the geometric mean for each of the classes",
    "average tests",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Get the version",
    "sensitivity scorer",
    "specificity scorer",
    "geometric_mean scorer",
    "make a iba metric before a scorer",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Create the object",
    "Create the object",
    "Create the object",
    "Create the object",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "Announce deprecation if needed",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "The indexes found are relative to the current class, we need to",
    "find the absolute value",
    "Build the array with the absolute position",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Set the number of sample for the estimator",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 3",
    "If this is a normal convergence, get the last data",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "updating ENN size_ngh",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 2",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "To be removed in 0.4",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "assert_raises(TypeError, lambda x: [][0])",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Create a SMOTE and Tomek object",
    "Create a SMOTE and Tomek object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Create a SMOTE and Tomek object",
    "Create a SMOTE and Tomek object",
    "Check the random state",
    "To be removed in 0.4",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Get the indices of interest",
    "Draw samples, using sample weights, and then fit",
    "Draw samples, using a mask, and then fit",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Specific case with n_max_subset = 1",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a zero ratio",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as a list which is not supported",
    "Make y to be multiclass",
    "Resample the data"
  ],
  "0.2.0": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "Show the classification report",
    "Generate a dataset",
    "Split the data",
    "Train the classifier with balancing",
    "Test the classifier and get the prediction",
    "##############################################################################",
    "The geometric mean corresponds to the square root of the product of the",
    "sensitivity and specificity. Combining the two metrics should account for",
    "the balancing of the dataset.",
    "##############################################################################",
    "The index balanced accuracy can transform any metric to be used in",
    "imbalanced learning problems.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Load the dataset",
    "Create a folder to fetch the dataset",
    "Make the dataset imbalanced",
    "Select only half of the first class",
    "Create a pipeline",
    "Classify and report the results",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Announce deprecation if necessary",
    "Check that the target type is binary",
    "Check that the target type is either binary or multiclass",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "XXX: Calling sample in pipeline it means that the",
    "last estimator is a sampler. Samplers don't carry",
    "the sampled data. So, call 'fit_sample' in all intermediate",
    "steps to get the sampled data for the last estimator.",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "coding: utf-8",
    "Only negative labels",
    "Calculate tp_sum, pred_sum, true_sum ###",
    "labels are now from 0 to len(labels) - 1 -> use bincount",
    "Pathological case",
    "Compute the true negative",
    "Retain only selected labels",
    "Finally, we have all our sufficient statistics. Divide! #",
    "Divide, and on zero-division, set scores to 0 and warn:",
    "Oddly, we may get an \"invalid\" rather than a \"divide\" error",
    "here.",
    "Average the results",
    "Compute the score from the scoring function",
    "Square if desired",
    "Create the list of tags",
    "Get the signature of the sens/spec function",
    "Filter the inputs required by the sens/spec function",
    "Call the sens/spec function",
    "Compute the dominance",
    "Compute the different metrics",
    "Precision/recall/f1",
    "Specificity",
    "Geometric mean",
    "Index balanced accuracy",
    "compute averages",
    "##############################################################################",
    "Utilities for testing",
    "import some data to play with",
    "restrict to a binary classification task",
    "add noisy features to make the problem harder and avoid perfect results",
    "run classifier, get class probabilities and label predictions",
    "only interested in probabilities of the positive case",
    "XXX: do we really want a special API for the binary case?",
    "##############################################################################",
    "Tests",
    "detailed measures for each class",
    "individual scoring function that can be used for grid search: in the",
    "binary class case the score is the value of the measure for the positive",
    "class (e.g. label == 1). This is deprecated for average != 'binary'.",
    "Such a case may occur with non-stratified cross-validation",
    "No average: zeros in array",
    "Macro average is changed",
    "Check for micro",
    "Check for weighted",
    "ensure the above were meaningful tests:",
    "Bad pos_label",
    "Bad average option",
    "but average != 'binary'; even if data is binary\"\"\"",
    "compute the geometric mean for the binary problem",
    "Compute the geometric mean for each of the classes",
    "average tests",
    "print classification report with class names",
    "print classification report with label detection",
    "print classification report with class names",
    "print classification report with label detection",
    "Get the version",
    "sensitivity scorer",
    "specificity scorer",
    "geometric_mean scorer",
    "make a iba metric before a scorer",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Create the object",
    "Create the object",
    "Create the object",
    "Create the object",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "Announce deprecation if needed",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "The indexes found are relative to the current class, we need to",
    "find the absolute value",
    "Build the array with the absolute position",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Set the number of sample for the estimator",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 3",
    "If this is a normal convergence, get the last data",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "updating ENN size_ngh",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 2",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "To be removed in 0.4",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Resample the data",
    "Resample the data",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Test the various methods of the pipeline (anova).",
    "assert_raises(TypeError, lambda x: [][0])",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Check any parameters for SMOTE was provided",
    "Anounce deprecation",
    "We need to list each parameter and decide if we affect a default",
    "value or not",
    "If an object was given, affect",
    "Otherwise create a default SMOTE",
    "Check any parameters for ENN was provided",
    "Anounce deprecation",
    "If an object was given, affect",
    "Otherwise create a default EditedNearestNeighbours",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Create a SMOTE and Tomek object",
    "Create a SMOTE and Tomek object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Create a SMOTE and Tomek object",
    "Create a SMOTE and Tomek object",
    "Check the random state",
    "To be removed in 0.4",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Get the indices of interest",
    "Draw samples, using sample weights, and then fit",
    "Draw samples, using a mask, and then fit",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Specific case with n_max_subset = 1",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a zero ratio",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as a list which is not supported",
    "Make y to be multiclass",
    "Resample the data"
  ],
  "0.1.9": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "The indexes found are relative to the current class, we need to",
    "find the absolute value",
    "Build the array with the absolute position",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 3",
    "If this is a normal convergence, get the last data",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Check the random state",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Specific case with n_max_subset = 1",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.1.8": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "The indexes found are relative to the current class, we need to",
    "find the absolute value",
    "Build the array with the absolute position",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 3",
    "If this is a normal convergence, get the last data",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Check the random state",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Specific case with n_max_subset = 1",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.2.0.dev0": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Apply the AllKNN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Check that the target type is binary",
    "Check that the target type is either binary or multiclass",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "The indexes found are relative to the current class, we need to",
    "find the absolute value",
    "Build the array with the absolute position",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 3",
    "If this is a normal convergence, get the last data",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "updating ENN size_ngh",
    "Check the stopping criterion",
    "1. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "2. If one of the class is disappearing",
    "Case 1",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 2",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Data generated for the toy example",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Make y to be multiclass",
    "Resample the data",
    "Check the size of y",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Check the random state",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Specific case with n_max_subset = 1",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "continuous case",
    "multiclass case",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object",
    "continuous case",
    "Generate a global dataset to use",
    "Define a zero ratio",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as a list which is not supported",
    "Make y to be multiclass",
    "Resample the data"
  ],
  "0.1.7": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Throw a warning to tell the user that we did not have enough samples",
    "to select and that we just select everything",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "The indexes found are relative to the current class, we need to",
    "find the absolute value",
    "Build the array with the absolute position",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check the stopping criterion",
    "1. If there is no changes for the vector y",
    "2. If the number of samples in the other class become inferior to",
    "the number of samples in the majority class",
    "3. If one of the class is disappearing",
    "Case 1",
    "Case 2",
    "Get the number of samples in the non-minority classes",
    "Check the minority stop to be the minority",
    "Case 3",
    "If this is a normal convergence, get the last data",
    "Log the variables to explain the stop of the algorithm",
    "Update the data for the next iteration",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Check the random state",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Specific case with n_max_subset = 1",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.1.6": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Check the random state",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.1.5": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Check the random state",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.1.4": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Check the random state",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.1.3": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Check that we found at least some neighbours belonging to the",
    "majority class",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Create the object for random under-sampling",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.1.2": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Create the object for random under-sampling",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ],
  "0.1.1": [
    "! /usr/bin/env python",
    "load all vars into globals, otherwise",
    "the later function call using global vars doesn't work.",
    "Allow command-lines such as \"python setup.py build install\"",
    "Make sources available using relative paths from this file's directory.",
    "-*- coding: utf-8 -*-",
    "",
    "imbalanced-learn documentation build configuration file, created by",
    "sphinx-quickstart on Mon Jan 18 14:44:12 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ---------------------------------------------------",
    "Try to override the matplotlib configuration as early as possible",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "path to your examples scripts",
    "path where to save gallery generated examples",
    "Add any paths that contain templates here, relative to this directory.",
    "generate autosummary even if no references",
    "The suffix of source filenames.",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "Generate the plots for the gallery",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "language = None",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (within the static path) to use as favicon of the",
    "docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "generate empty examples files, so that we don't get",
    "inclusion errors if there are no examples for a class / module",
    "touch file",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE SVM",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply regular SMOTE",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Borderline SMOTE 1",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random over-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + ENN",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply SMOTE + Tomek links",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Balance Cascade method",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Easy Ensemble",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Three subplots, unpack the axes array immediately",
    "Apply the ENN",
    "Apply the RENN",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 3",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Edited Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Tomek Links cleaning",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply One-Sided Selection",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 2",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply neighbourhood cleaning rule",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Condensed Nearest Neighbours",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Cluster Centroids",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply the random under-sampling",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Two subplots, unpack the axes array immediately",
    "Define some color for the plotting",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Fit and transform x to visualise inside a 2D feature space",
    "Apply Nearmiss 1",
    "Two subplots, unpack the axes array immediately",
    "Generate the dataset",
    "Instanciate a PCA object for the sake of easy visualisation",
    "Create the samplers",
    "Create teh classifier",
    "Make the splits",
    "Add one transformers and two samplers in the pipeline object",
    "Based on NiLearn package",
    "License: simplified BSD",
    "PEP0440 compatible formatted version, see:",
    "https://www.python.org/dev/peps/pep-0440/",
    "",
    "Generic release markers:",
    "X.Y",
    "X.Y.Z # For bugfix releases",
    "",
    "Admissible pre-release markers:",
    "X.YaN # Alpha release",
    "X.YbN # Beta release",
    "X.YrcN # Release Candidate",
    "X.Y # Final release",
    "",
    "Dev branch marker is: 'X.Y.dev' or 'X.Y.devN' where N is an integer.",
    "'X.Y.dev0' is the canonical version of 'X.Y.dev'",
    "",
    "This is a tuple to preserve order, so that dependencies are checked",
    "in some meaningful order (more => less 'core').  We avoid using",
    "collections.OrderedDict to preserve Python 2.6 compatibility.",
    "Avoid choking on modules with no __version__ attribute",
    "Skip check only when installing and it's a module that",
    "will be auto-installed.",
    "Check the consistency of X and y",
    "Get all the unique elements in the target array",
    "# Raise an error if there is only one class",
    "if uniques.size == 1:",
    "raise RuntimeError(\"Only one class detected, aborting...\")",
    "Raise a warning for the moment to be compatible with BaseEstimator",
    "Store the size of X to check at sampling time if we have the",
    "same data",
    "Create a dictionary containing the class statistics",
    "Find the minority and majority classes",
    "Check if the ratio provided at initialisation make sense",
    "Check the consistency of X and y",
    "Check that the data have been fitted",
    "Check if the size of the data is identical than at fitting",
    "The ratio correspond to the number of samples in the minority class",
    "over the number of samples in the majority class. Thus, the ratio",
    "cannot be greater than 1.0",
    "Adapted from scikit-learn",
    "Author: Edouard Duchesnay",
    "Gael Varoquaux",
    "Virgile Fritsch",
    "Alexandre Gramfort",
    "Lars Buitinck",
    "chkoar",
    "License: BSD",
    "BaseEstimator interface",
    "shallow copy of steps",
    "Estimator interface",
    "Boolean controlling whether the joblib caches should be",
    "flushed if the version of certain modules changes (eg nibabel, as it",
    "does not respect the backward compatibility in some of its internal",
    "structures",
    "This  is used in nilearn._utils.cache_mixin",
    "list all submodules available in imblearn and version",
    "Keep the samples from the majority class",
    "Loop over the other classes over picking at random",
    "If this is the majority class, skip it",
    "Define the number of sample to create",
    "Pick some elements at random",
    "Concatenate to the majority class",
    "Keep the samples from the majority class",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "Print if verbose is true",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Get the distance to the NN",
    "Compute the ratio of majority samples next to minority samples",
    "Normalize the ratio",
    "Compute the number of sample to be generated",
    "For each minority samples",
    "Pick-up the neighbors wanted",
    "Create a new sample",
    "Find the NN for each samples",
    "Exclude the sample itself",
    "Count how many NN belong to the minority class",
    "Find the class corresponding to the label in x",
    "Compute the number of majority samples in the NN",
    "Samples are in danger for m/2 <= m' < m",
    "Samples are noise for m = m'",
    "Check the consistency of X",
    "Check the random state",
    "A matrix to store the synthetic samples",
    "# Set seeds",
    "seeds = random_state.randint(low=0,",
    "high=100 * len(nn_num.flatten()),",
    "size=n_samples)",
    "Randomly pick samples to construct neighbours from",
    "Loop over the NN matrix and create new samples",
    "NN lines relate to original sample, columns to its",
    "nearest neighbours",
    "Take a step of random size (0,1) in the direction of the",
    "n nearest neighbours",
    "if self.random_state is None:",
    "np.random.seed(seeds[i])",
    "else:",
    "np.random.seed(self.random_state)",
    "Construct synthetic sample",
    "The returned target vector is simply a repetition of the",
    "minority label",
    "Define the number of sample to create",
    "We handle only two classes problem for the moment.",
    "Start by separating minority class features and target values.",
    "If regular SMOTE is to be performed",
    "Look for k-th nearest neighbours, excluding, of course, the",
    "point itself.",
    "Matrix with k-th nearest neighbours indexes for each minority",
    "element.",
    "--- Generating synthetic samples",
    "Use static method make_samples to generate minority samples",
    "Concatenate the newly generated samples to the original data set",
    "Find the NNs for all samples in the data set.",
    "Boolean array with True for minority samples in danger",
    "If all minority samples are safe, return the original data set.",
    "All are safe, nothing to be done here.",
    "If we got here is because some samples are in danger, we need to",
    "find the NNs among the minority class to create the new synthetic",
    "samples.",
    "",
    "We start by changing the number of NNs to consider from m + 1",
    "to k + 1",
    "nns...#",
    "B1 and B2 types diverge here!!!",
    "Create synthetic samples for borderline points.",
    "Concatenate the newly generated samples to the original",
    "dataset",
    "Reset the k-neighbours to m+1 neighbours",
    "Split the number of synthetic samples between only minority",
    "(type 1), or minority and majority (with reduced step size)",
    "(type 2).",
    "The fraction is sampled from a beta distribution centered",
    "around 0.5 with variance ~0.01",
    "Only minority",
    "Only majority with smaller step size",
    "Concatenate the newly generated samples to the original",
    "data set",
    "Reset the k-neighbours to m+1 neighbours",
    "The SVM smote model fits a support vector machine",
    "classifier to the data and uses the support vector to",
    "provide a notion of boundary. Unlike regular smote, where",
    "such notion relies on proportion of nearest neighbours",
    "belonging to each class.",
    "Fit SVM to the full data#",
    "Find the support vectors and their corresponding indexes",
    "First, find the nn of all the samples to identify samples",
    "in danger and noisy ones",
    "As usual, fit a nearest neighbour model to the data",
    "Now, get rid of noisy support vectors",
    "Remove noisy support vectors",
    "Proceed to find support vectors NNs among the minority class",
    "Split the number of synthetic samples between interpolation and",
    "extrapolation",
    "The fraction are sampled from a beta distribution with mean",
    "0.5 and variance 0.01#",
    "Interpolate samples in danger",
    "Extrapolate safe samples",
    "Concatenate the newly generated samples to the original data set",
    "not any support vectors in danger",
    "All the support vector in danger",
    "Reset the k-neighbours to m+1 neighbours",
    "--- NN object",
    "Import the NN object from scikit-learn library. Since in the smote",
    "variations we must first find samples that are in danger, we",
    "initialize the NN object differently depending on the method chosen",
    "Regular smote does not look for samples in danger, instead it",
    "creates synthetic samples directly from the k-th nearest",
    "neighbours with not filtering",
    "Borderline1, 2 and SVM variations of smote must first look for",
    "samples that could be considered noise and samples that live",
    "near the boundary between the classes. Therefore, before",
    "creating synthetic samples from the k-th nns, it first look",
    "for m nearest neighbors to decide whether or not a sample is",
    "noise or near the boundary.",
    "--- SVM smote",
    "Unlike the borderline variations, the SVM variation uses the support",
    "vectors to decide which samples are in danger (near the boundary).",
    "Additionally it also introduces extrapolation for samples that are",
    "considered safe (far from boundary) and interpolation for samples",
    "in danger (near the boundary). The level of extrapolation is",
    "controled by the out_step.",
    "Store SVM object with any parameters",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C",
    "Create the set S",
    "Remove the seed from S since that it will be added anyway",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Classify on S",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "We concatenate the misclassified samples with the seed and the",
    "minority samples",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Compute the distance considering the farthest neighbour",
    "Sort the list of distance and get the index",
    "Select the desired number of samples",
    "Assign the parameter of the element of this class",
    "Check that the version asked is implemented",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Compute the number of cluster needed",
    "If we need to offer support for the indices",
    "For each element of the current class, find the set of NN",
    "of the minority class",
    "Call the constructor of the NN",
    "Fit the minority class since that we want to know the distance",
    "to these point",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the samples corresponding to the current class",
    "Find the NN",
    "Select the right samples",
    "Find the NN",
    "Select the right samples",
    "We need a new NN object to fit the current class",
    "Find the set of NN to the minority class",
    "Create the subset containing the samples found during the NN",
    "search. Linearize the indexes and remove the double values",
    "Create the subset",
    "Compute the NN considering the current class",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of clusters needed",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under-picking at random",
    "If the minority class is up, skip it",
    "Pick some elements at random",
    "If we need to offer support for the indices selected",
    "Concatenate to the minority class",
    "Check if the indices of the samples selected should be returned as",
    "well",
    "Return the indices of interest",
    "Initialize the boolean result as false, and also a counter",
    "Loop through each sample and looks whether it belongs to the minority",
    "class. If it does, we don't consider it since we want to keep all",
    "minority samples. If, however, it belongs to the majority sample we",
    "look at its first neighbour. If its closest neighbour also has the",
    "current sample as its closest neighbour, the two form a Tomek link.",
    "If they form a tomek link, put a True marker on this",
    "sample, and increase counter by one.",
    "Find the nearest neighbour of every point",
    "Send the information to is_tomek function to get boolean vector back",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Return data set without majority Tomek links.",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Randomly get one sample from the majority class",
    "Generate the index to select",
    "Create the set C - One majority samples and all minority",
    "Create the set S - all majority samples",
    "Create a k-NN classifier",
    "Fit C into the knn",
    "Check each sample in S if we keep it or drop it",
    "Do not select sample which are already well classified",
    "Classify on S",
    "If the prediction do not agree with the true label",
    "append it in C_x",
    "Keep the index for later",
    "Update C",
    "Fit C into the knn",
    "This experimental to speed up the search",
    "Classify all the element in S and avoid to test the",
    "well classified elements",
    "Find the misclassified S_y",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Compute the number of cluster needed",
    "Create the clustering object",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it.",
    "Find the centroids via k-means",
    "Concatenate to the minority class",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the whole dataset",
    "Loop over the other classes under picking at random",
    "Get the sample of the current class",
    "Get the samples associated",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make an AND operation through the three neighbours",
    "If the minority class remove the majority samples",
    "Get the index to exclude",
    "Get the index to exclude",
    "Create a vector with the sample to select",
    "Exclude as well the minority sample since that they will be",
    "concatenated later",
    "Get the samples from the majority classes",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Start with the minority class",
    "All the minority class samples will be preserved",
    "If we need to offer support for the indices",
    "Create a k-NN to fit the whole data",
    "Fit the data",
    "Loop over the other classes under picking at random",
    "If the minority class is up, skip it",
    "Get the sample of the current class",
    "Find the NN for the current class",
    "Get the label of the corresponding to the index",
    "Check which one are the same label than the current class",
    "Make the majority vote",
    "Get the samples which agree all together",
    "If we need to offer support for the indices selected",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Check if the indices of the samples selected should be returned too",
    "Return the indices of interest",
    "Select the appropriate classifier",
    "Create the different folds",
    "Compute the number of cluster needed",
    "Find the percentile corresponding to the top num_samples",
    "Sample the data",
    "If we need to offer support for the indices",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Resample the data",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit and sample",
    "Create the object",
    "Generate a global dataset to use",
    "Define a ratio",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Resample the data",
    "Resample the data",
    "Create the object",
    "Test the various init parameters of the pipeline.",
    "Check that we can't instantiate pipelines with objects without fit",
    "method",
    "Smoke test with only an estimator",
    "Check that params are set",
    "Smoke test the repr:",
    "Test with two objects",
    "Check that we can't use the same stage name twice",
    "Check that params are set",
    "Smoke test the repr:",
    "Check that params are not set when naming them wrong",
    "Test clone",
    "Check that apart from estimators, the parameters are the same",
    "Remove estimators that where copied",
    "Test the various methods of the pipeline (anova).",
    "Test with Anova + LogisticRegression",
    "Test that the pipeline can take fit parameters",
    "classifier should return True",
    "and transformer params should not be changed",
    "Test pipeline raises set params error message for nested models.",
    "expected error message",
    "nested model check",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (preprocessing + svm).",
    "check shapes of various prediction functions",
    "test that the fit_predict method is implemented on a pipeline",
    "test that the fit_predict on pipeline yields same results as applying",
    "transform and clustering steps separately",
    "first compute the transform and clustering step separately",
    "use a pipeline to do the transform and clustering in one step",
    "tests that a pipeline does not have fit_predict method when final",
    "step of pipeline does not have fit_predict defined",
    "Test whether pipeline works with a transformer at the end.",
    "Also test pipeline.transform and pipeline.inverse_transform",
    "test transform and fit_transform:",
    "Test whether pipeline works with a transformer missing fit_transform",
    "test fit_transform:",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test the various methods of the pipeline (pca + svm).",
    "Test with PCA + SVC",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "test transform and fit_transform:",
    "Test whether pipeline works with a sampler at the end.",
    "Also test pipeline.sampler",
    "Test the various methods of the pipeline (anova).",
    "Test with RandomUnderSampling + Anova + LogisticRegression",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Fit using SMOTE",
    "Transform using SMOTE",
    "Fit and transform using ENN",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Create the object",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Fit the data",
    "Create the object",
    "Create the object for random under-sampling",
    "Define the classifier to use",
    "Start with the minority class",
    "Keep the indices of the minority class somewhere if we need to",
    "return them later",
    "Condition to initiliase before the search",
    "Get the initial number of samples to select in the majority class",
    "Create the array characterising the array containing the majority",
    "class",
    "Loop to create the different subsets",
    "Generate an appropriate number of index to extract",
    "from the majority class depending of the false classification",
    "rate of the previous iteration",
    "Mark these indexes as not being considered for next sampling",
    "For now, we will train and classify on the same data",
    "Let see if we should find another solution. Anyway,",
    "random stuff are still random stuff",
    "Push these data into a new subset",
    "Apply a bootstrap on x_data",
    "Train the classifier using the current data",
    "Train the classifier using the current data",
    "Predict using only the majority class",
    "Basically let's find which sample have to be retained for the",
    "next round",
    "Find the misclassified index to keep them for the next round",
    "Count how many random element will be selected",
    "We found a new subset, increase the counter",
    "Check if we have to make an early stopping",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Also check that we will have enough sample to extract at the",
    "next round",
    "Select the remaining data",
    "Select the final batch",
    "Push these data into a new subset",
    "We found a new subset, increase the counter",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Define the ratio parameter",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Check each array",
    "Create the object",
    "Generate a global dataset to use",
    "Define a negative ratio",
    "Define a ratio greater than 1",
    "Define ratio as an unknown string",
    "Define ratio as a list which is not supported",
    "Define a ratio",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Resample the data",
    "Create a wrong y",
    "Create the object",
    "Fit the data",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Fit the data",
    "Check if the data information have been computed",
    "Define the parameter for the under-sampling",
    "Create the object",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Define the ratio parameter",
    "Create the sampling object",
    "Get the different subset",
    "Create the object"
  ]
}
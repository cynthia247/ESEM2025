{
  "0.9.5": [
    "!/usr/bin/env python",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "the transport has been computed",
    "check if classes are really separated",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "missing_labels is a (ns, nt) matrix of {0, 1} such that",
    "the cells (i, j) has 0 iff either ys[i] or yt[j] is masked",
    "labels_match is a (ns, nt) matrix of {True, False} such that",
    "the cells (i, j) has False if ys[i] != yt[i]",
    "cost correction is a (ns, nt) matrix of {-Inf, float, Inf} such",
    "that he cells (i, j) has -Inf where there's no correction necessary",
    "by 'correction' we mean setting cost to a large value when",
    "labels do not match",
    "we suppress potential RuntimeWarning caused by Inf multiplication",
    "(as we explicitly cover potential NANs later)",
    "this operation is necessary because 0 * Inf = NAN",
    "thus is irrelevant when limit_max is finite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "coupling estimation",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "get the nearest neighbor in the source domain",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "init uniform",
    "weak OT loss",
    "weak OT gradient",
    "solve with conditional gradient and return solution",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "solve the barycenter",
    "solve OT with template",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "Main function",
    "constant input variables",
    "measures on rows and columns",
    "pre-calculate cost constants",
    "initialize coupling and dual vectors",
    "initialize log",
    "update sample coupling",
    "update feature coupling",
    "update error",
    "COOT part",
    "Entropic part",
    "sanity check",
    "measures on rows and columns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "helper function for code factorisation",
    "horizontal source on the bottom, flipped vertically",
    "vertical target on the left",
    "coupling matrix in the middle",
    "vertical source on the left",
    "horizontal target on the top",
    "coupling matrix in the middle",
    "Set title below matrix plot",
    "slice over the y values that are in the y range",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "Yikun Bai < yikun.bai@vanderbilt.edu >",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "convert to humpy",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "convert back to backend",
    "Next 3 lines equivalent to K=nx.exp(-M/reg), but faster to compute",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "optimise the plan",
    "optimise the values phi and the gradients G",
    "convert back to backend",
    "lower bound",
    "upper bound",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "###############################################################################",
    "Losses for stochastic optimization",
    "###############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Jakub Zadrozny <jakub.r.zadrozny@gmail.com>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "marginals",
    "print iterations",
    "loop",
    "Solve transport",
    "Solve PCA",
    "block coordinate descent",
    "majorization-minimization",
    "stop or not",
    "print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "scipy<1.8.0",
    "The corresponding scipy function does not work for matrices",
    "it's necessary to check boundary condition here for the coefficient",
    "as the callback could be evaluated for negative value of alpha by",
    "`scalar_search_armijo` function here:",
    "",
    "https://github.com/scipy/scipy/blob/11509c4a98edded6c59423ac44ca1b7f28fba1fd/scipy/optimize/linesearch.py#L686",
    "",
    "see more details https://github.com/PythonOT/POT/issues/502",
    "The callable function operates on nx backend",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "to not change G0 in place.",
    "problem linearization",
    "solve linear program",
    "line search",
    "the line-search does not allow to update the gradient",
    "the line-search allows to update the gradient directly",
    "e.g. while using quadratic losses as the gromov-wasserstein loss",
    "test convergence",
    "get minimum by rows as binary mask",
    "instead of exact elements equal to min_ we consider a small margin (1e-15)",
    "for float precision issues. Then the mass is split uniformly",
    "between these elements.",
    "return by default an empty inner_log",
    "add dummy nodes to Mi",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "V[nx.newaxis, :], max_nz, z, axis=1).ravel()",
    "For each row of V, find top max_nz values; arrange the",
    "corresponding column indices such that their values are",
    "in a descending order.",
    "Extract the top max_nz values for each row",
    "and then project to simplex.",
    "rho = nx.count_nonzero(cond, axis=1)",
    "Put the projection of max_nz_values to their original column indices",
    "while keeping other values zero.",
    "in Jax, we need to use the `at` property of `jax.numpy.ndarray`",
    "to do in-place array modifications.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "I assume that other solvers may return directly",
    "some primal objects?",
    "In the code below, let's define the main quantities",
    "that may be of interest to users.",
    "An OT solver returns an object that inherits from OTResult",
    "(e.g. SinkhornOTResult) and implements the relevant",
    "methods (e.g. \"plan\" and \"lazy_plan\" but not \"sparse_plan\", etc.).",
    "log is a dictionary containing potential information about the solver",
    "Dual potentials --------------------------------------------",
    "Transport plan -------------------------------------------",
    "N.B.: We may catch out-of-memory errors and suggest",
    "the use of lazy_plan or sparse_plan when appropriate.",
    "Loss values --------------------------------",
    "Marginal constraints -------------------------",
    "Barycentric mappings -------------------------",
    "Return the displacement vectors as an array",
    "that has the same shape as \"xa\"/\"xb\" (for samples)",
    "or \"a\"/\"b\" * D (for images)?",
    "# Wasserstein barycenters ----------------------",
    "@property",
    "def masses(self):",
    "\"\"\"Masses for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "@property",
    "def samples(self):",
    "\"\"\"Sample locations for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "Miscellaneous --------------------------------",
    "The string below refers to the POT library:",
    "successor methods may concatenate the relevant references",
    "to the original definitions, solvers and underlying numerical backends.",
    "set attributes for named arguments/arrays",
    "R[i] = Q[i] @ P[i].T",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "Julie Delon <julie.delon@math.cnrs.fr>",
    "",
    "License: MIT License",
    "C2[i, j] = Cs12[i] @ C_t[j] @ Cs12[i], shape (k_s, k_t, d, d)",
    "D_covs[i,j] = trace(C_s[i] + C_t[j] - 2C[i,j])",
    "only need to compute for non-zero plan entries",
    "gaussian mapping between components i and j applied to x",
    "A[i, j] is the linear part of the gaussian mapping between components",
    "i and j, b[i, j] is the translation part",
    "only need to compute for non-zero plan entries",
    "(n_samples, k_s)",
    "sample between 0 and k_s * k_t - 1",
    "hand-made d-variate meshgrid in ij indexing",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "Tianlin Liu <t.liu@unibas.ch>",
    "For each column of X, find entries that are not among the top max_nz.",
    "Set these entries to -inf.",
    "Project the scaled X onto the simplex with sparsity constraint.",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "convert to humpy",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "Use envelope theorem differentiation for memory saving",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for EMD solver",
    "default values for exact unbalanced OT",
    "default values for sinkhorn",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for solver",
    "default values for EMD solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['log_u'], log['log_v'])  #TODO",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v'])",
    "default values for solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "for uniform weights",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "lazy solver of memory complexity O(n)",
    "lazy OT plan",
    "Use envelope theorem differentiation for memory saving",
    "automatic solver",
    "force O(n) memory efficient solver",
    "force pre-computed cost matrix",
    "use multiscale solver",
    "One can play with speed (small scaling factor) and precision (scaling close to 1)",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "recover the lazy low rank plan",
    "recover the full low rank plan",
    "recover the squared Gaussian Bures-Wasserstein distance",
    "recover the squared Wasserstein distances",
    "compute cost matrix M and use solve function",
    "Detect backend",
    "default values for solutions",
    "return scaled potentials (to be consistent with other solvers)",
    "compute potentials",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test if sklearn is installed for linux-minimal-deps",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "First low rank decomposition of the cost matrix (A)",
    "Second low rank decomposition of the cost matrix (B)",
    "POT backend if None",
    "----------------- Initialisation of Dykstra algorithm -----------------",
    "--------------------- Dykstra algorithm -------------------------",
    "See Section 3.3 - \"Algorithm 2 LR-Dykstra\" in paper",
    "Compute u^{(1)} and u^{(2)}",
    "Compute g, g^{(3)}_1 and update \\tilde{g}",
    "Compute new value of g with \\prod",
    "Compute v^{(1)} and v^{(2)}",
    "Compute q^{(1)}, q^{(2)} and q^{(3)}_2",
    "Update values of \\tilde{v}^{(1)}, \\tilde{v}^{(2)} and \\tilde{g}",
    "Compute error",
    "Compute low rank matrices Q, R",
    "POT backend",
    "Initialize weights a, b",
    "Compute rank (see Section 3.1, def 1)",
    "Dykstra won't converge if 1/rank < alpha (see Section 3.2)",
    "Low rank decomposition of the sqeuclidean cost matrix",
    "Initialize the low rank matrices Q, R, g",
    "Gamma initialization",
    "-------------------------- Low rank algorithm ------------------------------",
    "see \"Section 3.3, Algorithm 3 LOT\"",
    "Compute C*R dot using the lr decomposition of C",
    "Compute C.T * Q using the lr decomposition of C",
    "Compute omega",
    "Rescale gamma at each iteration",
    "LR Dykstra algorithm",
    "----------------- Compute lazy_plan, value and value_linear  ------------------",
    "see \"Section 3.2: The Low-rank OT Problem\" in the paper",
    "Compute lazy plan (using LazyTensor class)",
    "Compute value_linear (using trace formula)",
    "Compute value with entropy reg (see \"Section 3.2\" in the paper)",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Mapping between argument types and the existing backend",
    "check that all arguments matched or not the type",
    "Otherwise return an error",
    "check that some arrays given",
    "convert batch of tensors to numpy",
    "convert a tensor to numpy",
    "convert batch of arrays from numpy",
    "convert an array from numpy",
    "No gradients for numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "Q[...] = V[...] @ diag(L[...])",
    "R[...] = Q[...] @ V[...].T",
    "available_devices = jax.devices(\"cpu\")",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "Q[...] = V[...] @ diag(L[...])",
    "R[...] = Q[...] @ V[...].T",
    "Only register jax backend if it is installed",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Since version 1.11.0, interpolation is available",
    "Else, use numpy",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "Q[...] = V[...] @ diag(L[...])",
    "R[...] = Q[...] @ V[...].T",
    "Only register torch backend if it is installed",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "Q[...] = V[...] @ diag(L[...])",
    "R[...] = Q[...] @ V[...].T",
    "Only register cp backend if it is installed",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "Q[...] = V[...] @ diag(L[...])",
    "R[...] = Q[...] @ V[...].T",
    "todo(okachaiev): replace this with a more reasonable implementation",
    "Only register tensorflow backend if it is installed",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Compute the mean barycenter",
    "Init the covariance barycenter",
    "fixed point update",
    "check convergence",
    "ensure that Cov_s is the largest covariance matrix",
    "that is m >= n",
    "compte and sort eigenvalues decerasingly",
    "compute the gaussien Gromov-Wasserstein distance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "compute the gaussien Gromov-Wasserstein dis",
    "estimate mean and covariance",
    "compute and sort eigenvalues/eigenvectors decreasingly",
    "select the sign of the eigenvalues",
    "compute the gaussien Gromov-Wasserstein dis",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "compute loss",
    "compute gradient",
    "wrap the callable function to handle numpy arrays",
    "convert to numpy",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "after that we are all in torch",
    "set blur value and p",
    "force gradients for computing dual",
    "compute value",
    "get dual potentials",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "in case of multiple histograms",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionary",
    "geometric interpolation",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "oldidx = nx.copy(idx)",
    "the above terminates when any entry in idx equals the corresponding",
    "value in dims this leaves other dimensions incomplete; the remaining",
    "terms of the dual solution must be filled-in",
    "define forward/backward relations for pytorch",
    "function body here",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "quantiles of F_u evaluated in F_v^\\theta",
    "Deal with 1",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "Put negative values at the end",
    "Compute absciss",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "Compute icdf",
    "can probably be improved by computing only relevant values",
    "Code inspired from https://gitlab.gwdg.de/shundri/circularOT/-/tree/master/",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "if empty array given then use uniform distributions",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "if empty array given then use uniform distributions",
    "store original tensors",
    "convert to numpy",
    "ensure that same mass",
    "variable change matrix to reduce the problem to a Wasserstein Barycenter (WB)",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "compute marginals for global alignment",
    "compute global alignment",
    "compute local alignments",
    "randomly partition the space",
    "compute attributed graph partitions potentially using the auxiliary structure",
    "format partitions over (C1, F1) and (C2, F2)",
    "call to partitioned quantized fused gromov-wasserstein solver",
    "compute the transport cost on structures",
    "randomly partition the space",
    "randomly select representant in each partition",
    "compute attributed partitions and representants",
    "format partitions over (C1, F1) and (C2, F2)",
    "call to partitioned quantized fused gromov-wasserstein solver",
    "compute the transport cost on structures",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check first marginal of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check first marginal of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "the new cost can be deduced from the line search quadratic function",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of transport plans and C (if not provided by user)",
    "initial structure is constant so we add a small random noise",
    "to avoid getting stuck at init",
    "we first compute an initial informative barycenter structure",
    "on graphs we can compress",
    "then use it on graphs to expand",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "Initialization of transport plans, C and X (if not provided by user)",
    "both init_X and init_C are simply deduced from transport plans",
    "if not initialized",
    "initial structure is constant so we add a small random noise",
    "to avoid getting stuck at init",
    "more computationally costly inits could be used on structures",
    "so we assume affordable a Kmeans-like init for features",
    "and use it by default.",
    "relies on partitioning of inputs",
    "we first compute an initial informative barycenter structure",
    "on graphs we can compress",
    "then use it on graphs to expand",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "POT backend",
    "Initialize weights a, b",
    "Compute rank (see Section 3.1, def 1)",
    "Dykstra won't converge if 1/rank < alpha (see Section 3.2)",
    "Initial values for LR couplings (Q, R, g) with LOT",
    "Gamma initialization",
    "initial value of error",
    "Compute cost matrices",
    "Compute C*R dot using the lr decomposition of C",
    "Compute C.T * Q using the lr decomposition of C",
    "Compute omega",
    "Rescale gamma at each iteration",
    "Update couplings with LR Dykstra algorithm",
    "Update error with kullback-divergence",
    "fix divide by zero",
    "Update low rank costs",
    "Compute lazy plan (using LazyTensor class)",
    "Compute value_quad",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "alignment of both structure seen as feature matrices",
    "alignment of both structure seen as feature matrices",
    "alignment of both structure seen as feature matrices",
    "Handle initialization via structure information",
    "compute fluid partitioning on the biggest graph",
    "compute spectral partitioning on the biggest graph",
    "compute spectral partitioning on the biggest graph",
    "Add feature information solving a semi-relaxed Wasserstein problem",
    "get minimum by rows as binary mask",
    "compute coefficients for the barycenter coming from marginals",
    "compute coefficients for the barycenter coming from Ts and Cs",
    "###########################################################################",
    "Methods related to fused unbalanced GW and unbalanced Co-Optimal Transport.",
    "###########################################################################",
    "Support functions for BCD schemes",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Define gradients",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random euclidean distance matrix (if not provided by user)",
    "Initialization of Y",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "simple get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "init marginals if set as None",
    "compute separate terms for gradients and log",
    "the new cost is deduced from the line search quadratic function",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "Alexis Thual <alexis.thual@cea.fr>",
    "",
    "License: MIT License",
    "MAIN FUNCTION",
    "hyperparameters",
    "constant input variables",
    "measures on rows and columns",
    "initialize coupling and dual vectors",
    "shortcut functions",
    "initialize log",
    "Update feature coupling",
    "Update sample coupling",
    "get L1 error",
    "sanity check",
    "measures on rows and columns",
    "extract parameters",
    "calculate marginals",
    "calculate subgradients",
    "set gradients",
    "measures on rows and columns",
    "calculate marginals",
    "calculate subgradients",
    "set gradients",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Yikun Bai < yikun.bai@vanderbilt.edu >",
    "",
    "License: MIT License",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "simple get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "formula to check for partial FGW",
    "the new cost is deduced from the line search quadratic function",
    "update the gradient for next cg iteration",
    "Check marginals of G0",
    "Setup gradient computation",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Cedric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Handle backend of non-optional arguments",
    "Handle backend of optional arguments",
    "Initialize randomly structures of dictionary atoms based on samples",
    "batch sampling",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "Initialization for our numpy implementation of adam optimizer",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "Initialize randomly structures of dictionary atoms based on samples",
    "Initialize randomly features of dictionary atoms based on samples distribution by feature component",
    "Batch iterations",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "modeling (C,Y)",
    "constants depending on q",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "structure",
    "feature",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "polynomial coefficients from quadratic objective (with respect to w) on structures",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "polynomial coefficient from quadratic objective (with respect to w) on features",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "%%",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "%%",
    "Comparison of the OT matrices",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "use fast 1D solver",
    "Equivalent to",
    "G0 = ot.emd(a, b, M)",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: ../_static/images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have access to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan visualization",
    "`````````````````````````````````",
    "",
    "A good visualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: ../_static/images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Empirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Define Group lasso regularization and gradient",
    "------------------------------------------------",
    "The groups are the first and second half of the columns of G",
    "%%",
    "Set up parameters for solvers and solve",
    "---------------------------------------",
    "balanced OT",
    "unbalanced OT KL",
    "unbalanced OT L2",
    "unbalanced OT TV",
    "#############################################################################",
    "Plot plans",
    "----------",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "pl.xlim((-7,23))",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "pl.xlim((-7,23))",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "########################################################################################",
    "Compare the Euclidean Wasserstein distance with the Wasserstein distance on the  circle",
    "---------------------------------------------------------------------------------------",
    "This examples illustrates the periodicity of the Wasserstein distance on the circle.",
    "We choose as target distribution a von Mises distribution with mean :math:`\\mu_{\\mathrm{target}}`",
    "and :math:`\\kappa=20`. Then, we compare the distances with samples obtained from a von Mises distribution",
    "with parameters :math:`\\mu_{\\mathrm{source}}` and :math:`\\kappa=20`.",
    "The Wasserstein distance on the circle takes into account the periodicity",
    "and attains its maximum in :math:`\\mu_{\\mathrm{target}}+1` (the antipodal point) contrary to the",
    "Euclidean version.",
    "%% Compute and plot distributions",
    "np.random.vonmises deals with data on [-pi, pi[",
    "Put data on S^1=[0,1[",
    "#######################################################################",
    "Wasserstein distance between von Mises and uniform for different kappa",
    "----------------------------------------------------------------------",
    "When :math:`\\kappa=0`, the von Mises distribution is the uniform distribution on :math:`S^1`.",
    "%% Compute Wasserstein between Von Mises and uniform",
    "np.random.vonmises deals with data on [-pi, pi[",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with squared l2 regularization",
    "%% Sparsity-constrained OT",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Generating the fitting data",
    "%%",
    "Fitting the Nearest Brenier Potential",
    "%%",
    "Plotting the images of the source data",
    "%%",
    "Computing the predictions (images by nabla phi) for random samples of the source distribution",
    "%%",
    "Plot predictions for the gradient of the lower-bounding potential",
    "%%",
    "Plot predictions for the gradient of the upper-bounding potential",
    "-*- coding: utf-8 -*-",
    "Author: Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Plot data",
    "-------------",
    "#############################################################################",
    "Compute EWCA",
    "-------------",
    "#############################################################################",
    "Plot data, first component, and projected data",
    "-------------",
    "#############################################################################",
    "Plot transport plan",
    "-------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "Julie Delon <julie.delon@math.cnrs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "Generate GMMOT plan plot it",
    "---------------------------",
    "#############################################################################",
    "Generate GMMOT maps and plot them over plan",
    "-------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generate data",
    "-------------",
    "The source and clean target matrices are generated by",
    ":math:`X_{i,j} = \\cos(\\frac{i}{n_1} \\pi) + \\cos(\\frac{j}{d_1} \\pi)` and",
    ":math:`Y_{i,j} = \\cos(\\frac{i}{n_2} \\pi) + \\cos(\\frac{j}{d_2} \\pi)`.",
    "The target matrix is then contaminated by adding 5 row outliers.",
    "Intuitively, we expect that the estimated sample distribution should ignore these outliers,",
    "i.e. their weights should be zero.",
    "Generate clean target data mixed with outliers",
    "%%",
    "Optimize the COOT distance with respect to the sample marginal distribution",
    "---------------------------------------------------------------------------",
    "Estimated sample marginal distribution and training loss curve",
    "%%",
    "Visualizing the row and column alignments with the estimated sample marginal distribution",
    "-----------------------------------------------------------------------------------------",
    "",
    "Clearly, the learned marginal distribution completely and successfully ignores the 5 outliers.",
    "%%",
    "Now, let see if we can use unbalanced Co-Optimal Transport to recover the clean OT plans,",
    "without the need of learning the marginal distribution as in Co-Optimal Transport.",
    "-----------------------------------------------------------------------------------------",
    "%%",
    "Visualizing the row and column alignments learned by unbalanced Co-Optimal Transport.",
    "-----------------------------------------------------------------------------------------",
    "",
    "Similar to Co-Optimal Transport, we are also be able to fully recover the clean OT plans.",
    "-*- coding: utf-8 -*-",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "Gaussian distribution",
    "Source and target distribution",
    "#############################################################################",
    "Solve Low rank sinkhorn",
    "------------",
    "%%",
    "Solve low rank sinkhorn",
    "#############################################################################",
    "Sinkhorn vs Low Rank Sinkhorn",
    "-----------------------",
    "Compare Sinkhorn and Low rank sinkhorn with different regularizations and ranks.",
    "%% Sinkhorn",
    "Compute cost matrix for sinkhorn OT",
    "Solve sinkhorn with different regularizations using ot.solve",
    "%% Low rank sinkhorn",
    "Solve low rank sinkhorn with different ranks using ot.solve_sample",
    "%%",
    "Plot sinkhorn vs low rank sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%% Load modules",
    "%%",
    "Data for logo",
    "-------------",
    "Letter P",
    "Letter O",
    "Scaling and translation for letter O",
    "Letter T",
    "Translating the T",
    "Concatenate all letters",
    "Horizontal and vertical scaling",
    "%%",
    "Plot the logo (clear background)",
    "--------------------------------",
    "Solve OT problem between the points",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo.png', dpi=150, transparent=True, bbox_inches='tight')",
    "%%",
    "Plot the logo (dark background)",
    "--------------------------------",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo_dark.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo_dark.png', dpi=150, transparent=True, bbox_inches='tight')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generating two random matrices",
    "%%",
    "Visualizing the matrices",
    "%%",
    "Visualizing the alignments of rows and columns, and calculating the CO-Optimal Transport distance",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data an plot it",
    "------------------------",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "#############################################################################",
    "Compute Weak OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% Weak OT",
    "#############################################################################",
    "Plot weak OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "%%",
    "Generating 2 distributions",
    "-----",
    "Gaussian distributions",
    "%%",
    "Minimize the distances among distributions, identify the Barycenter",
    "-----",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "L2 Iteration",
    "%%",
    "Compare Barycenters in both methods",
    "-----",
    "pl.plot(x, barys[i], 'g-*')",
    "%%",
    "More than 2 distributions",
    "--------------------------------------------------",
    "Generate 7 pseudorandom gaussian distributions with 50 bins.",
    "%%",
    "Minimizing Distances Among Many Distributions",
    "---------------",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "Perform gradient descent optimization using the d-MMOT method.",
    "after minimization, any distribution can be used as a estimate of barycenter.",
    "Compute 1D Wasserstein barycenter using the L2/LP method",
    "%%",
    "Compare Barycenters in both methods",
    "---------",
    "%%",
    "Compare with original distributions",
    "---------",
    "pl.plot(x, barys[i], 'g')",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "Julie Delon <julie.delon@math.cnrs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data and plot it",
    "-------------------------",
    "#############################################################################",
    "Gradient descent loop",
    "------------------------",
    "#############################################################################",
    "Last step visualisation",
    "------------------------",
    "#############################################################################",
    "Steps visualisation",
    "------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinuous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinuous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "Generate 2D and 3D curves",
    "Source and target distribution",
    "#############################################################################",
    "Plot data",
    "------------",
    "%%",
    "Plot the source and target samples",
    "#############################################################################",
    "Entropic Gromov-Wasserstein",
    "------------",
    "%%",
    "Compute cost matrices",
    "Scale cost matrices",
    "Solve entropic gw",
    "Plot entropic gw",
    "#############################################################################",
    "Low rank squared euclidean cost matrices",
    "------------",
    "%%",
    "Compute the low rank sqeuclidean cost decompositions",
    "Scale the low rank cost matrices",
    "#############################################################################",
    "Low rank Gromov-Wasserstein",
    "------------",
    "%%",
    "Solve low rank gromov-wasserstein with different ranks",
    "%%",
    "Plot low rank GW with different ranks",
    "%%",
    "Compare computation time between entropic GW and low rank GW",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data an plot it",
    "------------------------",
    "parameters and data generation",
    "%% plot samples",
    "%%",
    "Compute Factored OT and exact OT solutions",
    "------------------------------------------",
    "%% EMD",
    "%% factored OT OT",
    "%%",
    "Plot factored OT and exact OT solutions",
    "---------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labeled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "Gaussian (linear) Monge mapping estimation",
    "Gaussian (linear) GW mapping estimation",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "Monge mapping",
    "gaussian GW mapping",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "Labels",
    "Ticks",
    "##############################################################################",
    "Spherical Sliced Wasserstein for different seeds and number of projections",
    "--------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Spherical Sliced Wasserstein",
    "---------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "%%",
    "plot the transported mass",
    "-------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@ensae.fr>",
    "License: MIT License",
    "#############################################################################",
    "Setting parameters",
    "-------------",
    "%% parameters",
    "#############################################################################",
    "Compute entropic kl-regularized UOT with Sinkhorn and Translation Invariant Sinkhorn",
    "-----------",
    "loss matrix",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------------------------------------------------------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------------------",
    "",
    "The OT plan is plotted as a function of $\\gamma$ that is the inverse of the",
    "weight on the marginal relaxations.",
    "%% fully relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for UOT l2",
    "-----------------------------------",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-----------------------------------------",
    "%% semi-relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for semi-relaxed UOT l2",
    "------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Compute entropic kl-regularized UOT, kl- and l2-regularized UOT",
    "-----------",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "----------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "--------------------------------------------------------",
    "The adjacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "-------------------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the node in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating dual variables for entropic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize the dual loss",
    "%%",
    "Plot the estimated entropic OT plan",
    "-----------------------------------",
    "%%",
    "Estimating dual variables for quadratic OT",
    "------------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize the dual loss",
    "%%",
    "Plot the estimated quadratic OT plan",
    "------------------------------------",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "----------------------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "---------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "-----------------------------------------",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate samples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "--------------------------------------------------",
    "#############################################################################",
    "Plotting the reweighted source distribution",
    "-------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating deep dual variables for entropic OT",
    "----------------------------------------------",
    "define the MLP model",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize the dual loss",
    "%%",
    "Plot the density on target for a given source sample",
    "----------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Gradient descent",
    "----------------",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "pl.subplot(3, 3, i + 1)",
    "ax = pl.axes(projection='3d')",
    "ax.axis(\"off\")",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "compute OT sparsity level",
    "Methods using Sinkhorn projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Compute GW with scalable stochastic methods with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "############################################################################",
    "",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "-----------------------------------------------------------------------------------------------",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability,",
    "and variable cluster proportions.",
    "Visualize samples",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the srGW barycenter from the dataset and visualize embeddings",
    "-----------------------------------------------------------",
    "Here we use the Fluid partitioning method to deduce initial transport plans",
    "for the barycenter problem. An initlal structure is also deduced from these",
    "initial transport plans. Then a warmstart strategy is used iteratively to",
    "init each individual srGW problem within the BCD algorithm.",
    "Compute the 2D representation of the embeddings living in the 2-simplex of probability",
    "############################################################################",
    "",
    "Endow the dataset with node features",
    "------------------------------------",
    "node labels, corresponding to the true SBM cluster assignments,",
    "are set for each graph as one-hot encoded node features.",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the srFGW barycenter from the attributed graphs and visualize embeddings",
    "-----------------------------------------------------------",
    "We emphasize the dependence to the trade-off parameter alpha that weights the",
    "relative importance between structures (alpha=1) and features (alpha=0),",
    "knowing that embeddings that perfectly cluster graphs w.r.t their features",
    "should ease the identification of the number of clusters in the graphs.",
    "Compute the 2D representation of the embeddings living in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "############################################################################",
    "",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "-----------------------------------------------------------------------------------------------",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability.",
    "Visualize samples",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the Gromov-Wasserstein dictionary from the dataset",
    "-----------------------------------------------------------",
    "visualize loss evolution over epochs",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "Continuous connections between nodes of the atoms are colored in shades of grey (1: dark / 2: white)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Compute the 2D representation of the unmixing living in the 2-simplex of probability",
    "############################################################################",
    "",
    "Endow the dataset with node features",
    "------------------------------------",
    "We follow this feature assignment on all nodes of a graph depending on its label/number of clusters",
    "1 cluster --> 0 as nodes feature",
    "2 clusters --> 1 as nodes feature",
    "3 clusters --> 2 as nodes feature",
    "features are one-hot encoded following these assignments",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate a Fused Gromov-Wasserstein dictionary from the dataset of attributed graphs",
    "------------------------------------------------------------------------------------",
    "visualize loss evolution",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "scaled_F = 2 * (Fatom - min_features) / (max_features - min_features)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Visualize unmixings in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "Computing FGW and GW",
    "reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "visu OT matrix",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their entropic-regularized semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW_e(C2, h2, C3)",
    "2) srGW_e(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the entropic-regularized semi-relaxed Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the entropic srGW matching.",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW_e(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the entropic semi-relaxed Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "############################################################################",
    "",
    "Generate graphs",
    "--------------------------------------------------------------------------",
    "",
    "Create two graphs following Stochastic Block models of 2 and 3 clusters.",
    "Add weights on the edges for visualization later on",
    "setup for graph visualization",
    "get graphs partition and their coloring",
    "############################################################################",
    "",
    "Compute their quantized Gromov-Wasserstein distance without using the wrapper",
    "---------------------------------------------------------",
    "",
    "We detail next the steps implemented within the wrapper that preprocess graphs",
    "to form partitioned graphs, which are then passed as input to the generic qFGW solver.",
    "1-a) Partition C1 and C2 in 2 and 3 clusters respectively using Louvain",
    "algorithm from Networkx. Then encode these partitions via vectors of assignments.",
    "1-b) Select representant in each partition using the Pagerank algorithm",
    "implementation from networkx.",
    "1-c) Format partitions such that:",
    "CR contains relations between representants in each space.",
    "list_R contains relations between samples and representants within each partition.",
    "list_h contains samples relative importance within each partition.",
    "1-d) call to partitioned quantized gromov-wasserstein solver",
    "Visualization of the graph pre-processing",
    "############################################################################",
    "",
    "Compute the quantized Gromov-Wasserstein distance using the wrapper",
    "---------------------------------------------------------",
    "",
    "Compute qGW(spC1, h1, spC2, h2). We also illustrate the use of auxiliary matrices",
    "such that the adjacency matrices `C1_aux=C1` and `C2_aux=C2` to partition the graph using",
    "Louvain algorithm, and the Pagerank algorithm for selecting representant within",
    "each partition. Notice that `C1_aux` and `C2_aux` are optional, if they are not",
    "specified these pre-processing algorithms will be applied to spC2 and spC3.",
    "no node features are considered on this synthetic dataset. Hence we simply",
    "let F1, F2 = None and set alpha = 1.",
    "############################################################################",
    "",
    "Visualization of the quantized Gromov-Wasserstein matching",
    "--------------------------------------------------------------",
    "",
    "We color nodes of the graph based on the respective partition of each graph.",
    "On the first plot we illustrate the qGW matching between both shortest path matrices.",
    "While the GW matching across representants of each space is illustrated on the right.",
    "get graphs partition and their coloring",
    "############################################################################",
    "",
    "Generate attributed point clouds",
    "--------------------------------------------------------------------------",
    "",
    "Create two attributed point clouds representing curves in 2D and 3D respectively,",
    "whose samples are further associated to various color intensities.",
    "Generate 2D and 3D curves",
    "Source and target distribution across spaces encoded respectively via their",
    "squared euclidean distance matrices.",
    "Further associated to color intensity features derived from z",
    "############################################################################",
    "",
    "Visualize partitioned attributed point clouds",
    "--------------------------------------------------------------------------",
    "",
    "Compute the partitioning and representant selection further used within",
    "qFGW wrapper, both provided by a K-means algorithm. Then visualize partitioned spaces.",
    "Plot the source and target samples as distributions",
    "############################################################################",
    "",
    "Compute the quantized Fused Gromov-Wasserstein distance between samples using the wrapper",
    "---------------------------------------------------------",
    "",
    "Compute qFGW(X, FX, hX, Y, FY, HY), setting the trade-off parameter between",
    "structures and features `alpha=0.5`. This solver considers a squared euclidean structure",
    "for each distribution X and Y, and partition each of them into 4 clusters using",
    "the K-means algorithm before computing qFGW.",
    "Plot low rank GW with different ranks",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create 2 classes of stochastic block models (SBM) graphs with 1 block and 2 blocks respectively.",
    "edge probabilities for the SBMs",
    "block sizes",
    "node features",
    "split the data into train and test sets",
    "%%",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot one graph of each class",
    "%%",
    "#############################################################################",
    "Pooling architecture using the TFGW layer",
    "---------",
    "#############################################################################",
    "Graph classification training",
    "---------",
    "store latent embeddings and classes for TSNE visualization",
    "store last classes and embeddings for TSNE visualization",
    "Test",
    "%%",
    "#############################################################################",
    "TSNE visualization of graph classification",
    "---------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "Compute pairwise euclidean distance between node features",
    "############################################################################",
    "",
    "Compute their Fused Gromov-Wasserstein distances",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "Alternated Bregman Projected Gradient algorithm with Kullback-Leibler as proximal operator",
    "compute OT sparsity level",
    "Methods using Sinkhorn/Bregman projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Visualization of the Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the FGW matchings",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "For each matching, all node sizes are proportionnal to their mass computed",
    "from marginals of the OT plan to illustrate potential feasibility errors.",
    "NB: colors refer to clusters - not to node features",
    "Add weights on the edges for visualization later on",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "--------------------------------------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW(C2, h2, C3)",
    "2) srGW(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Gromov-Wasserstein matchings",
    "--------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srGW matching",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "-----------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Fused Gromov-Wasserstein matchings",
    "--------------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Authors: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "%%",
    "Define Gaussian Covariances and distributions",
    "---------------------------------------------",
    "%%",
    "Plot the distributions",
    "----------------------",
    "pl.scatter(mu[0],mu[1],color=color, marker='x')",
    "%%",
    "Compute Bures-Wasserstein barycenters and plot them",
    "-------------------------------------------",
    "basis for bilinear interpolation",
    "weights are constructed by bilinear interpolation",
    "-*- coding: utf-8 -*-",
    "Authors: Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "%%",
    "General Parameters",
    "------------------",
    "%%",
    "Generate Data",
    "-------------",
    "%%",
    "Inspect generated distributions",
    "-------------------------------",
    "%%",
    "Interpolating Empirical Distributions",
    "-------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#######################",
    "Generate and plot data",
    "----------------------",
    "Input measures",
    "Input measure locations in their respective 2D spaces",
    "Input measure weights",
    "Projections 3D -> 2D",
    "Barycenter weights",
    "Number of barycenter points to compute",
    "Send the input measures into 3D space for visualization",
    "Plot the input data",
    "################################",
    "Barycenter computation and plot",
    "-------------------------------",
    "############################",
    "Plotting projection matches",
    "---------------------------",
    "#############################################",
    "Rotation animation",
    "--------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Authors: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data",
    "-------------",
    "%%",
    "Compute free support Wasserstein barycenter",
    "-------------------------------------------",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "%%",
    "Compute free support Sinkhorn barycenter",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "set numpy print options : TODO update tests when all release use modern numpy",
    "make sure TF doesn't allocate entire GPU",
    "allow numpy API for TF",
    "Author: Laur\u00e8ne DAVID <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test computation of low rank cost matrices M1 and M2",
    "test low rank sinkhorn",
    "check constraints for P",
    "check if lazy_plan is equal to the fully computed plan",
    "check if value_linear is correct with its original formula",
    "check warn parameter when Dykstra algorithm doesn't converge",
    "test lowrank inits",
    "test ImportError if init=\"kmeans\" and sklearn not imported",
    "check constraints for P",
    "Test warning for value of alpha",
    "Test lr sinkhorn with different init strategies",
    "check constraints for P",
    "Test low rank sinkhorn for different backends",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "check constraints",
    "test weak ot solver for different backends",
    "check constraints",
    "check constraints",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "generate gaussian dataset",
    "compute first 3 components with BCD",
    "test that U contains the principal components",
    "compute first 3 components with MM",
    "test that U contains the principal components",
    "compute last 3 components",
    "test that U contains the last principal components",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "chaeck that identity is recovered",
    "check G is identity",
    "check constraints",
    "test weak ot solver for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check transported mass",
    "check constraints",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "Julie Delon <julie.delon@math.cnrs.fr>",
    "",
    "License: MIT License",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check that an error is raised if the metric is not a Minkowski one",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test binary_search_circle and wasserstein_circle give similar results as emd",
    "check loss is similar",
    "test semidiscrete_wasserstein2_unif_circle versus wasserstein_circle",
    "w_u = rng.uniform(0., 1., n)",
    "w_u = w_u / w_u.sum()",
    "check loss is similar",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "set readable ids for each param",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "print(\"dual = {}\".format(sol.potentials))",
    "assert_allclose_sol(sol0, sol)",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "Note, gradients aer invariant to change in constant so we center them",
    "solve unif weights",
    "solve signe weights",
    "solve in backend",
    "test not implemented and check raise",
    "check some attributes",
    "solve in backend",
    "solve in backend",
    "test not implemented and check raise",
    "detect partial not implemented and error detect in value",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve signe weights",
    "test solve_sample when is_Lazy = False",
    "solve signe weights",
    "check some attributes (no need )",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "create a lazy tensor",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "For each column of X, find top max_nz values and",
    "their corresponding indices. This incurs a sort.",
    "Project the top max_nz values onto the simplex.",
    "This incurs a second sort.",
    "Put the projection of max_nz_values to their original indices",
    "and set all other values zero.",
    "check that two versions produce consistent results",
    "test timing",
    "np.testing.assert_allclose(0.1, t, rtol=1e-1, atol=1e-1)",
    "very slow macos github action equality not possible",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "test print",
    "tets get citation",
    "i,j can be integers or slices, x1,x2 have to be passed as keyword arguments",
    "create a lazy tensor",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "total sum",
    "sum over axis 0",
    "sum over axis 1",
    "test otehr reduction function",
    "test 3D tensors",
    "create a lazy tensor",
    "total sum",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "labels are shifted",
    "labels are shifted but the shift if expected",
    "test on non-negative tensors",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check this only if GPU is available",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Barycenter initialization",
    "Obvious barycenter locations. Take a look on test_ot.py, test_free_support_barycenter",
    "Calculate free support barycenter w/ Sinkhorn algorithm. We set the entropic regularization",
    "term to 1, but this should be, in general, fine-tuned to the problem.",
    "Verifies if calculated barycenter matches ground-truth",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "assymetric loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "First image",
    "Second image",
    "Creating matrix A containing all distributions",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check this only if GPU is available",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "call with log = False",
    "check equality of plans",
    "check error on wrong metric",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "Test sinkhorn divergence",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "Compute loss using dmmot_monge_1dgrid_loss",
    "Compute loss using exact OT solver with absolute ground metric",
    "deal with C-contiguous error from tensorflow backend (not sure why)",
    "compute loss",
    "test discrete_mmot_converge result",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test couplings",
    "test divergence",
    "test couplings",
    "test divergence",
    "test couplings",
    "test divergence",
    "linear part",
    "test couplings",
    "test divergence",
    "test couplings",
    "test divergence",
    "test divergence",
    "test couplings",
    "test divergence",
    "test divergence",
    "linear part",
    "test couplings",
    "test divergence",
    "test couplings",
    "test divergence",
    "test couplings",
    "test divergence",
    "raise error of divergence",
    "raise error of solver",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for mass mismatch",
    "check with empty inputs",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd2 and emd2 with openmp for simple identity",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two Diracs",
    "obvious barycenter location between two Diracs",
    "obvious barycenter location between two 2D Diracs",
    "test without log and no init",
    "test with log and init",
    "obvious barycenter between two Diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test that types mathcing different backends in input raise an error",
    "Check that subclassing a numpy array does not break get_backend",
    "note: This is only tested for numpy as this is hard to be consistent",
    "with other backends",
    "Sparse tensors test",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "test without log but with X_classes, a, b and other init method",
    "'new' input isn't new, so should be equal to target",
    "test with no log but classes",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Test weights argument",
    "test with closed form for diagonal covariance matrices",
    "no log",
    "no log + skewness",
    "test the other way around (target to source)",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict",
    "predict on batch",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict on batch",
    "Test the TW layer by passing two graphs through the layer and doing backpropagation.",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test couplings",
    "test marginal distributions",
    "test entropic COOT distance",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "raise value error of method sinkhorn",
    "raise value error for epsilon",
    "raise value error for alpha",
    "initialize warmstart",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test with coot distance",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "prepare semi-supervised labels",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "prepare semi-supervised labels",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test diffeernt transform and inverse transform",
    "test diffeernt transform",
    "test its computed",
    "test dimensions of coupling",
    "test coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "Mapping tests",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "'new' input isn't new, so should be equal to target",
    "test all margin constraints with gaussian similarity and disp regularisation",
    "previously used implementation for the cost estimator",
    "new vectorized implementation for the cost estimator",
    "hard-coded params from the original code",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "check if the marginals come close to the true ones when large reg",
    "check if mm_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test when G0 is given",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "test generalized sinkhorn for unbalanced OT",
    "check in case no histogram is provided or histogram is None",
    "test generalized sinkhorn for unbalanced OT",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "options for reg_m",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "options for reg_m",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "reg_type=\"entropy\" as multiple inputs does not work for KL yet",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric - testing various initialization of the OT plan.",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric structure - checking constraints and values",
    "asymmetric - check consistency between srFGW and srFGW2",
    "symmetric structures + checking losses + inits",
    "checking consistency with srFGW and srFGW2 solvers",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric - testing various initialization of the OT plan.",
    "check constraints",
    "comparison between srGW and srGW2 solvers",
    "check constraints",
    "setup",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric structure - checking constraints and values",
    "check constraints",
    "symmetric structures + checking losses + inits",
    "checking consistency with srFGW and srFGW2 solvers",
    "setup",
    "test on admissible stopping criterion",
    "test consistency of outputs across backends with 'square_loss'",
    "using different losses",
    "+ tests on different inits",
    "test of gromov_barycenters with `log` on",
    "test consistency across backends with larger barycenter than inputs",
    "test providing init_C",
    "test consistency across backends with 'kl_loss'",
    "test of gromov_barycenters with `log` on",
    "providing init_C similarly than in the function.",
    "test edge cases for gw barycenters:",
    "unique input structure",
    "test correspondance with utils function",
    "Tests with `fixed_structure=False` and `fixed_features=True`",
    "add test with 'kl_loss'",
    "test correspondance with utils function",
    "test consistency of outputs across backends with 'square_loss'",
    "with various initialization of G0",
    "test while providing advanced T inits and init_X != None, and init_C !=None",
    "test consistency of backends while barycenter size not strictly inferior to sizes",
    "test edge cases for semirelaxed fgw barycenters:",
    "unique input structure",
    "Author: Laur\u00e8ne DAVID <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test flat product operator",
    "test value",
    "test low rank gromov wasserstein",
    "check constraints for P",
    "check if lazy_plan is equal to the fully computed plan",
    "check warn parameter when low rank GW algorithm doesn't converge",
    "check warn parameter when Dykstra algorithm doesn't converge",
    "Test warning for value of alpha and rank",
    "Test lr sinkhorn with different init strategies",
    "check constraints for P",
    "Test low rank sinkhorn for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "C\u00e9dric Vincent-Cuat <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "clean samples",
    "add noise",
    "check consistency across backends and stability w.r.t loss/marginals/sym",
    "precision error while doubling numbers of computations with symmetric=False",
    "some instability can occur with kl. to investigate further.",
    "changing log offset in _transform_matrix was a way to solve it",
    "but it also negatively affects some other solvers in the API",
    "tests with different number of samples across spaces",
    "Edge cases - tests with m=1 set by default (coincide with gw)",
    "tests for pGW2",
    "tests integers",
    "computing necessary inputs to the line-search",
    "perform line-search",
    "clean samples",
    "add noise",
    "check consistency across backends and stability w.r.t loss/marginals/sym",
    "tests with m is None",
    "tests with different number of samples across spaces",
    "tests for pGW2",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: compare reconstruction error using initial dictionary and dictionary learned using this initialization",
    "> Compute initial reconstruction of samples on this random dictionary without backend",
    "> Learn the dictionary using this init",
    "> Compute reconstruction of samples on learned dictionary without backend",
    "Test: Perform same experiments after going through backend",
    "Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "knowing than the initialization scheme is the same than implemented to set the benchmarked initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "and testing other optimization settings untested until now.",
    "We pass previously estimated dictionaries to speed up the process.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: Compute initial reconstruction of samples on this random dictionary",
    "> Learn a dictionary using this given initialization and check that the reconstruction loss",
    "on the learned dictionary is lower than the one using its initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Compare both",
    "Test: Perform same experiments after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform similar experiment without providing the initial dictionary being an optional input",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: without using adam optimizer, with log and verbose set to True",
    "> Experiment providing previously estimated dictionary to speed up the test compared to providing initial random init.",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "> Compare results with/without backend",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "test edge cases for the update of the barycenter with `p != None`",
    "and `target=False`",
    "test not supported metrics",
    "test not supported method",
    "tests consistency across backends with m > n",
    "tests consistency across backends with m = n",
    "tests consistency across backends with m > n",
    "tests consistency across backends with m = n",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "Tests with marginal_loss = False",
    "check constraints",
    "check constraints",
    "setup",
    "test with 'kl_loss' and log=True",
    "providing init_C, init_Y",
    "add tests with fixed_structures or fixed_features",
    "test edge cases for fgw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "providing init_C",
    "test edge cases for gw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "test sinkhorn",
    "entropic gw and fgw",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "linear part",
    "test couplings",
    "test divergence",
    "linear part",
    "test divergence",
    "linear part",
    "test divergence",
    "linear part",
    "test divergence",
    "linear part",
    "test divergence",
    "linear part",
    "test divergence",
    "raise error of divergence",
    "raise error of solver",
    "linear part",
    "test couplings",
    "linear part",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "classical gradients",
    "Test with exact line-search",
    "Test with armijo line-search",
    "classical gradients",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "providing init_C",
    "test edge cases for gw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "check constraints",
    "Tests with kl-loss:",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "test correspondance with utils function",
    "add test with 'kl_loss'",
    "test correspondance with utils function",
    "test edge cases for fgw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "complementary tests for utils functions",
    "tests for edge cases of the graph partitioning",
    "tests for edge cases of the representant selection",
    "tests for edge cases of the format_partitioned_graph function",
    "Tests in qFGW solvers",
    "for non admissible values of alpha",
    "for non-consistent feature information provided",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "tests for edge cases of the representant selection",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "complementary tests for utils functions",
    "tests for edge cases of the format_partitioned_graph function",
    "for non-consistent feature information provided",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "html_css_files = [\"css/custom.css\"]",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.9.4": [
    "!/usr/bin/env python",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "the transport has been computed",
    "check if classes are really separated",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "missing_labels is a (ns, nt) matrix of {0, 1} such that",
    "the cells (i, j) has 0 iff either ys[i] or yt[j] is masked",
    "labels_match is a (ns, nt) matrix of {True, False} such that",
    "the cells (i, j) has False if ys[i] != yt[i]",
    "cost correction is a (ns, nt) matrix of {-Inf, float, Inf} such",
    "that he cells (i, j) has -Inf where there's no correction necessary",
    "by 'correction' we mean setting cost to a large value when",
    "labels do not match",
    "we suppress potential RuntimeWarning caused by Inf multiplication",
    "(as we explicitly cover potential NANs later)",
    "this operation is necessary because 0 * Inf = NAN",
    "thus is irrelevant when limit_max is finite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "coupling estimation",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "get the nearest neighbor in the source domain",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "init uniform",
    "weak OT loss",
    "weak OT gradient",
    "solve with conditional gradient and return solution",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "solve the barycenter",
    "solve OT with template",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "Main function",
    "constant input variables",
    "measures on rows and columns",
    "pre-calculate cost constants",
    "initialize coupling and dual vectors",
    "initialize log",
    "update sample coupling",
    "update feature coupling",
    "update error",
    "COOT part",
    "Entropic part",
    "sanity check",
    "measures on rows and columns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "Yikun Bai < yikun.bai@vanderbilt.edu >",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "convert to humpy",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "convert back to backend",
    "Next 3 lines equivalent to K=nx.exp(-M/reg), but faster to compute",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "optimise the plan",
    "optimise the values phi and the gradients G",
    "convert back to backend",
    "lower bound",
    "upper bound",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "###############################################################################",
    "Losses for stochastic optimization",
    "###############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Jakub Zadrozny <jakub.r.zadrozny@gmail.com>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "marginals",
    "print iterations",
    "loop",
    "Solve transport",
    "Solve PCA",
    "block coordinate descent",
    "majorization-minimization",
    "stop or not",
    "print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "scipy<1.8.0",
    "The corresponding scipy function does not work for matrices",
    "it's necessary to check boundary condition here for the coefficient",
    "as the callback could be evaluated for negative value of alpha by",
    "`scalar_search_armijo` function here:",
    "",
    "https://github.com/scipy/scipy/blob/11509c4a98edded6c59423ac44ca1b7f28fba1fd/scipy/optimize/linesearch.py#L686",
    "",
    "see more details https://github.com/PythonOT/POT/issues/502",
    "The callable function operates on nx backend",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "to not change G0 in place.",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "get minimum by rows as binary mask",
    "return by default an empty inner_log",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "V[nx.newaxis, :], max_nz, z, axis=1).ravel()",
    "For each row of V, find top max_nz values; arrange the",
    "corresponding column indices such that their values are",
    "in a descending order.",
    "Extract the top max_nz values for each row",
    "and then project to simplex.",
    "rho = nx.count_nonzero(cond, axis=1)",
    "Put the projection of max_nz_values to their original column indices",
    "while keeping other values zero.",
    "in Jax, we need to use the `at` property of `jax.numpy.ndarray`",
    "to do in-place array modificatons.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "I assume that other solvers may return directly",
    "some primal objects?",
    "In the code below, let's define the main quantities",
    "that may be of interest to users.",
    "An OT solver returns an object that inherits from OTResult",
    "(e.g. SinkhornOTResult) and implements the relevant",
    "methods (e.g. \"plan\" and \"lazy_plan\" but not \"sparse_plan\", etc.).",
    "log is a dictionary containing potential information about the solver",
    "Dual potentials --------------------------------------------",
    "Transport plan -------------------------------------------",
    "N.B.: We may catch out-of-memory errors and suggest",
    "the use of lazy_plan or sparse_plan when appropriate.",
    "Loss values --------------------------------",
    "Marginal constraints -------------------------",
    "Barycentric mappings -------------------------",
    "Return the displacement vectors as an array",
    "that has the same shape as \"xa\"/\"xb\" (for samples)",
    "or \"a\"/\"b\" * D (for images)?",
    "# Wasserstein barycenters ----------------------",
    "@property",
    "def masses(self):",
    "\"\"\"Masses for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "@property",
    "def samples(self):",
    "\"\"\"Sample locations for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "Miscellaneous --------------------------------",
    "The string below refers to the POT library:",
    "successor methods may concatenate the relevant references",
    "to the original definitions, solvers and underlying numerical backends.",
    "set attributes for named arguments/arrays",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "Tianlin Liu <t.liu@unibas.ch>",
    "For each column of X, find entries that are not among the top max_nz.",
    "Set these entries to -inf.",
    "Project the scaled X onto the simplex with sparsity constraint.",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "convert to humpy",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "Use envelope theorem differentiation for memory saving",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for EMD solver",
    "default values for exact unbalanced OT",
    "default values for sinkhorn",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for solver",
    "default values for EMD solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['log_u'], log['log_v'])  #TODO",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v'])",
    "default values for solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "for uniform weights",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "lazy solver of memory complexity O(n)",
    "lazy OT plan",
    "Use envelope theorem differentiation for memory saving",
    "automatic solver",
    "force O(n) memory efficient solver",
    "force pre-computed cost matrix",
    "use multiscale solver",
    "One can play with speed (small scaling factor) and precision (scaling close to 1)",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "recover the lazy low rank plan",
    "recover the full low rank plan",
    "recover the squared Gaussian Bures-Wasserstein distance",
    "recover the squared Wasserstein distances",
    "compute cost matrix M and use solve function",
    "Detect backend",
    "default values for solutions",
    "return scaled potentials (to be consistent with other solvers)",
    "compute potentials",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test if sklearn is installed for linux-minimal-deps",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "First low rank decomposition of the cost matrix (A)",
    "Second low rank decomposition of the cost matrix (B)",
    "POT backend if None",
    "----------------- Initialisation of Dykstra algorithm -----------------",
    "--------------------- Dykstra algorithm -------------------------",
    "See Section 3.3 - \"Algorithm 2 LR-Dykstra\" in paper",
    "Compute u^{(1)} and u^{(2)}",
    "Compute g, g^{(3)}_1 and update \\tilde{g}",
    "Compute new value of g with \\prod",
    "Compute v^{(1)} and v^{(2)}",
    "Compute q^{(1)}, q^{(2)} and q^{(3)}_2",
    "Update values of \\tilde{v}^{(1)}, \\tilde{v}^{(2)} and \\tilde{g}",
    "Compute error",
    "Compute low rank matrices Q, R",
    "POT backend",
    "Initialize weights a, b",
    "Compute rank (see Section 3.1, def 1)",
    "Dykstra won't converge if 1/rank < alpha (see Section 3.2)",
    "Low rank decomposition of the sqeuclidean cost matrix",
    "Initialize the low rank matrices Q, R, g",
    "Gamma initialization",
    "-------------------------- Low rank algorithm ------------------------------",
    "see \"Section 3.3, Algorithm 3 LOT\"",
    "Compute C*R dot using the lr decomposition of C",
    "Compute C.T * Q using the lr decomposition of C",
    "Compute omega",
    "Rescale gamma at each iteration",
    "LR Dykstra algorithm",
    "----------------- Compute lazy_plan, value and value_linear  ------------------",
    "see \"Section 3.2: The Low-rank OT Problem\" in the paper",
    "Compute lazy plan (using LazyTensor class)",
    "Compute value_linear (using trace formula)",
    "Compute value with entropy reg (see \"Section 3.2\" in the paper)",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Mapping between argument types and the existing backend",
    "check that all arguments matched or not the type",
    "Otherwise return an error",
    "check that some arrays given",
    "convert batch of tensors to numpy",
    "convert a tensor to numpy",
    "convert batch of arrays from numpy",
    "convert an array from numpy",
    "No gradients for numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "Only register jax backend if it is installed",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Since version 1.11.0, interpolation is available",
    "Else, use numpy",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "Only register torch backend if it is installed",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "Only register cp backend if it is installed",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "todo(okachaiev): replace this with a more reasonable implementation",
    "Only register tensorflow backend if it is installed",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Compute the mean barycenter",
    "Init the covariance barycenter",
    "fixed point update",
    "check convergence",
    "ensure that Cov_s is the largest covariance matrix",
    "that is m >= n",
    "compte and sort eigenvalues decerasingly",
    "compute the gaussien Gromov-Wasserstein distance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "compute the gaussien Gromov-Wasserstein dis",
    "estimate mean and covariance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "select the sign of the eigenvalues",
    "compute the gaussien Gromov-Wasserstein dis",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "compute loss",
    "compute gradient",
    "convert to numpy",
    "wrap the callable function to handle numpy arrays",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "after that we are all in torch",
    "set blur value and p",
    "force gradients for computing dual",
    "compute value",
    "get dual potentials",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "in case of multiple historgrams",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "oldidx = nx.copy(idx)",
    "the above terminates when any entry in idx equals the corresponding",
    "value in dims this leaves other dimensions incomplete; the remaining",
    "terms of the dual solution must be filled-in",
    "define forward/backward relations for pytorch",
    "function body here",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "quantiles of F_u evaluated in F_v^\\theta",
    "Deal with 1",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "Put negative values at the end",
    "Compute absciss",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "Compute icdf",
    "can probably be improved by computing only relevant values",
    "Code inspired from https://gitlab.gwdg.de/shundri/circularOT/-/tree/master/",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "if empty array given then use uniform distributions",
    "store original tensors",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "if empty array given then use uniform distributions",
    "store original tensors",
    "convert to numpy",
    "ensure that same mass",
    "variable change matrix to reduce the problem to a Wasserstein Barycenter (WB)",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "compute marginals for global alignment",
    "compute global alignment",
    "compute local alignments",
    "randomly partition the space",
    "compute attributed graph partitions potentially using the auxiliary structure",
    "format partitions over (C1, F1) and (C2, F2)",
    "call to partitioned quantized fused gromov-wasserstein solver",
    "compute the transport cost on structures",
    "randomly partition the space",
    "randomly select representant in each partition",
    "compute attributed partitions and representants",
    "format partitions over (C1, F1) and (C2, F2)",
    "call to partitioned quantized fused gromov-wasserstein solver",
    "compute the transport cost on structures",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check first marginal of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check first marginal of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "the new cost can be deduced from the line search quadratic function",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "POT backend",
    "Initialize weights a, b",
    "Compute rank (see Section 3.1, def 1)",
    "Dykstra won't converge if 1/rank < alpha (see Section 3.2)",
    "Initial values for LR couplings (Q, R, g) with LOT",
    "Gamma initialization",
    "initial value of error",
    "Compute cost matrices",
    "Compute C*R dot using the lr decomposition of C",
    "Compute C.T * Q using the lr decomposition of C",
    "Compute omega",
    "Rescale gamma at each iteration",
    "Update couplings with LR Dykstra algorithm",
    "Update error with kullback-divergence",
    "fix divide by zero",
    "Update low rank costs",
    "Compute lazy plan (using LazyTensor class)",
    "Compute value_quad",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "Correct order mistake in Equation 14 in [12]",
    "Correct order mistake in Equation 15 in [12]",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Define gradients",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random euclidean distance matrix (if not provided by user)",
    "Initialization of Y",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "simple get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "init marginals if set as None",
    "compute separate terms for gradients and log",
    "the new cost is deduced from the line search quadratic function",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Cedric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Handle backend of non-optional arguments",
    "Handle backend of optional arguments",
    "Initialize randomly structures of dictionary atoms based on samples",
    "batch sampling",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "Initialization for our numpy implementation of adam optimizer",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "Initialize randomly structures of dictionary atoms based on samples",
    "Initialize randomly features of dictionary atoms based on samples distribution by feature component",
    "Batch iterations",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "modeling (C,Y)",
    "constants depending on q",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "structure",
    "feature",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "polynomial coefficients from quadratic objective (with respect to w) on structures",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "polynomial coefficient from quadratic objective (with respect to w) on features",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "%%",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "%%",
    "Comparison of the OT matrices",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "use fast 1D solver",
    "Equivalent to",
    "G0 = ot.emd(a, b, M)",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: ../_static/images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have access to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan visualization",
    "`````````````````````````````````",
    "",
    "A good visualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: ../_static/images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Empirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Define Group lasso regularization and gradient",
    "------------------------------------------------",
    "The groups are the first and second half of the columns of G",
    "%%",
    "Set up parameters for solvers and solve",
    "---------------------------------------",
    "balanced OT",
    "unbalanced OT KL",
    "unbalanced OT L2",
    "unbalanced OT TV",
    "#############################################################################",
    "Plot plans",
    "----------",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "pl.xlim((-7,23))",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "pl.xlim((-7,23))",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "########################################################################################",
    "Compare the Euclidean Wasserstein distance with the Wasserstein distance on the  circle",
    "---------------------------------------------------------------------------------------",
    "This examples illustrates the periodicity of the Wasserstein distance on the circle.",
    "We choose as target distribution a von Mises distribution with mean :math:`\\mu_{\\mathrm{target}}`",
    "and :math:`\\kappa=20`. Then, we compare the distances with samples obtained from a von Mises distribution",
    "with parameters :math:`\\mu_{\\mathrm{source}}` and :math:`\\kappa=20`.",
    "The Wasserstein distance on the circle takes into account the periodicity",
    "and attains its maximum in :math:`\\mu_{\\mathrm{target}}+1` (the antipodal point) contrary to the",
    "Euclidean version.",
    "%% Compute and plot distributions",
    "np.random.vonmises deals with data on [-pi, pi[",
    "Put data on S^1=[0,1[",
    "#######################################################################",
    "Wasserstein distance between von Mises and uniform for different kappa",
    "----------------------------------------------------------------------",
    "When :math:`\\kappa=0`, the von Mises distribution is the uniform distribution on :math:`S^1`.",
    "%% Compute Wasserstein between Von Mises and uniform",
    "np.random.vonmises deals with data on [-pi, pi[",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with squared l2 regularization",
    "%% Sparsity-constrained OT",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Generating the fitting data",
    "%%",
    "Fitting the Nearest Brenier Potential",
    "%%",
    "Plotting the images of the source data",
    "%%",
    "Computing the predictions (images by nabla phi) for random samples of the source distribution",
    "%%",
    "Plot predictions for the gradient of the lower-bounding potential",
    "%%",
    "Plot predictions for the gradient of the upper-bounding potential",
    "-*- coding: utf-8 -*-",
    "Author: Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Plot data",
    "-------------",
    "#############################################################################",
    "Compute EWCA",
    "-------------",
    "#############################################################################",
    "Plot data, first component, and projected data",
    "-------------",
    "#############################################################################",
    "Plot transport plan",
    "-------------",
    "-*- coding: utf-8 -*-",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "Gaussian distribution",
    "Source and target distribution",
    "#############################################################################",
    "Solve Low rank sinkhorn",
    "------------",
    "%%",
    "Solve low rank sinkhorn",
    "#############################################################################",
    "Sinkhorn vs Low Rank Sinkhorn",
    "-----------------------",
    "Compare Sinkhorn and Low rank sinkhorn with different regularizations and ranks.",
    "%% Sinkhorn",
    "Compute cost matrix for sinkhorn OT",
    "Solve sinkhorn with different regularizations using ot.solve",
    "%% Low rank sinkhorn",
    "Solve low rank sinkhorn with different ranks using ot.solve_sample",
    "%%",
    "Plot sinkhorn vs low rank sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generate data",
    "-------------",
    "The source and clean target matrices are generated by",
    ":math:`X_{i,j} = \\cos(\\frac{i}{n_1} \\pi) + \\cos(\\frac{j}{d_1} \\pi)` and",
    ":math:`Y_{i,j} = \\cos(\\frac{i}{n_2} \\pi) + \\cos(\\frac{j}{d_2} \\pi)`.",
    "The target matrix is then contaminated by adding 5 row outliers.",
    "Intuitively, we expect that the estimated sample distribution should ignore these outliers,",
    "i.e. their weights should be zero.",
    "Generate clean target data mixed with outliers",
    "%%",
    "Optimize the COOT distance with respect to the sample marginal distribution",
    "---------------------------------------------------------------------------",
    "Estimated sample marginal distribution and training loss curve",
    "%%",
    "Visualizing the row and column alignments with the estimated sample marginal distribution",
    "-----------------------------------------------------------------------------------------",
    "",
    "Clearly, the learned marginal distribution completely and successfully ignores the 5 outliers.",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%% Load modules",
    "%%",
    "Data for logo",
    "-------------",
    "Letter P",
    "Letter O",
    "Scaling and translation for letter O",
    "Letter T",
    "Translating the T",
    "Concatenate all letters",
    "Horizontal and vertical scaling",
    "%%",
    "Plot the logo (clear background)",
    "--------------------------------",
    "Solve OT problem between the points",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo.png', dpi=150, transparent=True, bbox_inches='tight')",
    "%%",
    "Plot the logo (dark background)",
    "--------------------------------",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo_dark.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo_dark.png', dpi=150, transparent=True, bbox_inches='tight')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generating two random matrices",
    "%%",
    "Visualizing the matrices",
    "%%",
    "Visualizing the alignments of rows and columns, and calculating the CO-Optimal Transport distance",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data an plot it",
    "------------------------",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "#############################################################################",
    "Compute Weak OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% Weak OT",
    "#############################################################################",
    "Plot weak OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "%%",
    "Generating 2 distributions",
    "-----",
    "Gaussian distributions",
    "%%",
    "Minimize the distances among distributions, identify the Barycenter",
    "-----",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "L2 Iteration",
    "%%",
    "Compare Barycenters in both methods",
    "-----",
    "pl.plot(x, barys[i], 'g-*')",
    "%%",
    "More than 2 distributions",
    "--------------------------------------------------",
    "Generate 7 pseudorandom gaussian distributions with 50 bins.",
    "%%",
    "Minimizing Distances Among Many Distributions",
    "---------------",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "Perform gradient descent optimization using the d-MMOT method.",
    "after minimization, any distribution can be used as a estimate of barycenter.",
    "Compute 1D Wasserstein barycenter using the L2/LP method",
    "%%",
    "Compare Barycenters in both methods",
    "---------",
    "%%",
    "Compare with original distributions",
    "---------",
    "pl.plot(x, barys[i], 'g')",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinuous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinuous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "Generate 2D and 3D curves",
    "Source and target distribution",
    "#############################################################################",
    "Plot data",
    "------------",
    "%%",
    "Plot the source and target samples",
    "#############################################################################",
    "Entropic Gromov-Wasserstein",
    "------------",
    "%%",
    "Compute cost matrices",
    "Scale cost matrices",
    "Solve entropic gw",
    "Plot entropic gw",
    "#############################################################################",
    "Low rank squared euclidean cost matrices",
    "------------",
    "%%",
    "Compute the low rank sqeuclidean cost decompositions",
    "Scale the low rank cost matrices",
    "#############################################################################",
    "Low rank Gromov-Wasserstein",
    "------------",
    "%%",
    "Solve low rank gromov-wasserstein with different ranks",
    "%%",
    "Plot low rank GW with different ranks",
    "%%",
    "Compare computation time between entropic GW and low rank GW",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data an plot it",
    "------------------------",
    "parameters and data generation",
    "%% plot samples",
    "%%",
    "Compute Factored OT and exact OT solutions",
    "------------------------------------------",
    "%% EMD",
    "%% factored OT OT",
    "%%",
    "Plot factored OT and exact OT solutions",
    "---------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labeled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "Gaussian (linear) Monge mapping estimation",
    "Gaussian (linear) GW mapping estimation",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "Monge mapping",
    "gaussian GW mapping",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "Labels",
    "Ticks",
    "##############################################################################",
    "Spherical Sliced Wasserstein for different seeds and number of projections",
    "--------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Spherical Sliced Wasserstein",
    "---------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "%%",
    "plot the transported mass",
    "-------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------------------------------------------------------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------------------",
    "",
    "The OT plan is plotted as a function of $\\gamma$ that is the inverse of the",
    "weight on the marginal relaxations.",
    "%% fully relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for UOT l2",
    "-----------------------------------",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-----------------------------------------",
    "%% semi-relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for semi-relaxed UOT l2",
    "------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Compute entropic kl-regularized UOT, kl- and l2-regularized UOT",
    "-----------",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "----------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "--------------------------------------------------------",
    "The adjacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "-------------------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating dual variables for entropic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated entropic OT plan",
    "-----------------------------------",
    "%%",
    "Estimating dual variables for quadratic OT",
    "------------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated quadratic OT plan",
    "------------------------------------",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "----------------------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "---------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "-----------------------------------------",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "--------------------------------------------------",
    "#############################################################################",
    "Plotting the reweighted source distribution",
    "-------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating deep dual variables for entropic OT",
    "----------------------------------------------",
    "define the MLP model",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the density on target for a given source sample",
    "----------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Gradient descent",
    "----------------",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "pl.subplot(3, 3, i + 1)",
    "ax = pl.axes(projection='3d')",
    "ax.axis(\"off\")",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "compute OT sparsity level",
    "Methods using Sinkhorn projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Compute GW with scalable stochastic methods with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "############################################################################",
    "",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "-----------------------------------------------------------------------------------------------",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability.",
    "Visualize samples",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the Gromov-Wasserstein dictionary from the dataset",
    "-----------------------------------------------------------",
    "visualize loss evolution over epochs",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "Continuous connections between nodes of the atoms are colored in shades of grey (1: dark / 2: white)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Compute the 2D representation of the unmixing living in the 2-simplex of probability",
    "############################################################################",
    "",
    "Endow the dataset with node features",
    "------------------------------------",
    "We follow this feature assignment on all nodes of a graph depending on its label/number of clusters",
    "1 cluster --> 0 as nodes feature",
    "2 clusters --> 1 as nodes feature",
    "3 clusters --> 2 as nodes feature",
    "features are one-hot encoded following these assignments",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate a Fused Gromov-Wasserstein dictionary from the dataset of attributed graphs",
    "------------------------------------------------------------------------------------",
    "visualize loss evolution",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "scaled_F = 2 * (Fatom - min_features) / (max_features - min_features)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Visualize unmixings in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "Computing FGW and GW",
    "reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "visu OT matrix",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their entropic-regularized semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW_e(C2, h2, C3)",
    "2) srGW_e(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the entropic-regularized semi-relaxed Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the entropic srGW matching.",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW_e(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the entropic semi-relaxed Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "############################################################################",
    "",
    "Generate graphs",
    "--------------------------------------------------------------------------",
    "",
    "Create two graphs following Stochastic Block models of 2 and 3 clusters.",
    "Add weights on the edges for visualization later on",
    "setup for graph visualization",
    "get graphs partition and their coloring",
    "############################################################################",
    "",
    "Compute their quantized Gromov-Wasserstein distance without using the wrapper",
    "---------------------------------------------------------",
    "",
    "We detail next the steps implemented within the wrapper that preprocess graphs",
    "to form partitioned graphs, which are then passed as input to the generic qFGW solver.",
    "1-a) Partition C1 and C2 in 2 and 3 clusters respectively using Louvain",
    "algorithm from Networkx. Then encode these partitions via vectors of assignments.",
    "1-b) Select representant in each partition using the Pagerank algorithm",
    "implementation from networkx.",
    "1-c) Formate partitions such that:",
    "CR contains relations between representants in each space.",
    "list_R contains relations between samples and representants within each partition.",
    "list_h contains samples relative importance within each partition.",
    "1-d) call to partitioned quantized gromov-wasserstein solver",
    "Visualization of the graph pre-processing",
    "############################################################################",
    "",
    "Compute the quantized Gromov-Wasserstein distance using the wrapper",
    "---------------------------------------------------------",
    "",
    "Compute qGW(spC1, h1, spC2, h2). We also illustrate the use of auxiliary matrices",
    "such that the adjacency matrices `C1_aux=C1` and `C2_aux=C2` to partition the graph using",
    "Louvain algorithm, and the Pagerank algorithm for selecting representant within",
    "each partition. Notice that `C1_aux` and `C2_aux` are optional, if they are not",
    "specified these pre-processing algorithms will be applied to spC2 and spC3.",
    "no node features are considered on this synthetic dataset. Hence we simply",
    "let F1, F2 = None and set alpha = 1.",
    "############################################################################",
    "",
    "Visualization of the quantized Gromov-Wasserstein matching",
    "--------------------------------------------------------------",
    "",
    "We color nodes of the graph based on the respective partition of each graph.",
    "On the first plot we illustrate the qGW matching between both shortest path matrices.",
    "While the GW matching across representants of each space is illustrated on the right.",
    "get graphs partition and their coloring",
    "############################################################################",
    "",
    "Generate attributed point clouds",
    "--------------------------------------------------------------------------",
    "",
    "Create two attributed point clouds representing curves in 2D and 3D respectively,",
    "whose samples are further associated to various color intensities.",
    "Generate 2D and 3D curves",
    "Source and target distribution across spaces encoded respectively via their",
    "squared euclidean distance matrices.",
    "Further associated to color intensity features derived from z",
    "############################################################################",
    "",
    "Visualize partitioned attributed point clouds",
    "--------------------------------------------------------------------------",
    "",
    "Compute the partitioning and representant selection further used within",
    "qFGW wrapper, both provided by a K-means algorithm. Then visualize partitioned spaces.",
    "Plot the source and target samples as distributions",
    "############################################################################",
    "",
    "Compute the quantized Fused Gromov-Wasserstein distance between samples using the wrapper",
    "---------------------------------------------------------",
    "",
    "Compute qFGW(X, FX, hX, Y, FY, HY), setting the trade-off parameter between",
    "structures and features `alpha=0.5`. This solver considers a squared euclidean structure",
    "for each distribution X and Y, and partition each of them into 4 clusters using",
    "the K-means algorithm before computing qFGW.",
    "Plot low rank GW with different ranks",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create 2 classes of stochastic block models (SBM) graphs with 1 block and 2 blocks respectively.",
    "edge probabilities for the SBMs",
    "block sizes",
    "node features",
    "split the data into train and test sets",
    "%%",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot one graph of each class",
    "%%",
    "#############################################################################",
    "Pooling architecture using the TFGW layer",
    "---------",
    "#############################################################################",
    "Graph classification training",
    "---------",
    "store latent embeddings and classes for TSNE visualization",
    "store last classes and embeddings for TSNE visualization",
    "Test",
    "%%",
    "#############################################################################",
    "TSNE visualization of graph classification",
    "---------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "Compute pairwise euclidean distance between node features",
    "############################################################################",
    "",
    "Compute their Fused Gromov-Wasserstein distances",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "Alternated Bregman Projected Gradient algorithm with Kullback-Leibler as proximal operator",
    "compute OT sparsity level",
    "Methods using Sinkhorn/Bregman projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Visualization of the Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the FGW matchings",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "For each matching, all node sizes are proportionnal to their mass computed",
    "from marginals of the OT plan to illustrate potential feasibility errors.",
    "NB: colors refer to clusters - not to node features",
    "Add weights on the edges for visualization later on",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "--------------------------------------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW(C2, h2, C3)",
    "2) srGW(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Gromov-Wasserstein matchings",
    "--------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srGW matching",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "-----------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Fused Gromov-Wasserstein matchings",
    "--------------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Authors: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "%%",
    "Define Gaussian Covariances and distributions",
    "---------------------------------------------",
    "%%",
    "Plot the distributions",
    "----------------------",
    "pl.scatter(mu[0],mu[1],color=color, marker='x')",
    "%%",
    "Compute Bures-Wasserstein barycenters and plot them",
    "-------------------------------------------",
    "basis for bilinear interpolation",
    "weights are constructed by bilinear interpolation",
    "-*- coding: utf-8 -*-",
    "Authors: Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "%%",
    "General Parameters",
    "------------------",
    "%%",
    "Generate Data",
    "-------------",
    "%%",
    "Inspect generated distributions",
    "-------------------------------",
    "%%",
    "Interpolating Empirical Distributions",
    "-------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#######################",
    "Generate and plot data",
    "----------------------",
    "Input measures",
    "Input measure locations in their respective 2D spaces",
    "Input measure weights",
    "Projections 3D -> 2D",
    "Barycenter weights",
    "Number of barycenter points to compute",
    "Send the input measures into 3D space for visualization",
    "Plot the input data",
    "################################",
    "Barycenter computation and plot",
    "-------------------------------",
    "############################",
    "Plotting projection matches",
    "---------------------------",
    "#############################################",
    "Rotation animation",
    "--------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Authors: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data",
    "-------------",
    "%%",
    "Compute free support Wasserstein barycenter",
    "-------------------------------------------",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "%%",
    "Compute free support Sinkhorn barycenter",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "make sure TF doesn't allocate entire GPU",
    "allow numpy API for TF",
    "Author: Laur\u00e8ne DAVID <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test computation of low rank cost matrices M1 and M2",
    "test low rank sinkhorn",
    "check constraints for P",
    "check if lazy_plan is equal to the fully computed plan",
    "check if value_linear is correct with its original formula",
    "check warn parameter when Dykstra algorithm doesn't converge",
    "test lowrank inits",
    "test ImportError if init=\"kmeans\" and sklearn not imported",
    "check constraints for P",
    "Test warning for value of alpha",
    "Test lr sinkhorn with different init strategies",
    "check constraints for P",
    "Test low rank sinkhorn for different backends",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "options for reg_m",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check if the marginals come close to the true ones when large reg",
    "check if mm_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test when G0 is given",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "check constraints",
    "test weak ot solver for different backends",
    "check constraints",
    "check constraints",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "generate gaussian dataset",
    "compute first 3 components with BCD",
    "test that U contains the principal components",
    "compute first 3 components with MM",
    "test that U contains the principal components",
    "compute last 3 components",
    "test that U contains the last principal components",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "chaeck that identity is recovered",
    "check G is identity",
    "check constraints",
    "test weak ot solver for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check transported mass",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test binary_search_circle and wasserstein_circle give similar results as emd",
    "check loss is similar",
    "test semidiscrete_wasserstein2_unif_circle versus wasserstein_circle",
    "w_u = rng.uniform(0., 1., n)",
    "w_u = w_u / w_u.sum()",
    "check loss is similar",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "set readable ids for each param",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "Note, gradients aer invariant to change in constant so we center them",
    "solve unif weights",
    "solve signe weights",
    "solve in backend",
    "test not implemented and check raise",
    "check some attributes",
    "solve in backend",
    "solve in backend",
    "test not implemented and check raise",
    "detect partial not implemented and error detect in value",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve signe weights",
    "test solve_sample when is_Lazy = False",
    "solve signe weights",
    "check some attributes (no need )",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "create a lazy tensor",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "For each column of X, find top max_nz values and",
    "their corresponding indices. This incurs a sort.",
    "Project the top max_nz values onto the simplex.",
    "This incurs a second sort.",
    "Put the projection of max_nz_values to their original indices",
    "and set all other values zero.",
    "check that two versions produce consistent results",
    "test timing",
    "np.testing.assert_allclose(0.1, t, rtol=1e-1, atol=1e-1)",
    "very slow macos github action equality not possible",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "test print",
    "tets get citation",
    "i,j can be integers or slices, x1,x2 have to be passed as keyword arguments",
    "create a lazy tensor",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "total sum",
    "sum over axis 0",
    "sum over axis 1",
    "test otehr reduction function",
    "test 3D tensors",
    "create a lazy tensor",
    "total sum",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "labels are shifted",
    "labels are shifted but the shift if expected",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check this only if GPU is available",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Barycenter initialization",
    "Obvious barycenter locations. Take a look on test_ot.py, test_free_support_barycenter",
    "Calculate free support barycenter w/ Sinkhorn algorithm. We set the entropic regularization",
    "term to 1, but this should be, in general, fine-tuned to the problem.",
    "Verifies if calculated barycenter matches ground-truth",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "assymetric loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "First image",
    "Second image",
    "Creating matrix A containing all distributions",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check this only if GPU is available",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "call with log = False",
    "check equality of plans",
    "check error on wrong metric",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "Test sinkhorn divergence",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "Compute loss using dmmot_monge_1dgrid_loss",
    "Compute loss using exact OT solver with absolute ground metric",
    "deal with C-contiguous error from tensorflow backend (not sure why)",
    "compute loss",
    "test discrete_mmot_converge result",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for mass mismatch",
    "check with empty inputs",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd2 and emd2 with openmp for simple identity",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two Diracs",
    "obvious barycenter location between two Diracs",
    "obvious barycenter location between two 2D Diracs",
    "test without log and no init",
    "test with log and init",
    "obvious barycenter between two Diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test that types mathcing different backends in input raise an error",
    "Check that subclassing a numpy array does not break get_backend",
    "note: This is only tested for numpy as this is hard to be consistent",
    "with other backends",
    "Sparse tensors test",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "test without log but with X_classes, a, b and other init method",
    "'new' input isn't new, so should be equal to target",
    "test with no log but classes",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Test weights argument",
    "test with closed form for diagonal covariance matrices",
    "no log",
    "no log + skewness",
    "test the other way around (target to source)",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict",
    "predict on batch",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict on batch",
    "Test the TW layer by passing two graphs through the layer and doing backpropagation.",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test couplings",
    "test marginal distributions",
    "test entropic COOT distance",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "raise value error of method sinkhorn",
    "raise value error for epsilon",
    "raise value error for alpha",
    "initialize warmstart",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test with coot distance",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "prepare semi-supervised labels",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "prepare semi-supervised labels",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test diffeernt transform and inverse transform",
    "test diffeernt transform",
    "test its computed",
    "test dimensions of coupling",
    "test coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "Mapping tests",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "'new' input isn't new, so should be equal to target",
    "test all margin constraints with gaussian similarity and disp regularisation",
    "previously used implementation for the cost estimator",
    "new vectorized implementation for the cost estimator",
    "hard-coded params from the original code",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "Author: Laur\u00e8ne DAVID <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test flat product operator",
    "test value",
    "test low rank gromov wasserstein",
    "check constraints for P",
    "check if lazy_plan is equal to the fully computed plan",
    "check warn parameter when low rank GW algorithm doesn't converge",
    "check warn parameter when Dykstra algorithm doesn't converge",
    "Test warning for value of alpha and rank",
    "Test lr sinkhorn with different init strategies",
    "check constraints for P",
    "Test low rank sinkhorn for different backends",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: compare reconstruction error using initial dictionary and dictionary learned using this initialization",
    "> Compute initial reconstruction of samples on this random dictionary without backend",
    "> Learn the dictionary using this init",
    "> Compute reconstruction of samples on learned dictionary without backend",
    "Test: Perform same experiments after going through backend",
    "Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "knowing than the initialization scheme is the same than implemented to set the benchmarked initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "and testing other optimization settings untested until now.",
    "We pass previously estimated dictionaries to speed up the process.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: Compute initial reconstruction of samples on this random dictionary",
    "> Learn a dictionary using this given initialization and check that the reconstruction loss",
    "on the learned dictionary is lower than the one using its initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Compare both",
    "Test: Perform same experiments after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform similar experiment without providing the initial dictionary being an optional input",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: without using adam optimizer, with log and verbose set to True",
    "> Experiment providing previously estimated dictionary to speed up the test compared to providing initial random init.",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "> Compare results with/without backend",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "Tests with marginal_loss = False",
    "check constraints",
    "check constraints",
    "setup",
    "test with 'kl_loss' and log=True",
    "providing init_C, init_Y",
    "add tests with fixed_structures or fixed_features",
    "test edge cases for fgw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "providing init_C",
    "test edge cases for gw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "test sinkhorn",
    "entropic gw and fgw",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "classical gradients",
    "Test with exact line-search",
    "Test with armijo line-search",
    "classical gradients",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "providing init_C",
    "test edge cases for gw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "check constraints",
    "Tests with kl-loss:",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "test correspondance with utils function",
    "add test with 'kl_loss'",
    "test correspondance with utils function",
    "test edge cases for fgw barycenters:",
    "C1 as list",
    "p1, p2 as lists",
    "unique input structure",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "complementary tests for utils functions",
    "tests for edge cases of the graph partitioning",
    "tests for edge cases of the representant selection",
    "tests for edge cases of the format_partitioned_graph function",
    "Tests in qFGW solvers",
    "for non admissible values of alpha",
    "for non-consistent feature information provided",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "tests for edge cases of the representant selection",
    "check constraints",
    "The inner test T_global[i, j] != 0. can lead to different",
    "computation of 1D OT computations between partition depending",
    "on the different float errors across backend",
    "complementary tests for utils functions",
    "tests for edge cases of the format_partitioned_graph function",
    "for non-consistent feature information provided",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "html_css_files = [\"css/custom.css\"]",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.9.3": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "missing_labels is a (ns, nt) matrix of {0, 1} such that",
    "the cells (i, j) has 0 iff either ys[i] or yt[j] is masked",
    "labels_match is a (ns, nt) matrix of {True, False} such that",
    "the cells (i, j) has False if ys[i] != yt[i]",
    "cost correction is a (ns, nt) matrix of {-Inf, float, Inf} such",
    "that he cells (i, j) has -Inf where there's no correction necessary",
    "by 'correction' we mean setting cost to a large value when",
    "labels do not match",
    "we suppress potential RuntimeWarning caused by Inf multiplication",
    "(as we explicitly cover potential NANs later)",
    "this operation is necessary because 0 * Inf = NAN",
    "thus is irrelevant when limit_max is finite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "init uniform",
    "weak OT loss",
    "weak OT gradient",
    "solve with conditional gradient and return solution",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "solve the barycenter",
    "solve OT with template",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "Main function",
    "constant input variables",
    "measures on rows and columns",
    "pre-calculate cost constants",
    "initialize coupling and dual vectors",
    "initialize log",
    "update sample coupling",
    "update feature coupling",
    "update error",
    "COOT part",
    "Entropic part",
    "sanity check",
    "measures on rows and columns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "convert to humpy",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "convert back to backend",
    "Next 3 lines equivalent to K=nx.exp(-M/reg), but faster to compute",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "optimise the plan",
    "optimise the values phi and the gradients G",
    "convert back to backend",
    "lower bound",
    "upper bound",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "###############################################################################",
    "Losses for stochastic optimization",
    "###############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Jakub Zadrozny <jakub.r.zadrozny@gmail.com>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "marginals",
    "print iterations",
    "loop",
    "Solve transport",
    "Solve PCA",
    "block coordinate descent",
    "majorization-minimization",
    "stop or not",
    "print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "it's necessary to check boundary condition here for the coefficient",
    "as the callback could be evaluated for negative value of alpha by",
    "`scalar_search_armijo` function here:",
    "",
    "https://github.com/scipy/scipy/blob/11509c4a98edded6c59423ac44ca1b7f28fba1fd/scipy/optimize/linesearch.py#L686",
    "",
    "see more details https://github.com/PythonOT/POT/issues/502",
    "The callable function operates on nx backend",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "to not change G0 in place.",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "get minimum by rows as binary mask",
    "return by default an empty inner_log",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "V[nx.newaxis, :], max_nz, z, axis=1).ravel()",
    "For each row of V, find top max_nz values; arrange the",
    "corresponding column indices such that their values are",
    "in a descending order.",
    "Extract the top max_nz values for each row",
    "and then project to simplex.",
    "rho = nx.count_nonzero(cond, axis=1)",
    "Put the projection of max_nz_values to their original column indices",
    "while keeping other values zero.",
    "in Jax, we need to use the `at` property of `jax.numpy.ndarray`",
    "to do in-place array modificatons.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "I assume that other solvers may return directly",
    "some primal objects?",
    "In the code below, let's define the main quantities",
    "that may be of interest to users.",
    "An OT solver returns an object that inherits from OTResult",
    "(e.g. SinkhornOTResult) and implements the relevant",
    "methods (e.g. \"plan\" and \"lazy_plan\" but not \"sparse_plan\", etc.).",
    "log is a dictionary containing potential information about the solver",
    "Dual potentials --------------------------------------------",
    "Transport plan -------------------------------------------",
    "N.B.: We may catch out-of-memory errors and suggest",
    "the use of lazy_plan or sparse_plan when appropriate.",
    "Loss values --------------------------------",
    "Marginal constraints -------------------------",
    "Barycentric mappings -------------------------",
    "Return the displacement vectors as an array",
    "that has the same shape as \"xa\"/\"xb\" (for samples)",
    "or \"a\"/\"b\" * D (for images)?",
    "# Wasserstein barycenters ----------------------",
    "@property",
    "def masses(self):",
    "\"\"\"Masses for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "@property",
    "def samples(self):",
    "\"\"\"Sample locations for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "Miscellaneous --------------------------------",
    "The string below refers to the POT library:",
    "successor methods may concatenate the relevant references",
    "to the original definitions, solvers and underlying numerical backends.",
    "set attributes for named arguments/arrays",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "Tianlin Liu <t.liu@unibas.ch>",
    "For each column of X, find entries that are not among the top max_nz.",
    "Set these entries to -inf.",
    "Project the scaled X onto the simplex with sparsity constraint.",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "convert to humpy",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for EMD solver",
    "default values for exact unbalanced OT",
    "default values for sinkhorn",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for solver",
    "default values for EMD solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['log_u'], log['log_v'])  #TODO",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v'])",
    "default values for solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "for uniform weights",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "lazy solver of memory complexity O(n)",
    "lazy OT plan",
    "automatic solver",
    "force O(n) memory efficient solver",
    "force pre-computed cost matrix",
    "use multiscale solver",
    "One can play with speed (small scaling factor) and precision (scaling close to 1)",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "recover the lazy low rank plan",
    "recover the full low rank plan",
    "recover the squared Gaussian Bures-Wasserstein distance",
    "recover the squared Wasserstein distances",
    "compute cost matrix M and use solve function",
    "Detect backend",
    "default values for solutions",
    "return scaled potentials (to be consistent with other solvers)",
    "compute potentials",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test if sklearn is installed for linux-minimal-deps",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "First low rank decomposition of the cost matrix (A)",
    "Second low rank decomposition of the cost matrix (B)",
    "POT backend if None",
    "----------------- Initialisation of Dykstra algorithm -----------------",
    "--------------------- Dykstra algorithm -------------------------",
    "See Section 3.3 - \"Algorithm 2 LR-Dykstra\" in paper",
    "Compute u^{(1)} and u^{(2)}",
    "Compute g, g^{(3)}_1 and update \\tilde{g}",
    "Compute new value of g with \\prod",
    "Compute v^{(1)} and v^{(2)}",
    "Compute q^{(1)}, q^{(2)} and q^{(3)}_2",
    "Update values of \\tilde{v}^{(1)}, \\tilde{v}^{(2)} and \\tilde{g}",
    "Compute error",
    "Compute low rank matrices Q, R",
    "POT backend",
    "Initialize weights a, b",
    "Compute rank (see Section 3.1, def 1)",
    "Dykstra won't converge if 1/rank < alpha (see Section 3.2)",
    "Low rank decomposition of the sqeuclidean cost matrix",
    "Initialize the low rank matrices Q, R, g",
    "Gamma initialization",
    "-------------------------- Low rank algorithm ------------------------------",
    "see \"Section 3.3, Algorithm 3 LOT\"",
    "Compute C*R dot using the lr decomposition of C",
    "Compute C.T * Q using the lr decomposition of C",
    "Compute omega",
    "Rescale gamma at each iteration",
    "LR Dykstra algorithm",
    "----------------- Compute lazy_plan, value and value_linear  ------------------",
    "see \"Section 3.2: The Low-rank OT Problem\" in the paper",
    "Compute lazy plan (using LazyTensor class)",
    "Compute value_linear (using trace formula)",
    "Compute value with entropy reg (see \"Section 3.2\" in the paper)",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Mapping between argument types and the existing backend",
    "check that all arguments matched or not the type",
    "Otherwise return an error",
    "check that some arrays given",
    "convert batch of tensors to numpy",
    "convert a tensor to numpy",
    "convert batch of arrays from numpy",
    "convert an array from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "Only register jax backend if it is installed",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Since version 1.11.0, interpolation is available",
    "Else, use numpy",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "Only register torch backend if it is installed",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "Only register cp backend if it is installed",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "todo(okachaiev): replace this with a more reasonable implementation",
    "Only register tensorflow backend if it is installed",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Compute the mean barycenter",
    "Init the covariance barycenter",
    "fixed point update",
    "check convergence",
    "ensure that Cov_s is the largest covariance matrix",
    "that is m >= n",
    "compte and sort eigenvalues decerasingly",
    "compute the gaussien Gromov-Wasserstein distance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "compute the gaussien Gromov-Wasserstein dis",
    "estimate mean and covariance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "select the sign of the eigenvalues",
    "compute the gaussien Gromov-Wasserstein dis",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "compute loss",
    "compute gradient",
    "convert to numpy",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "after that we are all in torch",
    "set blur value and p",
    "force gradients for computing dual",
    "compute value",
    "get dual potentials",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "in case of multiple historgrams",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "oldidx = nx.copy(idx)",
    "the above terminates when any entry in idx equals the corresponding",
    "value in dims this leaves other dimensions incomplete; the remaining",
    "terms of the dual solution must be filled-in",
    "define forward/backward relations for pytorch",
    "function body here",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "quantiles of F_u evaluated in F_v^\\theta",
    "Deal with 1",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "Put negative values at the end",
    "Compute absciss",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "Compute icdf",
    "can probably be improved by computing only relevant values",
    "Code inspired from https://gitlab.gwdg.de/shundri/circularOT/-/tree/master/",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "variable change matrix to reduce the problem to a Wasserstein Barycenter (WB)",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check first marginal of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "the new cost can be deduced from the line search quadratic function",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "Correct order mistake in Equation 14 in [12]",
    "Correct order mistake in Equation 15 in [12]",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Define gradients",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random euclidean distance matrix (if not provided by user)",
    "Initialization of Y",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "simple get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "init marginals if set as None",
    "compute separate terms for gradients and log",
    "the new cost is deduced from the line search quadratic function",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Cedric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Handle backend of non-optional arguments",
    "Handle backend of optional arguments",
    "Initialize randomly structures of dictionary atoms based on samples",
    "batch sampling",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "Initialization for our numpy implementation of adam optimizer",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "Initialize randomly structures of dictionary atoms based on samples",
    "Initialize randomly features of dictionary atoms based on samples distribution by feature component",
    "Batch iterations",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "modeling (C,Y)",
    "constants depending on q",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "structure",
    "feature",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "polynomial coefficients from quadratic objective (with respect to w) on structures",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "polynomial coefficient from quadratic objective (with respect to w) on features",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "%%",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "%%",
    "Comparison of the OT matrices",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "use fast 1D solver",
    "Equivalent to",
    "G0 = ot.emd(a, b, M)",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: ../_static/images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have access to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan visualization",
    "`````````````````````````````````",
    "",
    "A good visualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: ../_static/images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Empirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "pl.xlim((-7,23))",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "pl.xlim((-7,23))",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "########################################################################################",
    "Compare the Euclidean Wasserstein distance with the Wasserstein distance on the  circle",
    "---------------------------------------------------------------------------------------",
    "This examples illustrates the periodicity of the Wasserstein distance on the circle.",
    "We choose as target distribution a von Mises distribution with mean :math:`\\mu_{\\mathrm{target}}`",
    "and :math:`\\kappa=20`. Then, we compare the distances with samples obtained from a von Mises distribution",
    "with parameters :math:`\\mu_{\\mathrm{source}}` and :math:`\\kappa=20`.",
    "The Wasserstein distance on the circle takes into account the periodicity",
    "and attains its maximum in :math:`\\mu_{\\mathrm{target}}+1` (the antipodal point) contrary to the",
    "Euclidean version.",
    "%% Compute and plot distributions",
    "np.random.vonmises deals with data on [-pi, pi[",
    "Put data on S^1=[0,1[",
    "#######################################################################",
    "Wasserstein distance between von Mises and uniform for different kappa",
    "----------------------------------------------------------------------",
    "When :math:`\\kappa=0`, the von Mises distribution is the uniform distribution on :math:`S^1`.",
    "%% Compute Wasserstein between Von Mises and uniform",
    "np.random.vonmises deals with data on [-pi, pi[",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with squared l2 regularization",
    "%% Sparsity-constrained OT",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Generating the fitting data",
    "%%",
    "Fitting the Nearest Brenier Potential",
    "%%",
    "Plotting the images of the source data",
    "%%",
    "Computing the predictions (images by nabla phi) for random samples of the source distribution",
    "%%",
    "Plot predictions for the gradient of the lower-bounding potential",
    "%%",
    "Plot predictions for the gradient of the upper-bounding potential",
    "-*- coding: utf-8 -*-",
    "Author: Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Plot data",
    "-------------",
    "#############################################################################",
    "Compute EWCA",
    "-------------",
    "#############################################################################",
    "Plot data, first component, and projected data",
    "-------------",
    "#############################################################################",
    "Plot transport plan",
    "-------------",
    "-*- coding: utf-8 -*-",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "Gaussian distribution",
    "Source and target distribution",
    "#############################################################################",
    "Solve Low rank sinkhorn",
    "------------",
    "%%",
    "Solve low rank sinkhorn",
    "#############################################################################",
    "Sinkhorn vs Low Rank Sinkhorn",
    "-----------------------",
    "Compare Sinkhorn and Low rank sinkhorn with different regularizations and ranks.",
    "%% Sinkhorn",
    "Compute cost matrix for sinkhorn OT",
    "Solve sinkhorn with different regularizations using ot.solve",
    "%% Low rank sinkhorn",
    "Solve low rank sinkhorn with different ranks using ot.solve_sample",
    "%%",
    "Plot sinkhorn vs low rank sinkhorn",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generate data",
    "-------------",
    "The source and clean target matrices are generated by",
    ":math:`X_{i,j} = \\cos(\\frac{i}{n_1} \\pi) + \\cos(\\frac{j}{d_1} \\pi)` and",
    ":math:`Y_{i,j} = \\cos(\\frac{i}{n_2} \\pi) + \\cos(\\frac{j}{d_2} \\pi)`.",
    "The target matrix is then contaminated by adding 5 row outliers.",
    "Intuitively, we expect that the estimated sample distribution should ignore these outliers,",
    "i.e. their weights should be zero.",
    "Generate clean target data mixed with outliers",
    "%%",
    "Optimize the COOT distance with respect to the sample marginal distribution",
    "---------------------------------------------------------------------------",
    "Estimated sample marginal distribution and training loss curve",
    "%%",
    "Visualizing the row and column alignments with the estimated sample marginal distribution",
    "-----------------------------------------------------------------------------------------",
    "",
    "Clearly, the learned marginal distribution completely and successfully ignores the 5 outliers.",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%% Load modules",
    "%%",
    "Data for logo",
    "-------------",
    "Letter P",
    "Letter O",
    "Scaling and translation for letter O",
    "Letter T",
    "Translating the T",
    "Concatenate all letters",
    "Horizontal and vertical scaling",
    "%%",
    "Plot the logo (clear background)",
    "--------------------------------",
    "Solve OT problem between the points",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo.png', dpi=150, transparent=True, bbox_inches='tight')",
    "%%",
    "Plot the logo (dark background)",
    "--------------------------------",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo_dark.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo_dark.png', dpi=150, transparent=True, bbox_inches='tight')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generating two random matrices",
    "%%",
    "Visualizing the matrices",
    "%%",
    "Visualizing the alignments of rows and columns, and calculating the CO-Optimal Transport distance",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data an plot it",
    "------------------------",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "#############################################################################",
    "Compute Weak OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% Weak OT",
    "#############################################################################",
    "Plot weak OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "%%",
    "Generating 2 distributions",
    "-----",
    "Gaussian distributions",
    "%%",
    "Minimize the distances among distributions, identify the Barycenter",
    "-----",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "L2 Iteration",
    "%%",
    "Compare Barycenters in both methods",
    "-----",
    "pl.plot(x, barys[i], 'g-*')",
    "%%",
    "More than 2 distributions",
    "--------------------------------------------------",
    "Generate 7 pseudorandom gaussian distributions with 50 bins.",
    "%%",
    "Minimizing Distances Among Many Distributions",
    "---------------",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "Perform gradient descent optimization using the d-MMOT method.",
    "after minimization, any distribution can be used as a estimate of barycenter.",
    "Compute 1D Wasserstein barycenter using the L2/LP method",
    "%%",
    "Compare Barycenters in both methods",
    "---------",
    "%%",
    "Compare with original distributions",
    "---------",
    "pl.plot(x, barys[i], 'g')",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinuous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinuous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data an plot it",
    "------------------------",
    "parameters and data generation",
    "%% plot samples",
    "%%",
    "Compute Factored OT and exact OT solutions",
    "------------------------------------------",
    "%% EMD",
    "%% factored OT OT",
    "%%",
    "Plot factored OT and exact OT solutions",
    "---------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labeled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "Gaussian (linear) Monge mapping estimation",
    "Gaussian (linear) GW mapping estimation",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "Monge mapping",
    "gaussian GW mapping",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "Labels",
    "Ticks",
    "##############################################################################",
    "Spherical Sliced Wasserstein for different seeds and number of projections",
    "--------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Spherical Sliced Wasserstein",
    "---------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "%%",
    "plot the transported mass",
    "-------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------------------------------------------------------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------------------",
    "",
    "The OT plan is plotted as a function of $\\gamma$ that is the inverse of the",
    "weight on the marginal relaxations.",
    "%% fully relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for UOT l2",
    "-----------------------------------",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-----------------------------------------",
    "%% semi-relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for semi-relaxed UOT l2",
    "------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Compute entropic kl-regularized UOT, kl- and l2-regularized UOT",
    "-----------",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "----------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "--------------------------------------------------------",
    "The adjacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "-------------------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating dual variables for entropic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated entropic OT plan",
    "-----------------------------------",
    "%%",
    "Estimating dual variables for quadratic OT",
    "------------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated quadratic OT plan",
    "------------------------------------",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "----------------------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "---------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "-----------------------------------------",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "--------------------------------------------------",
    "#############################################################################",
    "Plotting the reweighted source distribution",
    "-------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating deep dual variables for entropic OT",
    "----------------------------------------------",
    "define the MLP model",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the density on target for a given source sample",
    "----------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Gradient descent",
    "----------------",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "pl.subplot(3, 3, i + 1)",
    "ax = pl.axes(projection='3d')",
    "ax.axis(\"off\")",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "compute OT sparsity level",
    "Methods using Sinkhorn projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Compute GW with scalable stochastic methods with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "############################################################################",
    "",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "-----------------------------------------------------------------------------------------------",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability.",
    "Visualize samples",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the Gromov-Wasserstein dictionary from the dataset",
    "-----------------------------------------------------------",
    "visualize loss evolution over epochs",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "Continuous connections between nodes of the atoms are colored in shades of grey (1: dark / 2: white)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Compute the 2D representation of the unmixing living in the 2-simplex of probability",
    "############################################################################",
    "",
    "Endow the dataset with node features",
    "------------------------------------",
    "We follow this feature assignment on all nodes of a graph depending on its label/number of clusters",
    "1 cluster --> 0 as nodes feature",
    "2 clusters --> 1 as nodes feature",
    "3 clusters --> 2 as nodes feature",
    "features are one-hot encoded following these assignments",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate a Fused Gromov-Wasserstein dictionary from the dataset of attributed graphs",
    "------------------------------------------------------------------------------------",
    "visualize loss evolution",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "scaled_F = 2 * (Fatom - min_features) / (max_features - min_features)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Visualize unmixings in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "Computing FGW and GW",
    "reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "visu OT matrix",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their entropic-regularized semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW_e(C2, h2, C3)",
    "2) srGW_e(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the entropic-regularized semi-relaxed Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the entropic srGW matching.",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW_e(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the entropic semi-relaxed Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create 2 classes of stochastic block models (SBM) graphs with 1 block and 2 blocks respectively.",
    "edge probabilities for the SBMs",
    "block sizes",
    "node features",
    "split the data into train and test sets",
    "%%",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot one graph of each class",
    "%%",
    "#############################################################################",
    "Pooling architecture using the TFGW layer",
    "---------",
    "#############################################################################",
    "Graph classification training",
    "---------",
    "store latent embeddings and classes for TSNE visualization",
    "store last classes and embeddings for TSNE visualization",
    "Test",
    "%%",
    "#############################################################################",
    "TSNE visualization of graph classification",
    "---------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "Compute pairwise euclidean distance between node features",
    "############################################################################",
    "",
    "Compute their Fused Gromov-Wasserstein distances",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "Alternated Bregman Projected Gradient algorithm with Kullback-Leibler as proximal operator",
    "compute OT sparsity level",
    "Methods using Sinkhorn/Bregman projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Visualization of the Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the FGW matchings",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "For each matching, all node sizes are proportionnal to their mass computed",
    "from marginals of the OT plan to illustrate potential feasibility errors.",
    "NB: colors refer to clusters - not to node features",
    "Add weights on the edges for visualization later on",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "--------------------------------------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW(C2, h2, C3)",
    "2) srGW(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Gromov-Wasserstein matchings",
    "--------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srGW matching",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "-----------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Fused Gromov-Wasserstein matchings",
    "--------------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Authors: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "%%",
    "Define Gaussian Covariances and distributions",
    "---------------------------------------------",
    "%%",
    "Plot the distributions",
    "----------------------",
    "pl.scatter(mu[0],mu[1],color=color, marker='x')",
    "%%",
    "Compute Bures-Wasserstein barycenters and plot them",
    "-------------------------------------------",
    "basis for bilinear interpolation",
    "weights are constructed by bilinear interpolation",
    "-*- coding: utf-8 -*-",
    "Authors: Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "%%",
    "General Parameters",
    "------------------",
    "%%",
    "Generate Data",
    "-------------",
    "%%",
    "Inspect generated distributions",
    "-------------------------------",
    "%%",
    "Interpolating Empirical Distributions",
    "-------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#######################",
    "Generate and plot data",
    "----------------------",
    "Input measures",
    "Input measure locations in their respective 2D spaces",
    "Input measure weights",
    "Projections 3D -> 2D",
    "Barycenter weights",
    "Number of barycenter points to compute",
    "Send the input measures into 3D space for visualization",
    "Plot the input data",
    "################################",
    "Barycenter computation and plot",
    "-------------------------------",
    "############################",
    "Plotting projection matches",
    "---------------------------",
    "#############################################",
    "Rotation animation",
    "--------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Authors: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data",
    "-------------",
    "%%",
    "Compute free support Wasserstein barycenter",
    "-------------------------------------------",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "%%",
    "Compute free support Sinkhorn barycenter",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "make sure TF doesn't allocate entire GPU",
    "allow numpy API for TF",
    "Author: Laur\u00e8ne DAVID <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test computation of low rank cost matrices M1 and M2",
    "test low rank sinkhorn",
    "check constraints for P",
    "check if lazy_plan is equal to the fully computed plan",
    "check if value_linear is correct with its original formula",
    "check warn parameter when Dykstra algorithm doesn't converge",
    "test lowrank inits",
    "test ImportError if init=\"kmeans\" and sklearn not imported",
    "check constraints for P",
    "Test warning for value of alpha",
    "Test lr sinkhorn with different init strategies",
    "check constraints for P",
    "Test low rank sinkhorn for different backends",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "options for reg_m",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check if the marginals come close to the true ones when large reg",
    "check if mm_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test when G0 is given",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "check constraints",
    "test weak ot solver for different backends",
    "check constraints",
    "check constraints",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "generate gaussian dataset",
    "compute first 3 components with BCD",
    "test that U contains the principal components",
    "compute first 3 components with MM",
    "test that U contains the principal components",
    "compute last 3 components",
    "test that U contains the last principal components",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "chaeck that identity is recovered",
    "check G is identity",
    "check constraints",
    "test weak ot solver for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check transported mass",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test binary_search_circle and wasserstein_circle give similar results as emd",
    "check loss is similar",
    "test semidiscrete_wasserstein2_unif_circle versus wasserstein_circle",
    "w_u = rng.uniform(0., 1., n)",
    "w_u = w_u / w_u.sum()",
    "check loss is similar",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "set readable ids for each param",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "solve unif weights",
    "solve signe weights",
    "solve in backend",
    "test not implemented and check raise",
    "pairs of incompatible divergences",
    "check some attributes",
    "solve in backend",
    "solve in backend",
    "test not implemented and check raise",
    "detect partial not implemented and error detect in value",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve signe weights",
    "test solve_sample when is_Lazy = False",
    "solve signe weights",
    "check some attributes (no need )",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "create a lazy tensor",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "For each column of X, find top max_nz values and",
    "their corresponding indices. This incurs a sort.",
    "Project the top max_nz values onto the simplex.",
    "This incurs a second sort.",
    "Put the projection of max_nz_values to their original indices",
    "and set all other values zero.",
    "check that two versions produce consistent results",
    "test timing",
    "np.testing.assert_allclose(0.1, t, rtol=1e-1, atol=1e-1)",
    "very slow macos github action equality not possible",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "test print",
    "tets get citation",
    "i,j can be integers or slices, x1,x2 have to be passed as keyword arguments",
    "create a lazy tensor",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "total sum",
    "sum over axis 0",
    "sum over axis 1",
    "test otehr reduction function",
    "test 3D tensors",
    "create a lazy tensor",
    "total sum",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "labels are shifted",
    "labels are shifted but the shift if expected",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check this only if GPU is available",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Barycenter initialization",
    "Obvious barycenter locations. Take a look on test_ot.py, test_free_support_barycenter",
    "Calculate free support barycenter w/ Sinkhorn algorithm. We set the entropic regularization",
    "term to 1, but this should be, in general, fine-tuned to the problem.",
    "Verifies if calculated barycenter matches ground-truth",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "assymetric loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "First image",
    "Second image",
    "Creating matrix A containing all distributions",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check this only if GPU is available",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "call with log = False",
    "check equality of plans",
    "check error on wrong metric",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "Test sinkhorn divergence",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "Compute loss using dmmot_monge_1dgrid_loss",
    "Compute loss using exact OT solver with absolute ground metric",
    "deal with C-contiguous error from tensorflow backend (not sure why)",
    "compute loss",
    "test discrete_mmot_converge result",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "classical gradients",
    "Test with exact line-search",
    "Test with armijo line-search",
    "classical gradients",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "Tests with marginal_loss = False",
    "check constraints",
    "check constraints",
    "setup",
    "test with 'kl_loss' and log=True",
    "providing init_C, init_Y",
    "add tests with fixed_structures or fixed_features",
    "check constraints",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "providing init_C",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "providing init_C",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "check constraints",
    "Tests with kl-loss:",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "test correspondance with utils function",
    "add test with 'kl_loss'",
    "test correspondance with utils function",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: compare reconstruction error using initial dictionary and dictionary learned using this initialization",
    "> Compute initial reconstruction of samples on this random dictionary without backend",
    "> Learn the dictionary using this init",
    "> Compute reconstruction of samples on learned dictionary without backend",
    "Test: Perform same experiments after going through backend",
    "Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "knowing than the initialization scheme is the same than implemented to set the benchmarked initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "and testing other optimization settings untested until now.",
    "We pass previously estimated dictionaries to speed up the process.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: Compute initial reconstruction of samples on this random dictionary",
    "> Learn a dictionary using this given initialization and check that the reconstruction loss",
    "on the learned dictionary is lower than the one using its initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Compare both",
    "Test: Perform same experiments after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform similar experiment without providing the initial dictionary being an optional input",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: without using adam optimizer, with log and verbose set to True",
    "> Experiment providing previously estimated dictionary to speed up the test compared to providing initial random init.",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "> Compare results with/without backend",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "test sinkhorn",
    "entropic gw and fgw",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for mass mismatch",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd2 and emd2 with openmp for simple identity",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two Diracs",
    "obvious barycenter location between two Diracs",
    "obvious barycenter location between two 2D Diracs",
    "test without log and no init",
    "test with log and init",
    "obvious barycenter between two Diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test that types mathcing different backends in input raise an error",
    "Check that subclassing a numpy array does not break get_backend",
    "note: This is only tested for numpy as this is hard to be consistent",
    "with other backends",
    "Sparse tensors test",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "test without log but with X_classes, a, b and other init method",
    "'new' input isn't new, so should be equal to target",
    "test with no log but classes",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Test weights argument",
    "test with closed form for diagonal covariance matrices",
    "no log",
    "no log + skewness",
    "test the other way around (target to source)",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict",
    "predict on batch",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict on batch",
    "Test the TW layer by passing two graphs through the layer and doing backpropagation.",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test couplings",
    "test marginal distributions",
    "test entropic COOT distance",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "raise value error of method sinkhorn",
    "raise value error for epsilon",
    "raise value error for alpha",
    "initialize warmstart",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test with coot distance",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "prepare semi-supervised labels",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "Mapping tests",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "'new' input isn't new, so should be equal to target",
    "test all margin constraints with gaussian similarity and disp regularisation",
    "previously used implementation for the cost estimator",
    "new vectorized implementation for the cost estimator",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "html_css_files = [\"css/custom.css\"]",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.9.2": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "zeros where source label is missing (masked with -1)",
    "zeros where labels match",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "init uniform",
    "weak OT loss",
    "weak OT gradient",
    "solve with conditional gradient and return solution",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "solve the barycenter",
    "solve OT with template",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "Main function",
    "constant input variables",
    "measures on rows and columns",
    "pre-calculate cost constants",
    "initialize coupling and dual vectors",
    "initialize log",
    "update sample coupling",
    "update feature coupling",
    "update error",
    "COOT part",
    "Entropic part",
    "sanity check",
    "measures on rows and columns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "convert to humpy",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "convert back to backend",
    "Next 3 lines equivalent to K=nx.exp(-M/reg), but faster to compute",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "optimise the plan",
    "optimise the values phi and the gradients G",
    "convert back to backend",
    "lower bound",
    "upper bound",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "###############################################################################",
    "Losses for stochastic optimization",
    "###############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Jakub Zadrozny <jakub.r.zadrozny@gmail.com>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "marginals",
    "print iterations",
    "loop",
    "Solve transport",
    "Solve PCA",
    "block coordinate descent",
    "majorization-minimization",
    "stop or not",
    "print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "it's necessary to check boundary condition here for the coefficient",
    "as the callback could be evaluated for negative value of alpha by",
    "`scalar_search_armijo` function here:",
    "",
    "https://github.com/scipy/scipy/blob/11509c4a98edded6c59423ac44ca1b7f28fba1fd/scipy/optimize/linesearch.py#L686",
    "",
    "see more details https://github.com/PythonOT/POT/issues/502",
    "The callable function operates on nx backend",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "to not change G0 in place.",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "get minimum by rows as binary mask",
    "return by default an empty inner_log",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "V[nx.newaxis, :], max_nz, z, axis=1).ravel()",
    "For each row of V, find top max_nz values; arrange the",
    "corresponding column indices such that their values are",
    "in a descending order.",
    "Extract the top max_nz values for each row",
    "and then project to simplex.",
    "rho = nx.count_nonzero(cond, axis=1)",
    "Put the projection of max_nz_values to their original column indices",
    "while keeping other values zero.",
    "in Jax, we need to use the `at` property of `jax.numpy.ndarray`",
    "to do in-place array modificatons.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "I assume that other solvers may return directly",
    "some primal objects?",
    "In the code below, let's define the main quantities",
    "that may be of interest to users.",
    "An OT solver returns an object that inherits from OTResult",
    "(e.g. SinkhornOTResult) and implements the relevant",
    "methods (e.g. \"plan\" and \"lazy_plan\" but not \"sparse_plan\", etc.).",
    "log is a dictionary containing potential information about the solver",
    "Dual potentials --------------------------------------------",
    "Transport plan -------------------------------------------",
    "N.B.: We may catch out-of-memory errors and suggest",
    "the use of lazy_plan or sparse_plan when appropriate.",
    "Loss values --------------------------------",
    "Marginal constraints -------------------------",
    "Barycentric mappings -------------------------",
    "Return the displacement vectors as an array",
    "that has the same shape as \"xa\"/\"xb\" (for samples)",
    "or \"a\"/\"b\" * D (for images)?",
    "# Wasserstein barycenters ----------------------",
    "@property",
    "def masses(self):",
    "\"\"\"Masses for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "@property",
    "def samples(self):",
    "\"\"\"Sample locations for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "Miscellaneous --------------------------------",
    "The string below refers to the POT library:",
    "successor methods may concatenate the relevant references",
    "to the original definitions, solvers and underlying numerical backends.",
    "set attributes for named arguments/arrays",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "Tianlin Liu <t.liu@unibas.ch>",
    "For each column of X, find entries that are not among the top max_nz.",
    "Set these entries to -inf.",
    "Project the scaled X onto the simplex with sparsity constraint.",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "convert to humpy",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for EMD solver",
    "default values for exact unbalanced OT",
    "default values for sinkhorn",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for solver",
    "default values for EMD solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "default values for solver",
    "potentials = (log['log_u'], log['log_v'])  #TODO",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v'])",
    "default values for solver",
    "default values for solver",
    "default values for solver",
    "potentials = (log['u'], log['v']) TODO",
    "for uniform weights",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "lazy solver of memory complexity O(n)",
    "lazy OT plan",
    "automatic solver",
    "force O(n) memory efficient solver",
    "force pre-computed cost matrix",
    "use multiscale solver",
    "One can play with speed (small scaling factor) and precision (scaling close to 1)",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "recover the lazy low rank plan",
    "recover the full low rank plan",
    "recover the squared Gaussian Bures-Wasserstein distance",
    "recover the squared Wasserstein distances",
    "compute cost matrix M and use solve function",
    "Detect backend",
    "default values for solutions",
    "return scaled potentials (to be consistent with other solvers)",
    "compute potentials",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test if sklearn is installed for linux-minimal-deps",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "Init g",
    "Init Q",
    "Init R",
    "First low rank decomposition of the cost matrix (A)",
    "Second low rank decomposition of the cost matrix (B)",
    "POT backend if None",
    "----------------- Initialisation of Dykstra algorithm -----------------",
    "--------------------- Dykstra algorithm -------------------------",
    "See Section 3.3 - \"Algorithm 2 LR-Dykstra\" in paper",
    "Compute u^{(1)} and u^{(2)}",
    "Compute g, g^{(3)}_1 and update \\tilde{g}",
    "Compute new value of g with \\prod",
    "Compute v^{(1)} and v^{(2)}",
    "Compute q^{(1)}, q^{(2)} and q^{(3)}_2",
    "Update values of \\tilde{v}^{(1)}, \\tilde{v}^{(2)} and \\tilde{g}",
    "Compute error",
    "Compute low rank matrices Q, R",
    "POT backend",
    "Initialize weights a, b",
    "Compute rank (see Section 3.1, def 1)",
    "Dykstra won't converge if 1/rank < alpha (see Section 3.2)",
    "Low rank decomposition of the sqeuclidean cost matrix",
    "Initialize the low rank matrices Q, R, g",
    "Gamma initialization",
    "-------------------------- Low rank algorithm ------------------------------",
    "see \"Section 3.3, Algorithm 3 LOT\"",
    "Compute C*R dot using the lr decomposition of C",
    "Compute C.T * Q using the lr decomposition of C",
    "Compute omega",
    "Rescale gamma at each iteration",
    "LR Dykstra algorithm",
    "----------------- Compute lazy_plan, value and value_linear  ------------------",
    "see \"Section 3.2: The Low-rank OT Problem\" in the paper",
    "Compute lazy plan (using LazyTensor class)",
    "Compute value_linear (using trace formula)",
    "Compute value with entropy reg (see \"Section 3.2\" in the paper)",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Mapping between argument types and the existing backend",
    "check that all arguments matched or not the type",
    "Otherwise return an error",
    "check that some arrays given",
    "convert batch of tensors to numpy",
    "convert a tensor to numpy",
    "convert batch of arrays from numpy",
    "convert an array from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "Only register jax backend if it is installed",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Since version 1.11.0, interpolation is available",
    "Else, use numpy",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "Only register torch backend if it is installed",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "Only register cp backend if it is installed",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "todo(okachaiev): replace this with a more reasonable implementation",
    "Only register tensorflow backend if it is installed",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Compute the mean barycenter",
    "Init the covariance barycenter",
    "fixed point update",
    "check convergence",
    "ensure that Cov_s is the largest covariance matrix",
    "that is m >= n",
    "compte and sort eigenvalues decerasingly",
    "compute the gaussien Gromov-Wasserstein distance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "compute the gaussien Gromov-Wasserstein dis",
    "estimate mean and covariance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "select the sign of the eigenvalues",
    "compute the gaussien Gromov-Wasserstein dis",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "compute loss",
    "compute gradient",
    "convert to numpy",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "after that we are all in torch",
    "set blur value and p",
    "force gradients for computing dual",
    "compute value",
    "get dual potentials",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "in case of multiple historgrams",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "oldidx = nx.copy(idx)",
    "the above terminates when any entry in idx equals the corresponding",
    "value in dims this leaves other dimensions incomplete; the remaining",
    "terms of the dual solution must be filled-in",
    "define forward/backward relations for pytorch",
    "function body here",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "quantiles of F_u evaluated in F_v^\\theta",
    "Deal with 1",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "Put negative values at the end",
    "Compute absciss",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "Compute icdf",
    "can probably be improved by computing only relevant values",
    "Code inspired from https://gitlab.gwdg.de/shundri/circularOT/-/tree/master/",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "variable change matrix to reduce the problem to a Wasserstein Barycenter (WB)",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check first marginal of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "the new cost can be deduced from the line search quadratic function",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "Correct order mistake in Equation 14 in [12]",
    "Correct order mistake in Equation 15 in [12]",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Define gradients",
    "rows update",
    "columns update",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random euclidean distance matrix (if not provided by user)",
    "Initialization of Y",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "simple get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "init marginals if set as None",
    "compute separate terms for gradients and log",
    "the new cost is deduced from the line search quadratic function",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "get transport plans",
    "update barycenters",
    "update convergence criterion",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Cedric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Handle backend of non-optional arguments",
    "Handle backend of optional arguments",
    "Initialize randomly structures of dictionary atoms based on samples",
    "batch sampling",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "Initialization for our numpy implementation of adam optimizer",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "Initialize randomly structures of dictionary atoms based on samples",
    "Initialize randomly features of dictionary atoms based on samples distribution by feature component",
    "Batch iterations",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "modeling (C,Y)",
    "constants depending on q",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "structure",
    "feature",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "polynomial coefficients from quadratic objective (with respect to w) on structures",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "polynomial coefficient from quadratic objective (with respect to w) on features",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "%%",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "%%",
    "Comparison of the OT matrices",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "use fast 1D solver",
    "Equivalent to",
    "G0 = ot.emd(a, b, M)",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: ../_static/images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have access to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan visualization",
    "`````````````````````````````````",
    "",
    "A good visualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: ../_static/images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Empirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "pl.xlim((-7,23))",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "pl.xlim((-7,23))",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "########################################################################################",
    "Compare the Euclidean Wasserstein distance with the Wasserstein distance on the  circle",
    "---------------------------------------------------------------------------------------",
    "This examples illustrates the periodicity of the Wasserstein distance on the circle.",
    "We choose as target distribution a von Mises distribution with mean :math:`\\mu_{\\mathrm{target}}`",
    "and :math:`\\kappa=20`. Then, we compare the distances with samples obtained from a von Mises distribution",
    "with parameters :math:`\\mu_{\\mathrm{source}}` and :math:`\\kappa=20`.",
    "The Wasserstein distance on the circle takes into account the periodicity",
    "and attains its maximum in :math:`\\mu_{\\mathrm{target}}+1` (the antipodal point) contrary to the",
    "Euclidean version.",
    "%% Compute and plot distributions",
    "np.random.vonmises deals with data on [-pi, pi[",
    "Put data on S^1=[0,1[",
    "#######################################################################",
    "Wasserstein distance between von Mises and uniform for different kappa",
    "----------------------------------------------------------------------",
    "When :math:`\\kappa=0`, the von Mises distribution is the uniform distribution on :math:`S^1`.",
    "%% Compute Wasserstein between Von Mises and uniform",
    "np.random.vonmises deals with data on [-pi, pi[",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with squared l2 regularization",
    "%% Sparsity-constrained OT",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Generating the fitting data",
    "%%",
    "Fitting the Nearest Brenier Potential",
    "%%",
    "Plotting the images of the source data",
    "%%",
    "Computing the predictions (images by nabla phi) for random samples of the source distribution",
    "%%",
    "Plot predictions for the gradient of the lower-bounding potential",
    "%%",
    "Plot predictions for the gradient of the upper-bounding potential",
    "-*- coding: utf-8 -*-",
    "Author: Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Plot data",
    "-------------",
    "#############################################################################",
    "Compute EWCA",
    "-------------",
    "#############################################################################",
    "Plot data, first component, and projected data",
    "-------------",
    "#############################################################################",
    "Plot transport plan",
    "-------------",
    "-*- coding: utf-8 -*-",
    "Author: Laur\u00e8ne David <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "Gaussian distribution",
    "Source and target distribution",
    "#############################################################################",
    "Solve Low rank sinkhorn",
    "------------",
    "%%",
    "Solve low rank sinkhorn",
    "#############################################################################",
    "Sinkhorn vs Low Rank Sinkhorn",
    "-----------------------",
    "Compare Sinkhorn and Low rank sinkhorn with different regularizations and ranks.",
    "%% Sinkhorn",
    "Compute cost matrix for sinkhorn OT",
    "Solve sinkhorn with different regularizations using ot.solve",
    "%% Low rank sinkhorn",
    "Solve low rank sinkhorn with different ranks using ot.solve_sample",
    "%%",
    "Plot sinkhorn vs low rank sinkhorn",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generate data",
    "-------------",
    "The source and clean target matrices are generated by",
    ":math:`X_{i,j} = \\cos(\\frac{i}{n_1} \\pi) + \\cos(\\frac{j}{d_1} \\pi)` and",
    ":math:`Y_{i,j} = \\cos(\\frac{i}{n_2} \\pi) + \\cos(\\frac{j}{d_2} \\pi)`.",
    "The target matrix is then contaminated by adding 5 row outliers.",
    "Intuitively, we expect that the estimated sample distribution should ignore these outliers,",
    "i.e. their weights should be zero.",
    "Generate clean target data mixed with outliers",
    "%%",
    "Optimize the COOT distance with respect to the sample marginal distribution",
    "---------------------------------------------------------------------------",
    "Estimated sample marginal distribution and training loss curve",
    "%%",
    "Visualizing the row and column alignments with the estimated sample marginal distribution",
    "-----------------------------------------------------------------------------------------",
    "",
    "Clearly, the learned marginal distribution completely and successfully ignores the 5 outliers.",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%% Load modules",
    "%%",
    "Data for logo",
    "-------------",
    "Letter P",
    "Letter O",
    "Scaling and translation for letter O",
    "Letter T",
    "Translating the T",
    "Concatenate all letters",
    "Horizontal and vertical scaling",
    "%%",
    "Plot the logo (clear background)",
    "--------------------------------",
    "Solve OT problem between the points",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo.png', dpi=150, transparent=True, bbox_inches='tight')",
    "%%",
    "Plot the logo (dark background)",
    "--------------------------------",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo_dark.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo_dark.png', dpi=150, transparent=True, bbox_inches='tight')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generating two random matrices",
    "%%",
    "Visualizing the matrices",
    "%%",
    "Visualizing the alignments of rows and columns, and calculating the CO-Optimal Transport distance",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data an plot it",
    "------------------------",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "#############################################################################",
    "Compute Weak OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% Weak OT",
    "#############################################################################",
    "Plot weak OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "%%",
    "Generating 2 distributions",
    "-----",
    "Gaussian distributions",
    "%%",
    "Minimize the distances among distributions, identify the Barycenter",
    "-----",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "L2 Iteration",
    "%%",
    "Compare Barycenters in both methods",
    "-----",
    "pl.plot(x, barys[i], 'g-*')",
    "%%",
    "More than 2 distributions",
    "--------------------------------------------------",
    "Generate 7 pseudorandom gaussian distributions with 50 bins.",
    "%%",
    "Minimizing Distances Among Many Distributions",
    "---------------",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "Perform gradient descent optimization using the d-MMOT method.",
    "after minimization, any distribution can be used as a estimate of barycenter.",
    "Compute 1D Wasserstein barycenter using the L2/LP method",
    "%%",
    "Compare Barycenters in both methods",
    "---------",
    "%%",
    "Compare with original distributions",
    "---------",
    "pl.plot(x, barys[i], 'g')",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinuous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinuous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data an plot it",
    "------------------------",
    "parameters and data generation",
    "%% plot samples",
    "%%",
    "Compute Factored OT and exact OT solutions",
    "------------------------------------------",
    "%% EMD",
    "%% factored OT OT",
    "%%",
    "Plot factored OT and exact OT solutions",
    "---------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labeled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "Gaussian (linear) Monge mapping estimation",
    "Gaussian (linear) GW mapping estimation",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "Monge mapping",
    "gaussian GW mapping",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "Labels",
    "Ticks",
    "##############################################################################",
    "Spherical Sliced Wasserstein for different seeds and number of projections",
    "--------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Spherical Sliced Wasserstein",
    "---------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "%%",
    "plot the transported mass",
    "-------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------------------------------------------------------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------------------",
    "",
    "The OT plan is plotted as a function of $\\gamma$ that is the inverse of the",
    "weight on the marginal relaxations.",
    "%% fully relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for UOT l2",
    "-----------------------------------",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-----------------------------------------",
    "%% semi-relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for semi-relaxed UOT l2",
    "------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Compute entropic kl-regularized UOT, kl- and l2-regularized UOT",
    "-----------",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "----------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "--------------------------------------------------------",
    "The adjacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "-------------------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating dual variables for entropic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated entropic OT plan",
    "-----------------------------------",
    "%%",
    "Estimating dual variables for quadratic OT",
    "------------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated quadratic OT plan",
    "------------------------------------",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "----------------------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "---------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "-----------------------------------------",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "--------------------------------------------------",
    "#############################################################################",
    "Plotting the reweighted source distribution",
    "-------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating deep dual variables for entropic OT",
    "----------------------------------------------",
    "define the MLP model",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the density on target for a given source sample",
    "----------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Gradient descent",
    "----------------",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "pl.subplot(3, 3, i + 1)",
    "ax = pl.axes(projection='3d')",
    "ax.axis(\"off\")",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "compute OT sparsity level",
    "Methods using Sinkhorn projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Compute GW with scalable stochastic methods with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "############################################################################",
    "",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "-----------------------------------------------------------------------------------------------",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability.",
    "Visualize samples",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the Gromov-Wasserstein dictionary from the dataset",
    "-----------------------------------------------------------",
    "visualize loss evolution over epochs",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "Continuous connections between nodes of the atoms are colored in shades of grey (1: dark / 2: white)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Compute the 2D representation of the unmixing living in the 2-simplex of probability",
    "############################################################################",
    "",
    "Endow the dataset with node features",
    "------------------------------------",
    "We follow this feature assignment on all nodes of a graph depending on its label/number of clusters",
    "1 cluster --> 0 as nodes feature",
    "2 clusters --> 1 as nodes feature",
    "3 clusters --> 2 as nodes feature",
    "features are one-hot encoded following these assignments",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate a Fused Gromov-Wasserstein dictionary from the dataset of attributed graphs",
    "------------------------------------------------------------------------------------",
    "visualize loss evolution",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "scaled_F = 2 * (Fatom - min_features) / (max_features - min_features)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Visualize unmixings in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "Computing FGW and GW",
    "reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "visu OT matrix",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their entropic-regularized semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW_e(C2, h2, C3)",
    "2) srGW_e(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the entropic-regularized semi-relaxed Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the entropic srGW matching.",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW_e(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the entropic semi-relaxed Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create 2 classes of stochastic block models (SBM) graphs with 1 block and 2 blocks respectively.",
    "edge probabilities for the SBMs",
    "block sizes",
    "node features",
    "split the data into train and test sets",
    "%%",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot one graph of each class",
    "%%",
    "#############################################################################",
    "Pooling architecture using the TFGW layer",
    "---------",
    "#############################################################################",
    "Graph classification training",
    "---------",
    "store latent embeddings and classes for TSNE visualization",
    "store last classes and embeddings for TSNE visualization",
    "Test",
    "%%",
    "#############################################################################",
    "TSNE visualization of graph classification",
    "---------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "Compute pairwise euclidean distance between node features",
    "############################################################################",
    "",
    "Compute their Fused Gromov-Wasserstein distances",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "Alternated Bregman Projected Gradient algorithm with Kullback-Leibler as proximal operator",
    "compute OT sparsity level",
    "Methods using Sinkhorn/Bregman projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Visualization of the Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the FGW matchings",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "For each matching, all node sizes are proportionnal to their mass computed",
    "from marginals of the OT plan to illustrate potential feasibility errors.",
    "NB: colors refer to clusters - not to node features",
    "Add weights on the edges for visualization later on",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "--------------------------------------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW(C2, h2, C3)",
    "2) srGW(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Gromov-Wasserstein matchings",
    "--------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srGW matching",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "-----------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Fused Gromov-Wasserstein matchings",
    "--------------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Authors: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "%%",
    "Define Gaussian Covariances and distributions",
    "---------------------------------------------",
    "%%",
    "Plot the distributions",
    "----------------------",
    "pl.scatter(mu[0],mu[1],color=color, marker='x')",
    "%%",
    "Compute Bures-Wasserstein barycenters and plot them",
    "-------------------------------------------",
    "basis for bilinear interpolation",
    "weights are constructed by bilinear interpolation",
    "-*- coding: utf-8 -*-",
    "Authors: Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "%%",
    "General Parameters",
    "------------------",
    "%%",
    "Generate Data",
    "-------------",
    "%%",
    "Inspect generated distributions",
    "-------------------------------",
    "%%",
    "Interpolating Empirical Distributions",
    "-------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#######################",
    "Generate and plot data",
    "----------------------",
    "Input measures",
    "Input measure locations in their respective 2D spaces",
    "Input measure weights",
    "Projections 3D -> 2D",
    "Barycenter weights",
    "Number of barycenter points to compute",
    "Send the input measures into 3D space for visualization",
    "Plot the input data",
    "################################",
    "Barycenter computation and plot",
    "-------------------------------",
    "############################",
    "Plotting projection matches",
    "---------------------------",
    "#############################################",
    "Rotation animation",
    "--------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Authors: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data",
    "-------------",
    "%%",
    "Compute free support Wasserstein barycenter",
    "-------------------------------------------",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "%%",
    "Compute free support Sinkhorn barycenter",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "make sure TF doesn't allocate entire GPU",
    "allow numpy API for TF",
    "Author: Laur\u00e8ne DAVID <laurene.david@ip-paris.fr>",
    "",
    "License: MIT License",
    "test computation of low rank cost matrices M1 and M2",
    "test low rank sinkhorn",
    "check constraints for P",
    "check if lazy_plan is equal to the fully computed plan",
    "check if value_linear is correct with its original formula",
    "check warn parameter when Dykstra algorithm doesn't converge",
    "test lowrank inits",
    "test ImportError if init=\"kmeans\" and sklearn not imported",
    "check constraints for P",
    "Test warning for value of alpha",
    "Test lr sinkhorn with different init strategies",
    "check constraints for P",
    "Test low rank sinkhorn for different backends",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "options for reg_m",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check if the marginals come close to the true ones when large reg",
    "check if mm_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test when G0 is given",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "check constraints",
    "test weak ot solver for different backends",
    "check constraints",
    "check constraints",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "generate gaussian dataset",
    "compute first 3 components with BCD",
    "test that U contains the principal components",
    "compute first 3 components with MM",
    "test that U contains the principal components",
    "compute last 3 components",
    "test that U contains the last principal components",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "chaeck that identity is recovered",
    "check G is identity",
    "check constraints",
    "test weak ot solver for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check transported mass",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test binary_search_circle and wasserstein_circle give similar results as emd",
    "check loss is similar",
    "test semidiscrete_wasserstein2_unif_circle versus wasserstein_circle",
    "w_u = rng.uniform(0., 1., n)",
    "w_u = w_u / w_u.sum()",
    "check loss is similar",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "set readable ids for each param",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "solve unif weights",
    "solve signe weights",
    "solve in backend",
    "test not implemented and check raise",
    "pairs of incompatible divergences",
    "check some attributes",
    "solve in backend",
    "solve in backend",
    "test not implemented and check raise",
    "detect partial not implemented and error detect in value",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "test solve_sample when is_Lazy = False",
    "solve with ot.solve",
    "solve signe weights",
    "test solve_sample when is_Lazy = False",
    "solve signe weights",
    "check some attributes (no need )",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "create a lazy tensor",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "For each column of X, find top max_nz values and",
    "their corresponding indices. This incurs a sort.",
    "Project the top max_nz values onto the simplex.",
    "This incurs a second sort.",
    "Put the projection of max_nz_values to their original indices",
    "and set all other values zero.",
    "check that two versions produce consistent results",
    "test timing",
    "np.testing.assert_allclose(0.1, t, rtol=1e-1, atol=1e-1)",
    "very slow macos github action equality not possible",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "test print",
    "tets get citation",
    "i,j can be integers or slices, x1,x2 have to be passed as keyword arguments",
    "create a lazy tensor",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "total sum",
    "sum over axis 0",
    "sum over axis 1",
    "test otehr reduction function",
    "test 3D tensors",
    "create a lazy tensor",
    "total sum",
    "get the full tensor (not lazy)",
    "get one component",
    "get one row",
    "get one column with slices",
    "labels are shifted",
    "labels are shifted but the shift if expected",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check this only if GPU is available",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Barycenter initialization",
    "Obvious barycenter locations. Take a look on test_ot.py, test_free_support_barycenter",
    "Calculate free support barycenter w/ Sinkhorn algorithm. We set the entropic regularization",
    "term to 1, but this should be, in general, fine-tuned to the problem.",
    "Verifies if calculated barycenter matches ground-truth",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "assymetric loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "First image",
    "Second image",
    "Creating matrix A containing all distributions",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check this only if GPU is available",
    "Create the array of images to test",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Create the array of images to test",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Using the Tensorflow backend",
    "Create the array of images to test",
    "Check that everything stays on the CPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "help in checking if log and verbose do not bug the function",
    "Test that the dtype and device are the same after the computation",
    "Check that everything happens on the GPU",
    "wasserstein",
    "Compute the barycenter with numpy",
    "Compute the barycenter with the backend",
    "Convert the backend result to numpy, to compare with the numpy result",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "call with log = False",
    "check equality of plans",
    "check error on wrong metric",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "Test sinkhorn divergence",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "Compute loss using dmmot_monge_1dgrid_loss",
    "Compute loss using exact OT solver with absolute ground metric",
    "deal with C-contiguous error from tensorflow backend (not sure why)",
    "compute loss",
    "test discrete_mmot_converge result",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "classical gradients",
    "Test with exact line-search",
    "Test with armijo line-search",
    "classical gradients",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "complete test with marginal loss = True",
    "check constraints",
    "check constraints",
    "Tests with marginal_loss = False",
    "check constraints",
    "check constraints",
    "setup",
    "test with 'kl_loss' and log=True",
    "providing init_C, init_Y",
    "add tests with fixed_structures or fixed_features",
    "check constraints",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "providing init_C",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "providing init_C",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "check constraints",
    "Tests with kl-loss:",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "test correspondance with utils function",
    "add test with 'kl_loss'",
    "test correspondance with utils function",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: compare reconstruction error using initial dictionary and dictionary learned using this initialization",
    "> Compute initial reconstruction of samples on this random dictionary without backend",
    "> Learn the dictionary using this init",
    "> Compute reconstruction of samples on learned dictionary without backend",
    "Test: Perform same experiments after going through backend",
    "Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "knowing than the initialization scheme is the same than implemented to set the benchmarked initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "and testing other optimization settings untested until now.",
    "We pass previously estimated dictionaries to speed up the process.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: Compute initial reconstruction of samples on this random dictionary",
    "> Learn a dictionary using this given initialization and check that the reconstruction loss",
    "on the learned dictionary is lower than the one using its initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Compare both",
    "Test: Perform same experiments after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform similar experiment without providing the initial dictionary being an optional input",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: without using adam optimizer, with log and verbose set to True",
    "> Experiment providing previously estimated dictionary to speed up the test compared to providing initial random init.",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "> Compare results with/without backend",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "test sinkhorn",
    "entropic gw and fgw",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for mass mismatch",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd2 and emd2 with openmp for simple identity",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two Diracs",
    "obvious barycenter location between two Diracs",
    "obvious barycenter location between two 2D Diracs",
    "test without log and no init",
    "test with log and init",
    "obvious barycenter between two Diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test that types mathcing different backends in input raise an error",
    "Check that subclassing a numpy array does not break get_backend",
    "note: This is only tested for numpy as this is hard to be consistent",
    "with other backends",
    "Sparse tensors test",
    "Author: Eloi Tanguy <eloi.tanguy@u-paris.fr>",
    "",
    "License: MIT License",
    "test without log but with X_classes, a, b and other init method",
    "'new' input isn't new, so should be equal to target",
    "test with no log but classes",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Test weights argument",
    "test with closed form for diagonal covariance matrices",
    "no log",
    "no log + skewness",
    "test the other way around (target to source)",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict",
    "predict on batch",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict on batch",
    "Test the TW layer by passing two graphs through the layer and doing backpropagation.",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test couplings",
    "test marginal distributions",
    "test entropic COOT distance",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "raise value error of method sinkhorn",
    "raise value error for epsilon",
    "raise value error for alpha",
    "initialize warmstart",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test with coot distance",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "prepare semi-supervised labels",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "Mapping tests",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "'new' input isn't new, so should be equal to target",
    "test all margin constraints with gaussian similarity and disp regularisation",
    "previously used implementation for the cost estimator",
    "new vectorized implementation for the cost estimator",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "html_css_files = [\"css/custom.css\"]",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.9.1": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "init uniform",
    "weak OT loss",
    "weak OT gradient",
    "solve with conditional gradient and return solution",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "solve the barycenter",
    "solve OT with template",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "Main function",
    "constant input variables",
    "measures on rows and columns",
    "pre-calculate cost constants",
    "initialize coupling and dual vectors",
    "initialize log",
    "update sample coupling",
    "update feature coupling",
    "update error",
    "COOT part",
    "Entropic part",
    "sanity check",
    "measures on rows and columns",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "in case of multiple historgrams",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "convert to humpy",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "convert back to backend",
    "Next 3 lines equivalent to K=nx.exp(-M/reg), but faster to compute",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "###############################################################################",
    "Losses for stochastic optimization",
    "###############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Jakub Zadrozny <jakub.r.zadrozny@gmail.com>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "marginals",
    "print iterations",
    "loop",
    "Solve transport",
    "Solve PCA",
    "block coordinate descent",
    "majorization-minimization",
    "stop or not",
    "print",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "The callable function operates on nx backend",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "to not change G0 in place.",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "get minimum by rows as binary mask",
    "return by default an empty inner_log",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "V[nx.newaxis, :], max_nz, z, axis=1).ravel()",
    "For each row of V, find top max_nz values; arrange the",
    "corresponding column indices such that their values are",
    "in a descending order.",
    "Extract the top max_nz values for each row",
    "and then project to simplex.",
    "rho = nx.count_nonzero(cond, axis=1)",
    "Put the projection of max_nz_values to their original column indices",
    "while keeping other values zero.",
    "in Jax, we need to use the `at` property of `jax.numpy.ndarray`",
    "to do in-place array modificatons.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "I assume that other solvers may return directly",
    "some primal objects?",
    "In the code below, let's define the main quantities",
    "that may be of interest to users.",
    "An OT solver returns an object that inherits from OTResult",
    "(e.g. SinkhornOTResult) and implements the relevant",
    "methods (e.g. \"plan\" and \"lazy_plan\" but not \"sparse_plan\", etc.).",
    "log is a dictionary containing potential information about the solver",
    "Dual potentials --------------------------------------------",
    "Transport plan -------------------------------------------",
    "N.B.: We may catch out-of-memory errors and suggest",
    "the use of lazy_plan or sparse_plan when appropriate.",
    "Loss values --------------------------------",
    "Marginal constraints -------------------------",
    "Barycentric mappings -------------------------",
    "Return the displacement vectors as an array",
    "that has the same shape as \"xa\"/\"xb\" (for samples)",
    "or \"a\"/\"b\" * D (for images)?",
    "# Wasserstein barycenters ----------------------",
    "@property",
    "def masses(self):",
    "\"\"\"Masses for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "@property",
    "def samples(self):",
    "\"\"\"Sample locations for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "Miscellaneous --------------------------------",
    "The string below refers to the POT library:",
    "successor methods may concatenate the relevant references",
    "to the original definitions, solvers and underlying numerical backends.",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "Tianlin Liu <t.liu@unibas.ch>",
    "For each column of X, find entries that are not among the top max_nz.",
    "Set these entries to -inf.",
    "Project the scaled X onto the simplex with sparsity constraint.",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "convert to humpy",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for EMD solver",
    "default values for exact unbalanced OT",
    "default values for sinkhorn",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Mapping between argument types and the existing backend",
    "check that all arguments matched or not the type",
    "Oterwise return an error",
    "check that some arrays given",
    "convert batch of tensors to numpy",
    "convert a tensor to numpy",
    "convert batch of arrays from numpy",
    "convert an array from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "Only register jax backend if it is installed",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Since version 1.11.0, interpolation is available",
    "Else, use numpy",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "Only register torch backend if it is installed",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "Only register cp backend if it is installed",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "Only register tensorflow backend if it is installed",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "ensure that Cov_s is the largest covariance matrix",
    "that is m >= n",
    "compte and sort eigenvalues decerasingly",
    "compute the gaussien Gromov-Wasserstein distance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "compute the gaussien Gromov-Wasserstein dis",
    "estimate mean and covariance",
    "compte and sort eigenvalues/eigenvectors decreasingly",
    "select the sign of the eigenvalues",
    "compute the gaussien Gromov-Wasserstein dis",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "compute loss",
    "compute gradient",
    "convert to humpy",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "if alpha is zero the emd distance is used",
    "iterate over the graphs in the batch",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "oldidx = nx.copy(idx)",
    "the above terminates when any entry in idx equals the corresponding",
    "value in dims this leaves other dimensions incomplete; the remaining",
    "terms of the dual solution must be filled-in",
    "define forward/backward relations for pytorch",
    "function body here",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "quantiles of F_u evaluated in F_v^\\theta",
    "Deal with 1",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warning related to non-contiguous arrays",
    "Put negative values at the end",
    "Compute absciss",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "Compute icdf",
    "can probably be improved by computing only relevant values",
    "Code inspired from https://gitlab.gwdg.de/shundri/circularOT/-/tree/master/",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "variable change matrix to reduce the problem to a Wasserstein Barycenter (WB)",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check first marginal of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "partial get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "the new cost can be deduced from the line search quadratic function",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Check first marginal of G0",
    "compute the kernel",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "initialize potentials to cope with ot.sinkhorn initialization",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "Initialization of Y",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "simple get_backend as the full one will be handled in gromov_wasserstein",
    "init marginals if set as None",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "init marginals if set as None",
    "the new cost is deduced from the line search quadratic function",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Cedric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Handle backend of non-optional arguments",
    "Handle backend of optional arguments",
    "Initialize randomly structures of dictionary atoms based on samples",
    "batch sampling",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "Initialization for our numpy implementation of adam optimizer",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "Initialize randomly structures of dictionary atoms based on samples",
    "Initialize randomly features of dictionary atoms based on samples distribution by feature component",
    "Batch iterations",
    "BCD solver for Gromov-Wasserstein linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "modeling (C,Y)",
    "constants depending on q",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "structure",
    "feature",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "polynomial coefficients from quadratic objective (with respect to w) on structures",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "polynomial coefficient from quadratic objective (with respect to w) on features",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "%%",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "%%",
    "Comparison of the OT matrices",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "use fast 1D solver",
    "Equivalent to",
    "G0 = ot.emd(a, b, M)",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: ../_static/images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have access to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan visualization",
    "`````````````````````````````````",
    "",
    "A good visualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: ../_static/images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Empirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "pl.xlim((-7,23))",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "pl.xlim((-7,23))",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "########################################################################################",
    "Compare the Euclidean Wasserstein distance with the Wasserstein distance on the  circle",
    "---------------------------------------------------------------------------------------",
    "This examples illustrates the periodicity of the Wasserstein distance on the circle.",
    "We choose as target distribution a von Mises distribution with mean :math:`\\mu_{\\mathrm{target}}`",
    "and :math:`\\kappa=20`. Then, we compare the distances with samples obtained from a von Mises distribution",
    "with parameters :math:`\\mu_{\\mathrm{source}}` and :math:`\\kappa=20`.",
    "The Wasserstein distance on the circle takes into account the periodicity",
    "and attains its maximum in :math:`\\mu_{\\mathrm{target}}+1` (the antipodal point) contrary to the",
    "Euclidean version.",
    "%% Compute and plot distributions",
    "np.random.vonmises deals with data on [-pi, pi[",
    "Put data on S^1=[0,1[",
    "#######################################################################",
    "Wasserstein distance between von Mises and uniform for different kappa",
    "----------------------------------------------------------------------",
    "When :math:`\\kappa=0`, the von Mises distribution is the uniform distribution on :math:`S^1`.",
    "%% Compute Wasserstein between Von Mises and uniform",
    "np.random.vonmises deals with data on [-pi, pi[",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with squared l2 regularization",
    "%% Sparsity-constrained OT",
    "-*- coding: utf-8 -*-",
    "Author: Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Plot data",
    "-------------",
    "#############################################################################",
    "Compute EWCA",
    "-------------",
    "#############################################################################",
    "Plot data, first component, and projected data",
    "-------------",
    "#############################################################################",
    "Plot transport plan",
    "-------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generate data",
    "-------------",
    "The source and clean target matrices are generated by",
    ":math:`X_{i,j} = \\cos(\\frac{i}{n_1} \\pi) + \\cos(\\frac{j}{d_1} \\pi)` and",
    ":math:`Y_{i,j} = \\cos(\\frac{i}{n_2} \\pi) + \\cos(\\frac{j}{d_2} \\pi)`.",
    "The target matrix is then contaminated by adding 5 row outliers.",
    "Intuitively, we expect that the estimated sample distribution should ignore these outliers,",
    "i.e. their weights should be zero.",
    "Generate clean target data mixed with outliers",
    "%%",
    "Optimize the COOT distance with respect to the sample marginal distribution",
    "---------------------------------------------------------------------------",
    "Estimated sample marginal distribution and training loss curve",
    "%%",
    "Visualizing the row and column alignments with the estimated sample marginal distribution",
    "-----------------------------------------------------------------------------------------",
    "",
    "Clearly, the learned marginal distribution completely and successfully ignores the 5 outliers.",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%% Load modules",
    "%%",
    "Data for logo",
    "-------------",
    "Letter P",
    "Letter O",
    "Scaling and translation for letter O",
    "Letter T",
    "Translating the T",
    "Concatenate all letters",
    "Horizontal and vertical scaling",
    "%%",
    "Plot the logo (clear background)",
    "--------------------------------",
    "Solve OT problem between the points",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo.png', dpi=150, transparent=True, bbox_inches='tight')",
    "%%",
    "Plot the logo (dark background)",
    "--------------------------------",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo_dark.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo_dark.png', dpi=150, transparent=True, bbox_inches='tight')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generating two random matrices",
    "%%",
    "Visualizing the matrices",
    "%%",
    "Visualizing the alignments of rows and columns, and calculating the CO-Optimal Transport distance",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data an plot it",
    "------------------------",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "#############################################################################",
    "Compute Weak OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% Weak OT",
    "#############################################################################",
    "Plot weak OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "%%",
    "Generating 2 distributions",
    "-----",
    "Gaussian distributions",
    "%%",
    "Minimize the distances among distributions, identify the Barycenter",
    "-----",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "L2 Iteration",
    "%%",
    "Compare Barycenters in both methods",
    "-----",
    "pl.plot(x, barys[i], 'g-*')",
    "%%",
    "More than 2 distributions",
    "--------------------------------------------------",
    "Generate 7 pseudorandom gaussian distributions with 50 bins.",
    "%%",
    "Minimizing Distances Among Many Distributions",
    "---------------",
    "The objective being minimized is different for both methods, so the objective",
    "values cannot be compared.",
    "Perform gradient descent optimization using the d-MMOT method.",
    "after minimization, any distribution can be used as a estimate of barycenter.",
    "Compute 1D Wasserstein barycenter using the L2/LP method",
    "%%",
    "Compare Barycenters in both methods",
    "---------",
    "%%",
    "Compare with original distributions",
    "---------",
    "pl.plot(x, barys[i], 'g')",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinuous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinuous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data an plot it",
    "------------------------",
    "parameters and data generation",
    "%% plot samples",
    "%%",
    "Compute Factored OT and exact OT solutions",
    "------------------------------------------",
    "%% EMD",
    "%% factored OT OT",
    "%%",
    "Plot factored OT and exact OT solutions",
    "---------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labeled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "Gaussian (linear) Monge mapping estimation",
    "Gaussian (linear) GW mapping estimation",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "Monge mapping",
    "gaussian GW mapping",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "Labels",
    "Ticks",
    "##############################################################################",
    "Spherical Sliced Wasserstein for different seeds and number of projections",
    "--------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Spherical Sliced Wasserstein",
    "---------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "%%",
    "plot the transported mass",
    "-------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------------------------------------------------------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------------------",
    "",
    "The OT plan is plotted as a function of $\\gamma$ that is the inverse of the",
    "weight on the marginal relaxations.",
    "%% fully relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for UOT l2",
    "-----------------------------------",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-----------------------------------------",
    "%% semi-relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for semi-relaxed UOT l2",
    "------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Compute entropic kl-regularized UOT, kl- and l2-regularized UOT",
    "-----------",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "----------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "--------------------------------------------------------",
    "The adjacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "-------------------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating dual variables for entropic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated entropic OT plan",
    "-----------------------------------",
    "%%",
    "Estimating dual variables for quadratic OT",
    "------------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated quadratic OT plan",
    "------------------------------------",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "----------------------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "---------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "-----------------------------------------",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "--------------------------------------------------",
    "#############################################################################",
    "Plotting the reweighted source distribution",
    "-------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating deep dual variables for entropic OT",
    "----------------------------------------------",
    "define the MLP model",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the density on target for a given source sample",
    "----------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Gradient descent",
    "----------------",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "pl.subplot(3, 3, i + 1)",
    "ax = pl.axes(projection='3d')",
    "ax.axis(\"off\")",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "---------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "compute OT sparsity level",
    "Methods using Sinkhorn projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Compute GW with scalable stochastic methods with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "############################################################################",
    "",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "-----------------------------------------------------------------------------------------------",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability.",
    "Visualize samples",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the Gromov-Wasserstein dictionary from the dataset",
    "-----------------------------------------------------------",
    "visualize loss evolution over epochs",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "Continuous connections between nodes of the atoms are colored in shades of grey (1: dark / 2: white)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Compute the 2D representation of the unmixing living in the 2-simplex of probability",
    "############################################################################",
    "",
    "Endow the dataset with node features",
    "------------------------------------",
    "We follow this feature assignment on all nodes of a graph depending on its label/number of clusters",
    "1 cluster --> 0 as nodes feature",
    "2 clusters --> 1 as nodes feature",
    "3 clusters --> 2 as nodes feature",
    "features are one-hot encoded following these assignments",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate a Fused Gromov-Wasserstein dictionary from the dataset of attributed graphs",
    "------------------------------------------------------------------------------------",
    "visualize loss evolution",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "-----------------------------------------------",
    "scaled_F = 2 * (Fatom - min_features) / (max_features - min_features)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "------------------------------------",
    "Visualize unmixings in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "Computing FGW and GW",
    "reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "visu OT matrix",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their entropic-regularized semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW_e(C2, h2, C3)",
    "2) srGW_e(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the entropic-regularized semi-relaxed Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the entropic srGW matching.",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW_e(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the entropic semi-relaxed Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%%",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "We create 2 classes of stochastic block models (SBM) graphs with 1 block and 2 blocks respectively.",
    "edge probabilities for the SBMs",
    "block sizes",
    "node features",
    "split the data into train and test sets",
    "%%",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot one graph of each class",
    "%%",
    "#############################################################################",
    "Pooling architecture using the TFGW layer",
    "---------",
    "#############################################################################",
    "Graph classification training",
    "---------",
    "store latent embeddings and classes for TSNE visualization",
    "store last classes and embeddings for TSNE visualization",
    "Test",
    "%%",
    "#############################################################################",
    "TSNE visualization of graph classification",
    "---------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "Compute pairwise euclidean distance between node features",
    "############################################################################",
    "",
    "Compute their Fused Gromov-Wasserstein distances",
    "---------------------------------------------",
    "Conditional Gradient algorithm",
    "Proximal Point algorithm with Kullback-Leibler as proximal operator",
    "Projected Gradient algorithm with entropic regularization",
    "compute OT sparsity level",
    "Methods using Sinkhorn projections tend to produce feasibility errors on the",
    "marginal constraints",
    "############################################################################",
    "",
    "Visualization of the Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the FGW matchings",
    "We adjust the intensity of links across domains proportionaly to the mass",
    "sent, adding a minimal intensity of 0.1 if mass sent is not zero.",
    "For each matching, all node sizes are proportionnal to their mass computed",
    "from marginals of the OT plan to illustrate potential feasibility errors.",
    "NB: colors refer to clusters - not to node features",
    "Add weights on the edges for visualization later on",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "--------------------------------------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW(C2, h2, C3)",
    "2) srGW(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Gromov-Wasserstein matchings",
    "--------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srGW matching",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "-----------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Fused Gromov-Wasserstein matchings",
    "--------------------------------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Authors: Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "%%",
    "General Parameters",
    "------------------",
    "%%",
    "Generate Data",
    "-------------",
    "%%",
    "Inspect generated distributions",
    "-------------------------------",
    "%%",
    "Interpolating Empirical Distributions",
    "-------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#######################",
    "Generate and plot data",
    "----------------------",
    "Input measures",
    "Input measure locations in their respective 2D spaces",
    "Input measure weights",
    "Projections 3D -> 2D",
    "Barycenter weights",
    "Number of barycenter points to compute",
    "Send the input measures into 3D space for visualization",
    "Plot the input data",
    "################################",
    "Barycenter computation and plot",
    "-------------------------------",
    "############################",
    "Plotting projection matches",
    "---------------------------",
    "#############################################",
    "Rotation animation",
    "--------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Authors: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data",
    "-------------",
    "%%",
    "Compute free support Wasserstein barycenter",
    "-------------------------------------------",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "%%",
    "Compute free support Sinkhorn barycenter",
    "%%",
    "Plot the Wasserstein barycenter",
    "-------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check if the marginals come close to the true ones when large reg",
    "check if mm_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test when G0 is given",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "check constraints",
    "test weak ot solver for different backends",
    "check constraints",
    "check constraints",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Antoine Collas <antoine.collas@inria.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "generate gaussian dataset",
    "compute first 3 components with BCD",
    "test that U contains the principal components",
    "compute first 3 components with MM",
    "test that U contains the principal components",
    "compute last 3 components",
    "test that U contains the last principal components",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "chaeck that identity is recovered",
    "check G is identity",
    "check constraints",
    "test weak ot solver for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check transported mass",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test binary_search_circle and wasserstein_circle give similar results as emd",
    "check loss is similar",
    "test semidiscrete_wasserstein2_unif_circle versus wasserstein_circle",
    "w_u = rng.uniform(0., 1., n)",
    "w_u = w_u / w_u.sum()",
    "check loss is similar",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "solve unif weights",
    "solve signe weights",
    "solve in backend",
    "test not implemented and check raise",
    "pairs of incompatible divergences",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "For each column of X, find top max_nz values and",
    "their corresponding indices. This incurs a sort.",
    "Project the top max_nz values onto the simplex.",
    "This incurs a second sort.",
    "Put the projection of max_nz_values to their original indices",
    "and set all other values zero.",
    "check that two versions produce consistent results",
    "test timing",
    "np.testing.assert_allclose(0.1, t, rtol=1e-1, atol=1e-1)",
    "very slow macos github action equality not possible",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "test print",
    "tets get citation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Barycenter initialization",
    "Obvious barycenter locations. Take a look on test_ot.py, test_free_support_barycenter",
    "Calculate free support barycenter w/ Sinkhorn algorithm. We set the entropic regularization",
    "term to 1, but this should be, in general, fine-tuned to the problem.",
    "Verifies if calculated barycenter matches ground-truth",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "assymetric loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "Test sinkhorn divergence",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Ronak Mehta <ronakrm@cs.wisc.edu>",
    "Xizheng Yu <xyu354@wisc.edu>",
    "",
    "License: MIT License",
    "Compute loss using dmmot_monge_1dgrid_loss",
    "Compute loss using exact OT solver with absolute ground metric",
    "deal with C-contiguous error from tensorflow backend (not sure why)",
    "compute loss",
    "test discrete_mmot_converge result",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "classical gradients",
    "Test with exact line-search",
    "Test with armijo line-search",
    "classical gradients",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "test with 'kl_loss' and log=True",
    "providing init_C, init_Y",
    "check constraints",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "providing init_C",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "providing init_C",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "check constraints",
    "Tests with kl-loss:",
    "check constraints",
    "check constraints",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "add test with 'kl_loss'",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: compare reconstruction error using initial dictionary and dictionary learned using this initialization",
    "> Compute initial reconstruction of samples on this random dictionary without backend",
    "> Learn the dictionary using this init",
    "> Compute reconstruction of samples on learned dictionary without backend",
    "Test: Perform same experiments after going through backend",
    "Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "knowing than the initialization scheme is the same than implemented to set the benchmarked initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "and testing other optimization settings untested until now.",
    "We pass previously estimated dictionaries to speed up the process.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: Compute initial reconstruction of samples on this random dictionary",
    "> Learn a dictionary using this given initialization and check that the reconstruction loss",
    "on the learned dictionary is lower than the one using its initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Compare both",
    "Test: Perform same experiments after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform similar experiment without providing the initial dictionary being an optional input",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: without using adam optimizer, with log and verbose set to True",
    "> Experiment providing previously estimated dictionary to speed up the test compared to providing initial random init.",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "> Compare results with/without backend",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "full gradients with alpha",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "setup",
    "test sinkhorn",
    "entropic gw and fgw",
    "exact and entropic srgw and srfgw loss functions",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for mass mismatch",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd2 and emd2 with openmp for simple identity",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two Diracs",
    "obvious barycenter location between two Diracs",
    "obvious barycenter location between two 2D Diracs",
    "test without log and no init",
    "test with log and init",
    "obvious barycenter between two Diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test that types mathcing different backends in input raise an error",
    "Check that subclassing a numpy array does not break get_backend",
    "note: This is only tested for numpy as this is hard to be consistent",
    "with other backends",
    "Sparse tensors test",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "no log",
    "no log + skewness",
    "test the other way around (target to source)",
    "Author: Sonia Mazelet <sonia.mazelet@ens-paris-saclay.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict",
    "predict on batch",
    "Test the TFGW layer by passing two graphs through the layer and doing backpropagation.",
    "predict on batch",
    "Test the TW layer by passing two graphs through the layer and doing backpropagation.",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test couplings",
    "test marginal distributions",
    "test entropic COOT distance",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "raise value error of method sinkhorn",
    "raise value error for epsilon",
    "raise value error for alpha",
    "initialize warmstart",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test with coot distance",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "Mapping tests",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "get data",
    "squared l2 regularisation",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "sparsity-constrained regularisation",
    "check marginal constraints",
    "check sparsity constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "html_css_files = [\"css/custom.css\"]",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.9.0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "init uniform",
    "weak OT loss",
    "weak OT gradient",
    "solve with conditional gradient and return solution",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "solve the barycenter",
    "solve OT with template",
    "-*- coding: utf-8 -*-",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "Main function",
    "constant input variables",
    "measures on rows and columns",
    "pre-calculate cost constants",
    "initialize coupling and dual vectors",
    "initialize log",
    "update sample coupling",
    "update feature coupling",
    "update error",
    "COOT part",
    "Entropic part",
    "sanity check",
    "measures on rows and columns",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "in case of multiple historgrams",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "convert to humpy",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "convert back to backend",
    "Next 3 lines equivalent to K=nx.exp(-M/reg), but faster to compute",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "###############################################################################",
    "Losses for stochastic optimization",
    "###############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Jakub Zadrozny <jakub.r.zadrozny@gmail.com>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "The callable function operates on nx backend",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "prevent bug from nx.to_numpy that can look for .cpu or .gpu",
    "to not change G0 in place.",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "get minimum by rows as binary mask",
    "return by default an empty inner_log",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "Uniforms and independent samples on the Stiefel manifold V_{d,2}",
    "Projection on S^1",
    "Projection on plane",
    "Projection on sphere",
    "Get coordinates on [0,1[",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "I assume that other solvers may return directly",
    "some primal objects?",
    "In the code below, let's define the main quantities",
    "that may be of interest to users.",
    "An OT solver returns an object that inherits from OTResult",
    "(e.g. SinkhornOTResult) and implements the relevant",
    "methods (e.g. \"plan\" and \"lazy_plan\" but not \"sparse_plan\", etc.).",
    "log is a dictionary containing potential information about the solver",
    "Dual potentials --------------------------------------------",
    "Transport plan -------------------------------------------",
    "N.B.: We may catch out-of-memory errors and suggest",
    "the use of lazy_plan or sparse_plan when appropriate.",
    "Loss values --------------------------------",
    "Marginal constraints -------------------------",
    "Barycentric mappings -------------------------",
    "Return the displacement vectors as an array",
    "that has the same shape as \"xa\"/\"xb\" (for samples)",
    "or \"a\"/\"b\" * D (for images)?",
    "# Wasserstein barycenters ----------------------",
    "@property",
    "def masses(self):",
    "\"\"\"Masses for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "@property",
    "def samples(self):",
    "\"\"\"Sample locations for the Wasserstein barycenter.\"\"\"",
    "raise NotImplementedError()",
    "Miscellaneous --------------------------------",
    "The string below refers to the POT library:",
    "successor methods may concatenate the relevant references",
    "to the original definitions, solvers and underlying numerical backends.",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "convert to humpy",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "default is ``\"KL\"`` regularization (``reg_type=\"KL\"``)",
    "or for original Sinkhorn paper formulation [2]",
    "default is ``\"KL\"``",
    "quadratic unbalanced OT",
    "TV = partial OT",
    "default is ``\"KL\"`` for both",
    "quadratic unbalanced OT with KL regularization",
    "both quadratic",
    "detect backend",
    "create uniform weights if not given",
    "default values for solutions",
    "default values for EMD solver",
    "default values for exact unbalanced OT",
    "default values for sinkhorn",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check that some arrays given",
    "check all same type",
    "convert batch of tensors to numpy",
    "convert a tensor to numpy",
    "convert batch of arrays from numpy",
    "convert an array from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "compute loss",
    "compute gradient",
    "convert to humpy",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "quantiles of F_u evaluated in F_v^\\theta",
    "Deal with 1",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "Put negative values at the end",
    "Compute absciss",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "Compute icdf",
    "can probably be improved by computing only relevant values",
    "Code inspired from https://gitlab.gwdg.de/shundri/circularOT/-/tree/master/",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "variable change matrix to reduce the problem to a Wasserstein Barycenter (WB)",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check first marginal of G0",
    "Check marginals of G0",
    "the new cost can be deduced from the line search quadratic function",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Tanguy Kerdoncuff <tanguy.kerdoncuff@laposte.net>",
    "",
    "License: MIT License",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "simple get_backend as the full one will be handled in gromov_wasserstein",
    "Check marginals of G0",
    "cg for GW is implemented using numpy on CPU",
    "the new cost is deduced from the line search quadratic function",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Cedric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "-*- coding: utf-8 -*-",
    "Author: R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "Handle backend of non-optional arguments",
    "Handle backend of optional arguments",
    "Initialize randomly structures of dictionary atoms based on samples",
    "batch sampling",
    "BCD solver for Gromov-Wassersteisn linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "Initialization for our numpy implementation of adam optimizer",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "Initialize randomly structures of dictionary atoms based on samples",
    "Initialize randomly features of dictionary atoms based on samples distribution by feature component",
    "Batch iterations",
    "BCD solver for Gromov-Wassersteisn linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "modeling (C,Y)",
    "constants depending on q",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "structure",
    "feature",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "polynomial coefficients from quadratic objective (with respect to w) on structures",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "polynomial coefficient from quadratic objective (with respect to w) on features",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "%%",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "%%",
    "Comparison of the OT matrices",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "use fast 1D solver",
    "Equivalent to",
    "G0 = ot.emd(a, b, M)",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: ../_static/images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have acess to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan vizualization",
    "`````````````````````````````````",
    "",
    "A good vizualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: ../_static/images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "pl.xlim((-7,23))",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "pl.xlim((-7,23))",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "########################################################################################",
    "Compare the Euclidean Wasserstein distance with the Wasserstein distance on the  circle",
    "---------------------------------------------------------------------------------------",
    "This examples illustrates the periodicity of the Wasserstein distance on the circle.",
    "We choose as target distribution a von Mises distribution with mean :math:`\\mu_{\\mathrm{target}}`",
    "and :math:`\\kappa=20`. Then, we compare the distances with samples obtained from a von Mises distribution",
    "with parameters :math:`\\mu_{\\mathrm{source}}` and :math:`\\kappa=20`.",
    "The Wasserstein distance on the circle takes into account the periodicity",
    "and attains its maximum in :math:`\\mu_{\\mathrm{target}}+1` (the antipodal point) contrary to the",
    "Euclidean version.",
    "%% Compute and plot distributions",
    "np.random.vonmises deals with data on [-pi, pi[",
    "Put data on S^1=[0,1[",
    "#######################################################################",
    "Wasserstein distance between von Mises and uniform for different kappa",
    "----------------------------------------------------------------------",
    "When :math:`\\kappa=0`, the von Mises distribution is the uniform distribution on :math:`S^1`.",
    "%% Compute Wasserstein between Von Mises and uniform",
    "np.random.vonmises deals with data on [-pi, pi[",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 6",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generate data",
    "-------------",
    "The source and clean target matrices are generated by",
    ":math:`X_{i,j} = \\cos(\\frac{i}{n_1} \\pi) + \\cos(\\frac{j}{d_1} \\pi)` and",
    ":math:`Y_{i,j} = \\cos(\\frac{i}{n_2} \\pi) + \\cos(\\frac{j}{d_2} \\pi)`.",
    "The target matrix is then contaminated by adding 5 row outliers.",
    "Intuitively, we expect that the estimated sample distribution should ignore these outliers,",
    "i.e. their weights should be zero.",
    "Generate clean target data mixed with outliers",
    "%%",
    "Optimize the COOT distance with respect to the sample marginal distribution",
    "---------------------------------------------------------------------------",
    "Estimated sample marginal distribution and training loss curve",
    "%%",
    "Visualizing the row and column alignments with the estimated sample marginal distribution",
    "-----------------------------------------------------------------------------------------",
    "",
    "Clearly, the learned marginal distribution completely and successfully ignores the 5 outliers.",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%% Load modules",
    "%%",
    "Data for logo",
    "-------------",
    "Letter P",
    "Letter O",
    "Scaling and translation for letter O",
    "Letter T",
    "Translating the T",
    "Concatenate all letters",
    "Horizontal and vertical scaling",
    "%%",
    "Plot the logo (clear background)",
    "--------------------------------",
    "Solve OT problem between the points",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo.png', dpi=150, transparent=True, bbox_inches='tight')",
    "%%",
    "Plot the logo (dark background)",
    "--------------------------------",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo_dark.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo_dark.png', dpi=150, transparent=True, bbox_inches='tight')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "License: MIT License",
    "%%",
    "Generating two random matrices",
    "%%",
    "Visualizing the matrices",
    "%%",
    "Visualizing the alignments of rows and columns, and calculating the CO-Optimal Transport distance",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data an plot it",
    "------------------------",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "#############################################################################",
    "Compute Weak OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% Weak OT",
    "#############################################################################",
    "Plot weak OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data an plot it",
    "------------------------",
    "parameters and data generation",
    "%% plot samples",
    "%%",
    "Compute Factore OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% factored OT OT",
    "%%",
    "Plot factored OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "Labels",
    "Ticks",
    "##############################################################################",
    "Spherical Sliced Wasserstein for different seeds and number of projections",
    "--------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Spherical Sliced Wasserstein",
    "---------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "%%",
    "plot the transported mass",
    "-------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------",
    "",
    "The OT plan is ploted as a function of $\\gamma$ that is the inverse of the",
    "weight on the marginal relaxations.",
    "%% fully relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for UOT l2",
    "------------------------",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-------------------",
    "%% semi-relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for semi-relaxed UOT l2",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Compute entropic kl-regularized UOT, kl- and l2-regularized UOT",
    "-----------",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "---------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "------------------------------------------------",
    "The adajacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "--------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating dual variables for entropic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot teh estimated entropic OT plan",
    "-----------------------------------",
    "%%",
    "Estimating dual variables for quadratic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated quadratic OT plan",
    "-----------------------------------",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "---------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "---------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "-----------------------------------------",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "-------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "---------------------------------------------------",
    "#############################################################################",
    "Ploting the reweighted source distribution",
    "------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating deep dual variables for entropic OT",
    "----------------------------------------------",
    "define the MLP model",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the density on arget for a given source sample",
    "---------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Cl\u00e9ment Bonet <clement.bonet@univ-ubs.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Gradient descent",
    "----------------",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "pl.subplot(3, 3, i + 1)",
    "ax = pl.axes(projection='3d')",
    "ax.axis(\"off\")",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "-------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "############################################################################",
    "",
    "Compute GW with a scalable stochastic method with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "############################################################################",
    "",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "---------------------------------------------",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability.",
    "Visualize samples",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate the gromov-wasserstein dictionary from the dataset",
    "---------------------------------------------",
    "visualize loss evolution over epochs",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "---------------------------------------------",
    "Continuous connections between nodes of the atoms are colored in shades of grey (1: dark / 2: white)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "---------------------------------------------",
    "Compute the 2D representation of the unmixing living in the 2-simplex of probability",
    "############################################################################",
    "",
    "Endow the dataset with node features",
    "---------------------------------------------",
    "We follow this feature assignment on all nodes of a graph depending on its label/number of clusters",
    "1 cluster --> 0 as nodes feature",
    "2 clusters --> 1 as nodes feature",
    "3 clusters --> 2 as nodes feature",
    "features are one-hot encoded following these assignments",
    "get 2d position for nodes",
    "############################################################################",
    "",
    "Estimate a Fused Gromov-Wasserstein dictionary from the dataset of attributed graphs",
    "---------------------------------------------",
    "visualize loss evolution",
    "############################################################################",
    "",
    "Visualization of the estimated dictionary atoms",
    "---------------------------------------------",
    "scaled_F = 2 * (Fatom - min_features) / (max_features - min_features)",
    "############################################################################",
    "",
    "Visualization of the embedding space",
    "---------------------------------------------",
    "Visualize unmixings in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "############################################################################",
    "",
    "Generate two graphs following Stochastic Block models of 2 and 3 clusters.",
    "---------------------------------------------",
    "Add weights on the edges for visualization later on",
    "############################################################################",
    "",
    "Compute their semi-relaxed Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "0) GW(C2, h2, C3, h3) for reference",
    "1) srGW(C2, h2, C3)",
    "2) srGW(C3, h3, C2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srGW matching",
    "We make more visible connections between activated nodes",
    "get graphs partition and their coloring",
    "T: getting colors assignment from argmin of columns",
    "############################################################################",
    "",
    "Add node features",
    "---------------------------------------------",
    "We add node features with given mean - by clusters",
    "and inversely proportional to clusters' intra-connectivity",
    "############################################################################",
    "",
    "Compute their semi-relaxed Fused Gromov-Wasserstein divergences",
    "---------------------------------------------",
    "Compute pairwise euclidean distance between node features",
    "0) FGW_alpha(C2, F2, h2, C3, F3, h3) for reference",
    "1) srFGW(C2, F2, h2, C3, F3)",
    "2) srFGW(C3, F3, h3, C2, F2)",
    "############################################################################",
    "",
    "Visualization of the semi-relaxed Fused Gromov-Wasserstein matchings",
    "---------------------------------------------",
    "",
    "We color nodes of the graph on the right - then project its node colors",
    "based on the optimal transport plan from the srFGW matching",
    "NB: colors refer to clusters - not to node features",
    "-*- coding: utf-8 -*-",
    "Authors: Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "%%",
    "General Parameters",
    "------------------",
    "%%",
    "Generate Data",
    "-------------",
    "%%",
    "Inspect generated distributions",
    "-------------------------------",
    "%%",
    "Interpolating Empirical Distributions",
    "-------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Eloi Tanguy <eloi.tanguy@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#######################",
    "Generate and plot data",
    "----------------------",
    "Input measures",
    "Input measure locations in their respective 2D spaces",
    "Input measure weights",
    "Projections 3D -> 2D",
    "Barycenter weights",
    "Number of barycenter points to compute",
    "Send the input measures into 3D space for visualisation",
    "Plot the input data",
    "################################",
    "Barycenter computation and plot",
    "-------------------------------",
    "############################",
    "Plotting projection matches",
    "---------------------------",
    "#############################################",
    "Rotation animation",
    "--------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Authors: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data",
    "-------------",
    "%%",
    "Compute free support Wasserstein barycenter",
    "-------------------------------",
    "%%",
    "Plot the Wasserstein barycenter",
    "---------",
    "%%",
    "Compute free support Sinkhorn barycenter",
    "%%",
    "Plot the Wasserstein barycenter",
    "---------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check if the marginals come close to the true ones when large reg",
    "check if mm_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test when G0 is given",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "check constraints",
    "test weak ot solver for different backends",
    "check constraints",
    "check constraints",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "chaeck that identity is recovered",
    "check G is identity",
    "check constraints",
    "test weak ot solver for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check transported mass",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test binary_search_circle and wasserstein_circle give similar results as emd",
    "check loss is similar",
    "test semidiscrete_wasserstein2_unif_circle versus wasserstein_circle",
    "w_u = rng.uniform(0., 1., n)",
    "w_u = w_u / w_u.sum()",
    "check loss is similar",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "solve unif weights",
    "solve signe weights",
    "check some attributes",
    "solve in backend",
    "test not implemented unbalanced and check raise",
    "test not implemented reg_type and check raise",
    "solve unif weights",
    "solve signe weights",
    "solve in backend",
    "test not implemented and check raise",
    "pairs of incompatible divergences",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "test timing",
    "np.testing.assert_allclose(0.1, t, rtol=1e-1, atol=1e-1)",
    "very slow macos github action equality not possible",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "test print",
    "tets get citation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "Eduardo Fernandes Montesuma <eduardo.fernandes-montesuma@universite-paris-saclay.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Barycenter initialization",
    "Obvious barycenter locations. Take a look on test_ot.py, test_free_support_barycenter",
    "Calculate free support barycenter w/ Sinkhorn algorithm. We set the entropic regularization",
    "term to 1, but this should be, in general, fine-tuned to the problem.",
    "Verifies if calculated barycenter matches ground-truth",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "assymetric loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "Test sinkhorn divergence",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Generate warmstart from dual vectors of unregularized OT",
    "Optimal plan with uniform warmstart",
    "Optimal plan with warmstart generated from unregularized OT",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedvincentcuaz@gmail.com>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Test with exact line-search",
    "Test with armijo line-search",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "setup",
    "check constraints",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "check constraints",
    "check constraints",
    "add features",
    "check constraints",
    "check constraints",
    "Tests with kl-loss:",
    "check constraints",
    "check constraints",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to cg",
    "feed the precomputed local optimum Gb to cg",
    "check constraints",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: compare reconstruction error using initial dictionary and dictionary learned using this initialization",
    "> Compute initial reconstruction of samples on this random dictionary without backend",
    "> Learn the dictionary using this init",
    "> Compute reconstruction of samples on learned dictionary without backend",
    "Test: Perform same experiments after going through backend",
    "Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "knowing than the initialization scheme is the same than implemented to set the benchmarked initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "and testing other optimization settings untested until now.",
    "We pass previously estimated dictionaries to speed up the process.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: Compute initial reconstruction of samples on this random dictionary",
    "> Learn a dictionary using this given initialization and check that the reconstruction loss",
    "on the learned dictionary is lower than the one using its initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Compare both",
    "Test: Perform same experiments after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform similar experiment without providing the initial dictionary being an optional input",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: without using adam optimizer, with log and verbose set to True",
    "> Experiment providing previously estimated dictionary to speed up the test compared to providing initial random init.",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "> Compare results with/without backend",
    "unbalanced proportions",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "create directed sbm with C2 as connectivity matrix",
    "asymmetric",
    "check constraints",
    "check constraints",
    "symmetric",
    "check constraints",
    "check constraints",
    "semirelaxed solvers do not support gradients over masses yet.",
    "calls with nx=None",
    "feed the precomputed local optimum Gb to semirelaxed_cg",
    "check constraints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for mass mismatch",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd2 and emd2 with openmp for simple identity",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter location between two 2D diracs",
    "test without log and no init",
    "test with log and init",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test torch",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "Sparse tensors test",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Theo Gnassounou <theo.gnassounou@inria.fr>",
    "Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "Author: Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test couplings",
    "test marginal distributions",
    "test entropic COOT distance",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "raise value error of method sinkhorn",
    "raise value error for epsilon",
    "raise value error for alpha",
    "initialize warmstart",
    "test couplings",
    "test marginal distributions",
    "test COOT distance",
    "test with coot distance",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "Mapping tests",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "html_css_files = [\"css/custom.css\"]",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.8.2": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "init uniform",
    "weak OT loss",
    "weak OT gradient",
    "solve with conditional gradient and return solution",
    "Author: Remi Flamary <remi.flamary@polytehnique.edu>",
    "",
    "License: MIT License",
    "solve the barycenter",
    "solve OT with template",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "Next 3 lines equivalent to K=np.exp(-M/reg), but faster to compute",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "###############################################################################",
    "Losses for stochastic optimization",
    "###############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "Jakub Zadrozny <jakub.r.zadrozny@gmail.com>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "Check marginals of G0",
    "Check marginals of G0",
    "Check marginals of G0",
    "Check marginals of G0",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "Handle backend of non-optional arguments",
    "Handle backend of optional arguments",
    "Initialize randomly structures of dictionary atoms based on samples",
    "batch sampling",
    "BCD solver for Gromov-Wassersteisn linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "Initialization for our numpy implementation of adam optimizer",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "Initialize randomly structures of dictionary atoms based on samples",
    "Initialize randomly features of dictionary atoms based on samples distribution by feature component",
    "Batch iterations",
    "BCD solver for Gromov-Wassersteisn linear unmixing used independently on each structure of the sampled batch",
    "Stochastic projected gradient step over dictionary atoms",
    "modeling (C,Y)",
    "constants depending on q",
    "Trackers for BCD convergence",
    "1. Solve GW transport between (C,p) and (\\sum_d Cdictionary[d],q) fixing the unmixing w",
    "2. Solve linear unmixing problem over w with a fixed transport plan T",
    "1) Compute gradient at current point w",
    "structure",
    "feature",
    "2) Conditional gradient direction finding: x= \\argmin_x x^T.grad_w",
    "3) Line-search step: solve \\argmin_{\\gamma \\in [0,1]} a*gamma^2 + b*gamma + c",
    "4) Updates: w <-- (1-gamma)*w + gamma*x",
    "polynomial coefficients from quadratic objective (with respect to w) on structures",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "polynomial coefficient from quadratic objective (with respect to w) on features",
    "Constant factor appearing in the factorization a*gamma^2 + b*g + c of the Gromov-Wasserstein reconstruction loss",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check that some arrays given",
    "check all same type",
    "convert batch of tensors to numpy",
    "convert a tensor to numpy",
    "convert batch of arrays from numpy",
    "convert an array from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "%%",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 5",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "%%",
    "Comparison of the OT matrices",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "use fast 1D solver",
    "Equivalent to",
    "G0 = ot.emd(a, b, M)",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: ../_static/images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have acess to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan vizualization",
    "`````````````````````````````````",
    "",
    "A good vizualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: ../_static/images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "pl.xlim((-7,23))",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "pl.xlim((-7,23))",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 6",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "%% Load modules",
    "%%",
    "Data for logo",
    "-------------",
    "Letter P",
    "Letter O",
    "Scaling and translation for letter O",
    "Letter T",
    "Translating the T",
    "Concatenate all letters",
    "Horizontal and vertical scaling",
    "%%",
    "Plot the logo (clear background)",
    "--------------------------------",
    "Solve OT problem between the points",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo.png', dpi=150, transparent=True, bbox_inches='tight')",
    "%%",
    "Plot the logo (dark background)",
    "--------------------------------",
    "plot the OT plan",
    "plot the samples",
    "Save logo file",
    "pl.savefig('logo_dark.svg', dpi=150, transparent=True, bbox_inches='tight')",
    "pl.savefig('logo_dark.png', dpi=150, transparent=True, bbox_inches='tight')",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data an plot it",
    "------------------------",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "#############################################################################",
    "Compute Weak OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% Weak OT",
    "#############################################################################",
    "Plot weak OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data an plot it",
    "------------------------",
    "parameters and data generation",
    "%% plot samples",
    "%%",
    "Compute Factore OT and exact OT solutions",
    "--------------------------------------",
    "%% EMD",
    "%% factored OT OT",
    "%%",
    "Plot factored OT and exact OT solutions",
    "--------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "%%",
    "plot the transported mass",
    "-------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------",
    "",
    "The OT plan is ploted as a function of $\\gamma$ that is the inverse of the",
    "weight on the marginal relaxations.",
    "%% fully relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for UOT l2",
    "------------------------",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-------------------",
    "%% semi-relaxed l2-penalized UOT",
    "%%",
    "Animation of the regpath for semi-relaxed UOT l2",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Compute entropic kl-regularized UOT, kl- and l2-regularized UOT",
    "-----------",
    "#############################################################################",
    "Plot the results",
    "----------------",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "---------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "------------------------------------------------",
    "The adajacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "--------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating dual variables for entropic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot teh estimated entropic OT plan",
    "-----------------------------------",
    "%%",
    "Estimating dual variables for quadratic OT",
    "-----------------------------------------",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the estimated quadratic OT plan",
    "-----------------------------------",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "---------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "-------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "-------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "---------------------------------------------------",
    "#############################################################################",
    "Ploting the reweighted source distribution",
    "------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "one of the target mode changes its variance (no linear mapping)",
    "%%",
    "Plot data",
    "---------",
    "%%",
    "Convert data to torch tensors",
    "-----------------------------",
    "%%",
    "Estimating deep dual variables for entropic OT",
    "----------------------------------------------",
    "define the MLP model",
    "number of iteration",
    "generate noise samples",
    "minus because we maximize te dual loss",
    "%%",
    "Plot the density on arget for a given source sample",
    "---------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "############################################################################",
    "",
    "Compute GW with a scalable stochastic method with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "%%",
    "=============================================================================",
    "Generate a dataset composed of graphs following Stochastic Block models of 1, 2 and 3 clusters.",
    "=============================================================================",
    "For every number of clusters, we generate SBM with fixed inter/intra-clusters probability.",
    "Visualize samples",
    "get 2d position for nodes",
    "%%",
    "=============================================================================",
    "Estimate the gromov-wasserstein dictionary from the dataset",
    "=============================================================================",
    "visualize loss evolution over epochs",
    "%%",
    "=============================================================================",
    "Visualization of the estimated dictionary atoms",
    "=============================================================================",
    "Continuous connections between nodes of the atoms are colored in shades of grey (1: dark / 2: white)",
    "%%",
    "=============================================================================",
    "Visualization of the embedding space",
    "=============================================================================",
    "Compute the 2D representation of the unmixing living in the 2-simplex of probability",
    "%%",
    "=============================================================================",
    "Endow the dataset with node features",
    "=============================================================================",
    "We follow this feature assignment on all nodes of a graph depending on its label/number of clusters",
    "1 cluster --> 0 as nodes feature",
    "2 clusters --> 1 as nodes feature",
    "3 clusters --> 2 as nodes feature",
    "features are one-hot encoded following these assignments",
    "get 2d position for nodes",
    "%%",
    "=============================================================================",
    "Estimate a Fused Gromov-Wasserstein dictionary from the dataset of attributed graphs",
    "=============================================================================",
    "visualize loss evolution",
    "%%",
    "=============================================================================",
    "Visualization of the estimated dictionary atoms",
    "=============================================================================",
    "scaled_F = 2 * (Fatom - min_features) / (max_features - min_features)",
    "%%",
    "=============================================================================",
    "Visualization of the embedding space",
    "=============================================================================",
    "Visualize unmixings in the 2-simplex of probability",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Authors: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "%%",
    "Generate data",
    "-------------",
    "%%",
    "Compute free support barycenter",
    "-------------------------------",
    "%%",
    "Plot the barycenter",
    "---------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Authors: Kilian Fatras <kilian.fatras@gmail.com>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "Laetitia Chapel <laetitia.chapel@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check if the marginals come close to the true ones when large reg",
    "check if mm_unbalanced2 returns the correct loss",
    "check in case no histogram is provided",
    "test when G0 is given",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "check constraints",
    "test weak ot solver for different backends",
    "check constraints",
    "check constraints",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test weak ot solver and identity stationary point",
    "check constraints",
    "chaeck that identity is recovered",
    "check G is identity",
    "check constraints",
    "test weak ot solver for different backends",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "test timing",
    "np.testing.assert_allclose(0.1, t, rtol=1e-1, atol=1e-1)",
    "very slow macos github action equality not possible",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "C\u00e9dric Vincent-Cuaz <cedric.vincent-cuaz@inria.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "check constraints",
    "check constraints",
    "setup",
    "check constraints",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "check constraints",
    "check constraints",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: compare reconstruction error using initial dictionary and dictionary learned using this initialization",
    "> Compute initial reconstruction of samples on this random dictionary without backend",
    "> Learn the dictionary using this init",
    "> Compute reconstruction of samples on learned dictionary without backend",
    "Test: Perform same experiments after going through backend",
    "Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "knowing than the initialization scheme is the same than implemented to set the benchmarked initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform same comparison without providing the initial dictionary being an optional input",
    "and testing other optimization settings untested until now.",
    "We pass previously estimated dictionaries to speed up the process.",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Tests without regularization",
    "Tests with regularization",
    "create dataset composed from 2 structures which are repeated 5 times",
    "Provide initialization for the graph dictionary of shape (n_atoms, shape, shape)",
    "following the same procedure than implemented in gromov_wasserstein_dictionary_learning.",
    "Test: Compute initial reconstruction of samples on this random dictionary",
    "> Learn a dictionary using this given initialization and check that the reconstruction loss",
    "on the learned dictionary is lower than the one using its initialization.",
    "> Compute reconstruction of samples on learned dictionary",
    "Compare both",
    "Test: Perform same experiments after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: Perform similar experiment without providing the initial dictionary being an optional input",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "Test: without using adam optimizer, with log and verbose set to True",
    "> Experiment providing previously estimated dictionary to speed up the test compared to providing initial random init.",
    "> Compute reconstruction of samples on learned dictionary",
    "> Same after going through backend",
    "> Compute reconstruction of samples on learned dictionary",
    "> Compare results with/without backend",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test torch",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "Sparse tensors test",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "Mapping tests",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.8.1.0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "Next 3 lines equivalent to K=np.exp(-M/reg), but faster to compute",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check that some arrays given",
    "check all same type",
    "convert to numpy",
    "convert from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "tmp2=np.einsum('i,ij,j->j', u, K, v)",
    "res = np.einsum('ik,ij,jk,ij->k', u, K, v, M) (explodes cupy memory)",
    "define sinkhorn as sinkhorn_knopp",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have acess to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan vizualization",
    "`````````````````````````````````",
    "",
    "A good vizualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 6",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------",
    "%% fully relaxed l2-penalized UOT",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-------------------",
    "%% semi-relaxed l2-penalized UOT",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "---------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "------------------------------------------------",
    "The adajacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "--------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "---------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "-------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "-------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "---------------------------------------------------",
    "#############################################################################",
    "Ploting the reweighted source distribution",
    "------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "############################################################################",
    "",
    "Compute GW with a scalable stochastic method with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------------------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "check raise not implemented wrong metric",
    "run all on gpu",
    "run sinkhorn for multiple targets",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "np sinkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "check constraints",
    "check constraints",
    "setup",
    "check constraints",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "check constraints",
    "check constraints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test torch",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "Sparse tensors test",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.8.1": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "Next 3 lines equivalent to K=np.exp(-M/reg), but faster to compute",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "perftable {",
    "perftable table{",
    "perftable th, #perftable td {",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check that some arrays given",
    "check all same type",
    "convert to numpy",
    "convert from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "available_devices = jax.devices(\"cpu\")",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "No gradients for cupy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "Taken from",
    "https://github.com/scipy/scipy/blob/v1.7.1/scipy/special/_logsumexp.py#L7-L127",
    "cupy has implicit type conversion so",
    "we automatically validate the test for type",
    "inner product",
    "matrix vector",
    "if type_as is not None:",
    "sparse_tensor = self.from_numpy(sparse_tensor, type_as=type_as)",
    "SparseTensor are not subscriptable so we use dense tensors",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "tmp2=np.einsum('i,ij,j->j', u, K, v)",
    "res = np.einsum('ik,ij,jk,ij->k', u, K, v, M) (explodes cupy memory)",
    "define sinkhorn as sinkhorn_knopp",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have acess to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan vizualization",
    "`````````````````````````````````",
    "",
    "A good vizualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 6",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------",
    "%% fully relaxed l2-penalized UOT",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-------------------",
    "%% semi-relaxed l2-penalized UOT",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "---------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "------------------------------------------------",
    "The adajacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "--------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we  optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "---------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "-------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "-------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "---------------------------------------------------",
    "#############################################################################",
    "Ploting the reweighted source distribution",
    "------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "############################################################################",
    "",
    "Compute GW with a scalable stochastic method with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------------------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "check raise not implemented wrong metric",
    "run all on gpu",
    "run sinkhorn for multiple targets",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "tests that every metric runs correctly",
    "weighted minkowski but with no weights",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "np sinkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "setup",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "check constraints",
    "check constraints",
    "setup",
    "check constraints",
    "check constraints",
    "test of gromov_barycenters with `log` on",
    "test of gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "test of entropic_gromov_barycenters with `log` on",
    "check constraints",
    "check constraints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Testing for bug #309, checking for scaling of gradient",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test torch",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "test not unique types in input",
    "Sparse tensors test",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return 0. for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Check that everything stays on the CPU",
    "Check that everything happens on the GPU",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = '.rst'",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Tensorflow should be the last one to be benchmarked because",
    "as far as I'm aware, there is no way to force it to release",
    "GPU memory. Hence, if any other backend is benchmarked after",
    "Tensorflow and requires the usage of a GPU, it will not have the",
    "full memory available and you may have a GPU Out Of Memory error",
    "even though your GPU can technically hold your tensors in memory.",
    "make bitsize header",
    "make device header",
    "make param_name / backend header",
    "make results rows",
    "/usr/bin/env python3",
    "-*- coding: utf-8 -*-"
  ],
  "0.8.0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks PyPI for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati100@gmail.com>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "log and verbose print",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "debiased Sinkhorn does not converge monotonically",
    "guarantee a few iterations are done before stopping",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "Next 3 lines equivalent to K=np.exp(-M/reg), but faster to compute",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "pre-compute reg_c,c'",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "initialization",
    "Return the second order matrix of the displacements: sum_ij { (pi)_ij (X_i-Y_j)(X_i-Y_j)^T }.",
    "Projected cost matrix",
    "Sinkhorn update",
    "Riemannian gradient descent",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "scalar_search_armijo can return alpha > 1",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty   <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sort u in ascending order",
    "take the descending order",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "It is always better to sample from the biggest distribution first.",
    "If T is sparse, it probably mean that PoGroW was used, thus the number of sample is reduced",
    "The number of sample along the first dimension is without replacement.",
    "For each of the row sampled, the column is sampled.",
    "Initialize with default marginal",
    "To limit the number of non 0, the values below the threshold are set to 0.",
    "The most natural way to define nb_sample is with a simple integer.",
    "As the sampling along the first dimension is done without replacement, the rest is reported to the second",
    "dimension.",
    "continue_loop allows to stop the loop if there is several successive small modification of T.",
    "The gradient of GW is more complex if the two matrices are not symmetric.",
    "If the matrices C are not symmetric, the gradient has 2 terms, thus the term is chosen randomly.",
    "This division by the max is here to facilitate the choice of epsilon.",
    "Set to infinity all the numbers below exp(-200) to avoid log of 0.",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check that some arrays given",
    "check all same type",
    "convert to numpy",
    "convert from numpy",
    "No gradients for numpy",
    "this is a not very efficient way to make numpy",
    "searchsorted work on 2d arrays",
    "numpy has implicit type conversion so we automatically validate the test",
    "this is a not very efficient way to make jax numpy",
    "searchsorted work on 2d arrays",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "Currently, JAX does not support sparse matrices",
    "No need to copy, JAX arrays are immutable",
    "define a function that takes inputs val and grads",
    "ad returns a val tensor with proper gradients",
    "the gradients are grad",
    "pad_width is an array of ndim tuples indicating how many 0 before and after",
    "we need to add. We first need to make it compliant with torch syntax, that",
    "starts with the last dim, then second last, etc.",
    "Versions older than 1.9 do not support CSR tensors. PyTorch 1.9 and 1.10 offer a very limited support",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "t = phi - gamma * delta",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "initialization",
    "compute the intercept and slope of solutions in current iteration",
    "compute the next lambda when removing a point from the active set",
    "if the positivity constraint is violated, we remove id_pop",
    "from active set, otherwise we add ik to active set",
    "compute the solution of current segment",
    "correct the last solution and gamma",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "tmp2=np.einsum('i,ij,j->j', u, K, v)",
    "res = np.einsum('ik,ij,jk,ij->k', u, K, v, M) (explodes cupy memory)",
    "define sinkhorn as sinkhorn_knopp",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "This code is adapted for a large part from the astropy openmp helpers, which",
    "can be found at: https://github.com/astropy/extension-helpers/blob/master/extension_helpers/_openmp_helpers.py  # noqa",
    "Default flag for GCC and clang:",
    "include <omp.h>",
    "include <stdio.h>",
    "pragma omp parallel",
    "Since we can't run the test program when cross-compiling",
    "assume that openmp is supported if the program can be",
    "compiled.",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "extra_(pre/post)args can be a callable to make it possible to get its",
    "value from the compiler",
    "Write test program",
    "Compile, test program",
    "Link test program",
    "Run test program if not cross compiling",
    "will raise a CalledProcessError if return code was non-zero",
    "Return an empty output if we are cross compiling",
    "as we cannot run the test_program",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "this is to ensure the best performance for torch searchsorted",
    "and avoid a warninng related to non-contiguous arrays",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "convert to numpy if list",
    "convert to numpy",
    "ensure float64",
    "if empty array given then use uniform distributions",
    "ensure that same mass",
    "convert to numpy",
    "if empty array given then use uniform distributions",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C are stored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "coding: utf-8",
    "Author: Remi Flamary, Nicolas Courty, Aurelie Boisbunon",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "#############################################################################",
    "POT Python Optimal Transport Toolbox",
    "------------------------------------",
    "",
    "POT installation",
    "```````````````````",
    "",
    "* Install with pip::",
    "",
    "pip install pot",
    "* Install with conda::",
    "",
    "conda install -c conda-forge pot",
    "",
    "Import the toolbox",
    "```````````````````",
    "",
    "#############################################################################",
    "Getting help",
    "`````````````",
    "",
    "Online  documentation : `<https://pythonot.github.io/all.html>`_",
    "",
    "Or inline help:",
    "",
    "#############################################################################",
    "First OT Problem",
    "----------------",
    "",
    "We will solve the Bakery/Caf\u00e9s problem of transporting croissants from a",
    "number of Bakeries to Caf\u00e9s in a City (in this case Manhattan). We did a",
    "quick google map search in Manhattan for bakeries and Caf\u00e9s:",
    "",
    ".. image:: images/bak.png",
    ":align: center",
    ":alt: bakery-cafe-manhattan",
    ":width: 600px",
    ":height: 280px",
    "",
    "We extracted from this search their positions and generated fictional",
    "production and sale number (that both sum to the same value).",
    "",
    "We have acess to the position of Bakeries ``bakery_pos`` and their",
    "respective production ``bakery_prod`` which describe the source",
    "distribution. The Caf\u00e9s where the croissants are sold are defined also by",
    "their position ``cafe_pos`` and ``cafe_prod``, and describe the target",
    "distribution. For fun we also provide a",
    "map ``Imap`` that will illustrate the position of these shops in the city.",
    "",
    "",
    "Now we load the data",
    "",
    "",
    "#############################################################################",
    "Plotting bakeries in the city",
    "-----------------------------",
    "",
    "Next we plot the position of the bakeries and caf\u00e9s on the map. The size of",
    "the circle is proportional to their production.",
    "",
    "#############################################################################",
    "Cost matrix",
    "-----------",
    "",
    "",
    "We can now compute the cost matrix between the bakeries and the caf\u00e9s, which",
    "will be the transport cost matrix. This can be done using the",
    "`ot.dist <https://pythonot.github.io/all.html#ot.dist>`_ function that",
    "defaults to squared Euclidean distance but can return other things such as",
    "cityblock (or Manhattan distance).",
    "",
    "#############################################################################",
    "The red cells in the matrix image show the bakeries and caf\u00e9s that are",
    "further away, and thus more costly to transport from one to the other, while",
    "the blue ones show those that are very close to each other, with respect to",
    "the squared Euclidean distance.",
    "#############################################################################",
    "Solving the OT problem with `ot.emd <https://pythonot.github.io/all.html#ot.emd>`_",
    "-----------------------------------------------------------------------------------",
    "#############################################################################",
    "The function returns the transport matrix, which we can then visualize (next section).",
    "#############################################################################",
    "Transportation plan vizualization",
    "`````````````````````````````````",
    "",
    "A good vizualization of the OT matrix in the 2D plane is to denote the",
    "transportation of mass between a Bakery and a Caf\u00e9 by a line. This can easily",
    "be done with a double ``for`` loop.",
    "",
    "In order to make it more interpretable one can also use the ``alpha``",
    "parameter of plot and set it to ``alpha=G[i,j]/G.max()``.",
    "Plot the matrix and the map",
    "#############################################################################",
    "The transport matrix gives the number of croissants that can be transported",
    "from each bakery to each caf\u00e9. We can see that the bakeries only need to",
    "transport croissants to one or two caf\u00e9s, the transport matrix being very",
    "sparse.",
    "#############################################################################",
    "OT loss and dual variables",
    "--------------------------",
    "",
    "The resulting wasserstein loss loss is of the form:",
    "",
    ".. math::",
    "W=\\sum_{i,j}\\gamma_{i,j}C_{i,j}",
    "",
    "where :math:`\\gamma` is the optimal transport matrix.",
    "",
    "#############################################################################",
    "Regularized OT with Sinkhorn",
    "----------------------------",
    "",
    "The Sinkhorn algorithm is very simple to code. You can implement it directly",
    "using the following pseudo-code",
    "",
    ".. image:: images/sinkhorn.png",
    ":align: center",
    ":alt: Sinkhorn algorithm",
    ":width: 440px",
    ":height: 240px",
    "",
    "In this algorithm, :math:`\\oslash` corresponds to the element-wise division.",
    "",
    "An alternative is to use the POT toolbox with",
    "`ot.sinkhorn <https://pythonot.github.io/all.html#ot.sinkhorn>`_",
    "",
    "Be careful of numerical problems. A good pre-processing for Sinkhorn is to",
    "divide the cost matrix ``C`` by its maximum value.",
    "#############################################################################",
    "Algorithm",
    "`````````",
    "Compute Sinkhorn transport matrix from algorithm",
    "Compute Sinkhorn transport matrix with POT",
    "Difference between the 2",
    "#############################################################################",
    "Plot the matrix and the map",
    "```````````````````````````",
    "#############################################################################",
    "We notice right away that the matrix is not sparse at all with Sinkhorn,",
    "each bakery delivering croissants to all 5 caf\u00e9s with that solution. Also,",
    "this solution gives a transport with fractions, which does not make sense",
    "in the case of croissants. This was not the case with EMD.",
    "#############################################################################",
    "Varying the regularization parameter in Sinkhorn",
    "````````````````````````````````````````````````",
    "",
    "Compute the Wasserstein loss for Sinkhorn, and compare with EMD",
    "#############################################################################",
    "This series of graph shows that the solution of Sinkhorn starts with something",
    "very similar to EMD (although not sparse) for very small values of the",
    "regularization parameter, and tends to a more uniform solution as the",
    "regularization parameter increases.",
    "",
    "#############################################################################",
    "Wasserstein loss and computational time",
    "```````````````````````````````````````",
    "",
    "Plot the matrix and the map",
    "#############################################################################",
    "In this last graph, we show the impact of the regularization parameter on",
    "the Wasserstein loss. We can see that higher",
    "values of ``reg`` leads to a much higher Wasserstein loss.",
    "",
    "The Wasserstein loss of EMD is displayed for",
    "comparison. The Wasserstein loss of Sinkhorn can be a little lower than that",
    "of EMD for low values of ``reg``, but it quickly gets much higher.",
    "",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "-------------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 6",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "---------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "##############################################################################",
    "Sliced Wasserstein distance for different seeds and number of projections",
    "-------------------------------------------------------------------------",
    "%% Compute statistics",
    "##############################################################################",
    "Plot Sliced Wasserstein Distance",
    "--------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "-------------------------",
    "Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot 2 distribution samples",
    "#############################################################################",
    "Compute semi-relaxed and fully relaxed regularization paths",
    "-----------",
    "%%",
    "#############################################################################",
    "Plot the regularization path",
    "----------------",
    "%% fully relaxed l2-penalized UOT",
    "#############################################################################",
    "Plot the semi-relaxed regularization path",
    "-------------------",
    "%% semi-relaxed l2-penalized UOT",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Graph generation",
    "---------------",
    "get 2d position for nodes",
    "%%",
    "Optimizing GW w.r.t. the weights on a template structure",
    "------------------------------------------------",
    "The adajacency matrix C1 is block diagonal with 3 blocks. We want to",
    "optimize the weights of a simple template C0=eye(3) and see if we can",
    "recover the proportion of classes from the SBM (up to a permutation).",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "%%",
    "It is clear that the optimization has converged and that we recover the",
    "ratio of the different classes in the SBM graph up to a permutation.",
    "%%",
    "Community clustering with uniform and estimated weights",
    "--------------------------------------------",
    "The GW OT  plan can be used to perform a clustering of the nodes of a graph",
    "when computing the GW with a simple template like C0 by labeling nodes in",
    "the original graph using by the index of the noe in the template receiving",
    "the most mass.",
    "",
    "We show here the result of such a clustering when using uniform weights on",
    "the template C0 and when using the optimal weights previously estimated.",
    "%%",
    "Graph compression with GW",
    "-------------------------",
    "Now we  optimize both the weights and structure of a small graph that",
    "minimize the GW distance wrt our data graph. This can be seen as graph",
    "compression but can also recover important properties of an SBM such",
    "as its class proportion but also its matrix of probability of links between",
    "classes",
    "use pyTorch for our data",
    "print(\"{:03d} | {}\".format(i, loss_iter[-1]))",
    "performs a step of projected gradient descent",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "enforce sum to one on the support",
    "use pyTorch for our data",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "plot one curve every 10 iterations",
    "%%",
    "Wasserstein barycenter",
    "---------",
    "In this example, we consider the following Wasserstein barycenter problem",
    "$$ \\\\eta^* = \\\\min_\\\\eta\\;\\;\\; (1-t)W(\\\\mu,\\\\eta) + tW(\\\\eta,\\\\nu)$$",
    "where :math:`\\\\mu` and :math:`\\\\nu` are reference 1D measures, and :math:`t`",
    "is a parameter :math:`\\in [0,1]`. The problem is handled by a project gradient",
    "descent method, where the gradient is computed by pyTorch automatic differentiation.",
    "The projection on the simplex ensures that the iterate will remain on the",
    "probability simplex.",
    "",
    "This example illustrates both `wasserstein_1d` function and backend use within the",
    "POT framework.",
    "use pyTorch for our data",
    "instant of the interpolation",
    "Compute the Wasserstein 1D with torch backend",
    "record the corresponding loss value",
    "performs a step of projected gradient descent",
    "Author: R\u00e9mi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "%%",
    "Loading the data",
    "%%",
    "Sliced Wasserstein gradient flow with Pytorch",
    "---------------------------------------------",
    "use pyTorch for our data",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the gradient flow along iteration",
    "-------------------------------------------------------",
    "%%",
    "Compute the Sliced Wasserstein Barycenter",
    "",
    "generator for random permutations",
    "performs a step of projected gradient descent",
    "%%",
    "Animate trajectories of the barycenter along gradient descent",
    "-------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "%%",
    "Data generation",
    "---------------",
    "%%",
    "Plot data",
    "---------",
    "plot the distributions",
    "%%",
    "Generator Model",
    "---------------",
    "define the MLP model",
    "%%",
    "Training the model",
    "------------------",
    "number of iteration and size of the batches",
    "generate statis samples to see their trajectory along training",
    "generate noise samples",
    "generate data samples",
    "generate sample along iterations",
    "generate smaples and compte distance matrix",
    "%%",
    "Plot trajectories of generated samples along iterations",
    "-------------------------------------------------------",
    "%%",
    "Animate trajectories of generated samples along iteration",
    "-------------------------------------------------------",
    "%%",
    "Generate and visualize data",
    "---------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% Data",
    "Sample reweighting matrix H",
    "each columns sums to 1 and has weights only for samples form the",
    "corresponding source distribution",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Optimization of the model wrt the Wasserstein distance",
    "------------------------------------------------------",
    "%% Weights optimization with gradient descent",
    "convert numpy arrays to torch tensors",
    "weights for the source distributions",
    "uniform weights for target",
    "loss for the minimal Wasserstein estimator",
    "#############################################################################",
    "Estimated weights and convergence of the objective",
    "---------------------------------------------------",
    "#############################################################################",
    "Ploting the reweighted source distribution",
    "------------------------------------------",
    "compute source weights",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "############################################################################",
    "",
    "Compute GW with a scalable stochastic method with any loss function",
    "----------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "------------------------------------------------------------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "-------------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "--------------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "----------------------------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 1",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati100@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Debiased barycenter of 1D Gaussians",
    "------------------------------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% barycenter computation",
    "#############################################################################",
    "Debiased barycenter of 2D images",
    "---------------------------------",
    "#############################################################################",
    "Display the input images",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------------------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "check raise not implemented wrong metric",
    "run all on gpu",
    "run sinkhorn for multiple targets",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constraints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constraints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constraints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constraints",
    "Test gaussian",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "Configuration file for pytest",
    "License: MIT License",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Haoran Wu <haoran.wu@univ-ubs.fr>",
    "",
    "License: MIT License",
    "source and target distributions",
    "loss matrix",
    "source and target distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Minhui Huang <mhhuang@ucdavis.edu>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "First measure : uniform on the hypercube",
    "Second measure : fragmentation",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check transported mass",
    "check constraints",
    "check constraints",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test 1 : wasserstein_1d should be close to scipy W_1 implementation",
    "test 2 : wasserstein_1d should be close to one when only translating the support",
    "test 3 : arrays test",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test on matrix when projection is done on axis 0",
    "all projections should sum to 1",
    "all projections should sum to 3",
    "tets on vector",
    "all projections should sum to 1",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "low atol because jax forces float32",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Quang Huy Tran <quang-huy.tran@univ-ubs.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "test sinkhorn",
    "test sinkhorn",
    "warn set to False to avoid catching a convergence warning instead",
    "test sinkhorn",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constraints",
    "test sinkhorn",
    "check constraints",
    "Test sinkhorn divergence",
    "check constraints",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "np sinkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "",
    "License: MIT License",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "check constraints",
    "check constraints",
    "setup",
    "check constraints",
    "check constraints",
    "setup",
    "check constraints",
    "check constraints",
    "check constraints",
    "check constraints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "assert len(w) == 1",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@polytechnique.edu>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "error if no parameters",
    "error if unknown types",
    "test torch",
    "test not unique types in input",
    "test not unique types in input",
    "Sparse tensors test",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Should not throw an exception and return None for alpha",
    "check line search armijo",
    "chech the case where the optimum is on the direction",
    "check the case where the direction is not far enough",
    "check the case where checking the wrong direction",
    "check the case where the point is not a vector",
    "Author: Adrien Corenflos <adrien.corenflos@aalto.fi>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "check that it does not crash when derphi is very close to 0",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "get data",
    "check constraints",
    "kl regularisation",
    "check constraints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "0.7.0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks Pipy for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati@inria.fr>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "print('b',np.max(abs(aviol -viol)),np.max(abs(aviol_2 - viol_2)))",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "Next 3 lines equivalent to K=np.exp(-M/reg), but faster to compute",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Ensure that distances between vectors and themselves are set to 0.0.",
    "This may not be the case due to floating point rounding errors.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "XXX use random state",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "XXX : should use a random state and not use the global seed",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "tmp2=np.einsum('i,ij,j->j', u, K, v)",
    "res = np.einsum('ik,ij,jk,ij->k', u, K, v, M) (explodes cupy memory)",
    "define sinkhorn as sinkhorn_knopp",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "Copyright 2001-2013 Python Software Foundation; All Rights Reserved",
    "Once '__signature__' will be added to 'C'-level",
    "callables, this check won't be necessary",
    "Unbound method: the first parameter becomes positional-only",
    "In this case we skip the first parameter of the underlying",
    "function (usually `self` or `cls`).",
    "Was this function wrapped by a decorator?",
    "We set a new default value, because the following code",
    "is correct:",
    "",
    ">>> def foo(a): print(a)",
    ">>> print(partial(partial(foo, a=10), a=20)())",
    "20",
    ">>> print(partial(partial(foo, a=10), a=20)(a=30))",
    "30",
    "",
    "So, with 'partial' objects, passing a keyword argument is",
    "like setting a new default value for the corresponding",
    "parameter",
    "",
    "We also mark this parameter with '_partial_kwarg'",
    "flag.  Later, in '_bind', the 'default' value of this",
    "parameter will be added to 'kwargs', to simulate",
    "the 'functools.partial' real call.",
    "obj is a class or a metaclass",
    "First, let's see if it has an overloaded __call__ defined",
    "in its metaclass",
    "Now we check if the 'obj' class has a '__new__' method",
    "Finally, we should have at least __init__ implemented",
    "An object with __call__",
    "We also check that the 'obj' is not an instance of",
    "_WrapperDescriptor or _MethodWrapper to avoid",
    "infinite recursion (and even potential segfault)",
    "For classes and objects we skip the first parameter of their",
    "__call__, __new__, or __init__ methods",
    "Raise a nicer error message for builtins",
    "Add annotation and default value",
    "Keyword arguments mapped by 'functools.partial'",
    "(Parameter._partial_kwarg is True) are mapped",
    "in 'BoundArguments.kwargs', along with VAR_KEYWORD &",
    "KEYWORD_ONLY",
    "We're done here. Other arguments",
    "will be mapped in 'BoundArguments.kwargs'",
    "*args",
    "plain argument",
    "**kwargs",
    "plain keyword argument",
    "Parameter information.",
    "Non-keyword-only parameters w/o defaults.",
    "... w/ defaults.",
    "*args",
    "Keyword-only parameters.",
    "**kwargs",
    "Support for binding arguments to 'functools.partial' objects.",
    "See 'functools.partial' case in 'signature()' implementation",
    "for details.",
    "Simulating 'functools.partial' behavior",
    "Let's iterate through the positional arguments and corresponding",
    "parameters",
    "No more positional arguments",
    "No more parameters. That's it. Just need to check that",
    "we have no `kwargs` after this while loop",
    "That's OK, just empty *args.  Let's start parsing",
    "kwargs",
    "That's fine too - we have a default value for this",
    "parameter.  So, lets start parsing `kwargs`, starting",
    "with the current parameter",
    "We have a positional argument to process",
    "Looks like we have no parameter for this positional",
    "argument",
    "We have an '*args'-like argument, let's fill it with",
    "all positional arguments we have left and move on to",
    "the next phase",
    "Now, we iterate through the remaining parameters to process",
    "keyword arguments",
    "This should never happen in case of a properly built",
    "Signature object (but let's have this check here",
    "to ensure correct behaviour just in case)",
    "Memorize that we have a '**kwargs'-like parameter",
    "We have no value for this parameter.  It's fine though,",
    "if it has a default value, or it is an '*args'-like",
    "parameter, left alone by the processing of positional",
    "arguments.",
    "Process our '**kwargs'-like parameter",
    "OK, we have an '*args'-like parameter, so we won't need",
    "a '*' to separate keyword-only arguments",
    "We have a keyword-only parameter to render and we haven't",
    "rendered an '*args'-like parameter before, so add a '*'",
    "separator to the parameters list (\"foo(arg1, *, arg2)\" case)",
    "This condition should be only triggered once, so",
    "reset the flag",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "if empty array given then use uniform distributions",
    "problem with pikling Forks",
    "if empty array given then use uniform distributions",
    "if empty array given then use uniform distributions",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 6",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "--------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "Compute the Transportation Matrix for the Semi-Dual Problem",
    "-----------------------------------------------------------",
    "",
    "Discrete case",
    "`````````````",
    "",
    "Sample two discrete measures for the discrete case and compute their cost",
    "matrix c.",
    "############################################################################",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "############################################################################",
    "Semi-Continuous Case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case, the points where source and target measures are defined and compute the",
    "cost matrix.",
    "############################################################################",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case.",
    "############################################################################",
    "Compare the results with the Sinkhorn algorithm",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SAG",
    "#############################################################################",
    "For ASGD",
    "#############################################################################",
    "For Sinkhorn",
    "############################################################################",
    "Compute the Transportation Matrix for the Dual Problem",
    "------------------------------------------------------",
    "",
    "Semi-continuous case",
    "````````````````````",
    "",
    "Sample one general measure a, one discrete measures b for the semi-continuous",
    "case and compute the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semi-continuous case",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "```````````````````````````````````````````````",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot Transportation Matrices",
    "````````````````````````````",
    "",
    "For SGD",
    "#############################################################################",
    "For Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "--------------",
    "Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 2",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 3",
    "#############################################################################",
    "Generate data",
    "---------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "---------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "---------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "---------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "---------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------------------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "sphinx_gallery_thumbnail_number = 4",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "check raise not implemented wrong metric",
    "run all on gpu",
    "run sinkhorn for multiple targets",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constratints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constratints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constratints",
    "Test gaussian",
    "check constratints",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "check transported mass",
    "check constratints",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constratints",
    "test sinkhorn",
    "check constratints",
    "check constratints",
    "check constratints",
    "test empty weights greenkhorn",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constratints",
    "Test sinkhorn divergence",
    "check constratints",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "0.7.0-beta0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks Pipy for handling markdown now",
    "clean cython output is clean is called",
    "add platform dependant optional compilation argument",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated samples",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping for each source domain",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the sources domains",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "check the necessary inputs parameters are here",
    "perform label propagation",
    "set nans to 0",
    "compute propagated labels",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati@inria.fr>",
    "Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "Alexander Tong <alexander.tong@yale.edu>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "print('b',np.max(abs(aviol -viol)),np.max(abs(aviol_2 - viol_2)))",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "build the convolution operator",
    "this is equivalent to blurring on horizontal then vertical directions",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "log dictionary",
    "For each source domain, build cost matrices M, Gibbs kernels K and corresponding matrices D_1 and D_2",
    "format classes to start from 0 for convenience",
    "build the corresponding D_1 and D_2 matrices",
    "build the cost matrix and the Gibbs kernel",
    "uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. uniform target distribution",
    "update coupling matrices for marginal constraints w.r.t. unknown proportions based on [Prop 4., 27]",
    "check if bottleneck module exists",
    "by default, we keep only 50% of the sample data points",
    "calculate the Gibbs kernel",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 1: Screening pre-processing                                       #",
    "----------------------------------------------------------------------------------------------------------------#",
    "full number of budget points (ns, nt) = (ns_budget, nt_budget)",
    "sum of rows and columns of K",
    "active sets I and J (see Lemma 1 in [26])",
    "Ic, Jc: complementary of the active sets I and J",
    "a_I, b_J, a_Ic, b_Jc",
    "box constraints in L-BFGS-B (see Proposition 1 in [26])",
    "pre-calculated constants for the objective",
    "initialisation",
    "pre-calculed constants for Restricted Sinkhorn (see Algorithm 1 in supplementary of [26])",
    "gradients of Psi_(kappa,epsilon) w.r.t u and v",
    "objective",
    "gradient",
    "----------------------------------------------------------------------------------------------------------------#",
    "Step 2: L-BFGS-B solver                                              #",
    "----------------------------------------------------------------------------------------------------------------#",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "trick to fasten the computation: select only the subset of columns/lines",
    "that can have marginals greater than 0 (that is to say M < 0)",
    "extend a, b, M with \"reservoir\" or \"dummy\" points",
    "Next 3 lines equivalent to K=np.exp(-M/reg), but faster to compute",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Ensure that distances between vectors and themselves are set to 0.0.",
    "This may not be the case due to floating point rounding errors.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "XXX use random state",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "XXX : should use a random state and not use the global seed",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "compute change in barycenter",
    "if barycenter did not change + at least 10 iterations - stop",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "tmp2=np.einsum('i,ij,j->j', u, K, v)",
    "res = np.einsum('ik,ij,jk,ij->k', u, K, v, M) (explodes cupy memory)",
    "define sinkhorn as sinkhorn_knopp",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "Copyright 2001-2013 Python Software Foundation; All Rights Reserved",
    "Once '__signature__' will be added to 'C'-level",
    "callables, this check won't be necessary",
    "Unbound method: the first parameter becomes positional-only",
    "In this case we skip the first parameter of the underlying",
    "function (usually `self` or `cls`).",
    "Was this function wrapped by a decorator?",
    "We set a new default value, because the following code",
    "is correct:",
    "",
    ">>> def foo(a): print(a)",
    ">>> print(partial(partial(foo, a=10), a=20)())",
    "20",
    ">>> print(partial(partial(foo, a=10), a=20)(a=30))",
    "30",
    "",
    "So, with 'partial' objects, passing a keyword argument is",
    "like setting a new default value for the corresponding",
    "parameter",
    "",
    "We also mark this parameter with '_partial_kwarg'",
    "flag.  Later, in '_bind', the 'default' value of this",
    "parameter will be added to 'kwargs', to simulate",
    "the 'functools.partial' real call.",
    "obj is a class or a metaclass",
    "First, let's see if it has an overloaded __call__ defined",
    "in its metaclass",
    "Now we check if the 'obj' class has a '__new__' method",
    "Finally, we should have at least __init__ implemented",
    "An object with __call__",
    "We also check that the 'obj' is not an instance of",
    "_WrapperDescriptor or _MethodWrapper to avoid",
    "infinite recursion (and even potential segfault)",
    "For classes and objects we skip the first parameter of their",
    "__call__, __new__, or __init__ methods",
    "Raise a nicer error message for builtins",
    "Add annotation and default value",
    "Keyword arguments mapped by 'functools.partial'",
    "(Parameter._partial_kwarg is True) are mapped",
    "in 'BoundArguments.kwargs', along with VAR_KEYWORD &",
    "KEYWORD_ONLY",
    "We're done here. Other arguments",
    "will be mapped in 'BoundArguments.kwargs'",
    "*args",
    "plain argument",
    "**kwargs",
    "plain keyword argument",
    "Parameter information.",
    "Non-keyword-only parameters w/o defaults.",
    "... w/ defaults.",
    "*args",
    "Keyword-only parameters.",
    "**kwargs",
    "Support for binding arguments to 'functools.partial' objects.",
    "See 'functools.partial' case in 'signature()' implementation",
    "for details.",
    "Simulating 'functools.partial' behavior",
    "Let's iterate through the positional arguments and corresponding",
    "parameters",
    "No more positional arguments",
    "No more parameters. That's it. Just need to check that",
    "we have no `kwargs` after this while loop",
    "That's OK, just empty *args.  Let's start parsing",
    "kwargs",
    "That's fine too - we have a default value for this",
    "parameter.  So, lets start parsing `kwargs`, starting",
    "with the current parameter",
    "We have a positional argument to process",
    "Looks like we have no parameter for this positional",
    "argument",
    "We have an '*args'-like argument, let's fill it with",
    "all positional arguments we have left and move on to",
    "the next phase",
    "Now, we iterate through the remaining parameters to process",
    "keyword arguments",
    "This should never happen in case of a properly built",
    "Signature object (but let's have this check here",
    "to ensure correct behaviour just in case)",
    "Memorize that we have a '**kwargs'-like parameter",
    "We have no value for this parameter.  It's fine though,",
    "if it has a default value, or it is an '*args'-like",
    "parameter, left alone by the processing of positional",
    "arguments.",
    "Process our '**kwargs'-like parameter",
    "OK, we have an '*args'-like parameter, so we won't need",
    "a '*' to separate keyword-only arguments",
    "We have a keyword-only parameter to render and we haven't",
    "rendered an '*args'-like parameter before, so add a '*'",
    "separator to the parameters list (\"foo(arg1, *, arg2)\" case)",
    "This condition should be only triggered once, so",
    "reset the flag",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if no weights are provided, use uniform",
    "compute constant that balances the weighted sums of the duals",
    "update duals",
    "binary indexing of non-zeros weights",
    "compute dual constraints violation",
    "Compute largest violation per line and columns",
    "update corrects violation of",
    "if empty array given then use uniform distributions",
    "problem with pikling Forks",
    "if empty array given then use uniform distributions",
    "if empty array given then use uniform distributions",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c and vectors",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Define the graph",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c and vectors",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Define the graph",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "--------------",
    "Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "############################################################################",
    "",
    "Sample two 2D Gaussian distributions and plot them",
    "--------------------------------------------------",
    "",
    "For demonstration purpose, we sample two Gaussian distributions in 2-d",
    "spaces and add some random noise.",
    "############################################################################",
    "",
    "Compute partial Wasserstein plans and distance",
    "----------------------------------------------",
    "############################################################################",
    "",
    "Sample one 2D and 3D Gaussian distributions and plot them",
    "---------------------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Compute partial Gromov-Wasserstein plans and distance",
    "-----------------------------------------------------",
    "transport 100% of the mass",
    "transport 2/3 of the mass",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "---------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "---------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "---------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "---------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "---------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%%",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Instantiate Sinkhorn transport algorithm and fit them for all source domains",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "#############################################################################",
    "Instantiate JCPOT adaptation algorithm and fit it",
    "----------------------------------------------------------------------------",
    "#############################################################################",
    "Run oracle transport algorithm with known proportions",
    "----------------------------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "-*- coding: utf-8 -*-",
    "Authors: Ievgen Redko <ievgen.redko@univ-st-etienne.fr>",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "EMD Transport with Laplacian regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "--------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Author: Mokhtar Z. Alaya <mokhtarzahdi.alaya@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Screenkhorn",
    "-----------------------",
    "Screenkhorn",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "DISCRETE CASE:",
    "",
    "Sample two discrete measures for the discrete case",
    "---------------------------------------------",
    "",
    "Define 2 discrete measures a and b, the points where are defined the source",
    "and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "---------------------------------------------",
    "",
    "Define the method \"SAG\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "SEMICONTINOUS CASE:",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define the method \"ASGD\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "PLOT TRANSPORTATION MATRIX",
    "#############################################################################",
    "#############################################################################",
    "Plot SAG results",
    "----------------",
    "#############################################################################",
    "Plot ASGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "SEMICONTINOUS CASE:",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semicontinous case",
    "---------------------------------------------",
    "",
    "Call ot.solve_dual_entropic and plot the results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot  SGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "check raise not implemented wrong metric",
    "run all on gpu",
    "run sinkhorn for multiple targets",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constratints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constratints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constratints",
    "Test gaussian",
    "check constratints",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "Author:",
    "Laetitia Chapel <laetitia.chapel@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "check transported mass",
    "check constratints",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constratints",
    "test sinkhorn",
    "check constratints",
    "check constratints",
    "check constratints",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constratints",
    "Test sinkhorn divergence",
    "check constratints",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test screenkhorn",
    "sinkhorn",
    "screenkhorn",
    "check marginals",
    "test for image with height not equal width",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for dimension mismatch",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "check G is the same",
    "check value",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check label propagation",
    "check inverse label propagation",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test margin constraints w.r.t. uniform target weights for each coupling matrix",
    "test margin constraints w.r.t. modified source weights for each source domain",
    "test transform",
    "check that the oos method is working",
    "check label propagation",
    "check inverse label propagation",
    "test its computed",
    "test dimensions of coupling",
    "test all margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "check label propagation",
    "check inverse label propagation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "sys.modules.update((mod_name, Mock()) for mod_name in MOCK_MODULES)",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "0.6.0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks Pipy for handling markdown now",
    "add platform dependant optional compilation argument",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Nathalie Gayraud <nat.gayraud@gmail.com>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "print('b',np.max(abs(aviol -viol)),np.max(abs(aviol_2 - viol_2)))",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "build the convolution operator",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Ensure that distances between vectors and themselves are set to 0.0.",
    "This may not be the case due to floating point rounding errors.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "XXX use random state",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "XXX : should use a random state and not use the global seed",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "T is N,ns",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "License: MIT License",
    "from .utils import unif, dist",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "tmp2=np.einsum('i,ij,j->j', u, K, v)",
    "res = np.einsum('ik,ij,jk,ij->k', u, K, v, M) (explodes cupy memory)",
    "define sinkhorn as sinkhorn_knopp",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "Copyright 2001-2013 Python Software Foundation; All Rights Reserved",
    "Once '__signature__' will be added to 'C'-level",
    "callables, this check won't be necessary",
    "Unbound method: the first parameter becomes positional-only",
    "In this case we skip the first parameter of the underlying",
    "function (usually `self` or `cls`).",
    "Was this function wrapped by a decorator?",
    "We set a new default value, because the following code",
    "is correct:",
    "",
    ">>> def foo(a): print(a)",
    ">>> print(partial(partial(foo, a=10), a=20)())",
    "20",
    ">>> print(partial(partial(foo, a=10), a=20)(a=30))",
    "30",
    "",
    "So, with 'partial' objects, passing a keyword argument is",
    "like setting a new default value for the corresponding",
    "parameter",
    "",
    "We also mark this parameter with '_partial_kwarg'",
    "flag.  Later, in '_bind', the 'default' value of this",
    "parameter will be added to 'kwargs', to simulate",
    "the 'functools.partial' real call.",
    "obj is a class or a metaclass",
    "First, let's see if it has an overloaded __call__ defined",
    "in its metaclass",
    "Now we check if the 'obj' class has a '__new__' method",
    "Finally, we should have at least __init__ implemented",
    "An object with __call__",
    "We also check that the 'obj' is not an instance of",
    "_WrapperDescriptor or _MethodWrapper to avoid",
    "infinite recursion (and even potential segfault)",
    "For classes and objects we skip the first parameter of their",
    "__call__, __new__, or __init__ methods",
    "Raise a nicer error message for builtins",
    "Add annotation and default value",
    "Keyword arguments mapped by 'functools.partial'",
    "(Parameter._partial_kwarg is True) are mapped",
    "in 'BoundArguments.kwargs', along with VAR_KEYWORD &",
    "KEYWORD_ONLY",
    "We're done here. Other arguments",
    "will be mapped in 'BoundArguments.kwargs'",
    "*args",
    "plain argument",
    "**kwargs",
    "plain keyword argument",
    "Parameter information.",
    "Non-keyword-only parameters w/o defaults.",
    "... w/ defaults.",
    "*args",
    "Keyword-only parameters.",
    "**kwargs",
    "Support for binding arguments to 'functools.partial' objects.",
    "See 'functools.partial' case in 'signature()' implementation",
    "for details.",
    "Simulating 'functools.partial' behavior",
    "Let's iterate through the positional arguments and corresponding",
    "parameters",
    "No more positional arguments",
    "No more parameters. That's it. Just need to check that",
    "we have no `kwargs` after this while loop",
    "That's OK, just empty *args.  Let's start parsing",
    "kwargs",
    "That's fine too - we have a default value for this",
    "parameter.  So, lets start parsing `kwargs`, starting",
    "with the current parameter",
    "We have a positional argument to process",
    "Looks like we have no parameter for this positional",
    "argument",
    "We have an '*args'-like argument, let's fill it with",
    "all positional arguments we have left and move on to",
    "the next phase",
    "Now, we iterate through the remaining parameters to process",
    "keyword arguments",
    "This should never happen in case of a properly built",
    "Signature object (but let's have this check here",
    "to ensure correct behaviour just in case)",
    "Memorize that we have a '**kwargs'-like parameter",
    "We have no value for this parameter.  It's fine though,",
    "if it has a default value, or it is an '*args'-like",
    "parameter, left alone by the processing of positional",
    "arguments.",
    "Process our '**kwargs'-like parameter",
    "OK, we have an '*args'-like parameter, so we won't need",
    "a '*' to separate keyword-only arguments",
    "We have a keyword-only parameter to render and we haven't",
    "rendered an '*args'-like parameter before, so add a '*'",
    "separator to the parameters list (\"foo(arg1, *, arg2)\" case)",
    "This condition should be only triggered once, so",
    "reset the flag",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if empty array given then use uniform distributions",
    "problem with pikling Forks",
    "if empty array given then use uniform distributions",
    "if empty array given then use uniform distributions",
    "If we do not return G (log==False), then we should not to cast it to dense",
    "(useless overhead)",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "--------------",
    "Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "---------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "---------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "---------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "---------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "---------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Stair Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "--------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "DISCRETE CASE:",
    "",
    "Sample two discrete measures for the discrete case",
    "---------------------------------------------",
    "",
    "Define 2 discrete measures a and b, the points where are defined the source",
    "and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "---------------------------------------------",
    "",
    "Define the method \"SAG\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "SEMICONTINOUS CASE:",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define the method \"ASGD\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "PLOT TRANSPORTATION MATRIX",
    "#############################################################################",
    "#############################################################################",
    "Plot SAG results",
    "----------------",
    "#############################################################################",
    "Plot ASGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "SEMICONTINOUS CASE:",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semicontinous case",
    "---------------------------------------------",
    "",
    "Call ot.solve_dual_entropic and plot the results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot  SGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "check raise not implemented wrong metric",
    "run all on gpu",
    "run sinkhorn for multiple targets",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constratints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constratints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constratints",
    "Test gaussian",
    "check constratints",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "check if sinkhorn_unbalanced2 returns the correct loss",
    "test generalized sinkhorn for unbalanced OT",
    "make dists unbalanced",
    "check fixed point equations",
    "in log-domain",
    "test if stable version matches sinkhorn",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "check fixed point equations",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constratints",
    "test sinkhorn",
    "check constratints",
    "check constratints",
    "check constratints",
    "test sinkhorn",
    "check values",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "test sinkhorn",
    "check constratints",
    "Test sinkhorn divergence",
    "check constratints",
    "test if stable version matches sinkhorn",
    "for multidimensional inputs",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "test generalized sinkhorn for unbalanced OT barycenter",
    "make dists unbalanced",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "check loss is similar to scipy's implementation for Euclidean metric",
    "check constraints",
    "check G is similar",
    "check AssertionError is raised if called on non 1d arrays",
    "test emd1d gives similar results as emd",
    "check loss is similar",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constraints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "make distributions unbalanced",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "plot distributions and loss matrix",
    "#############################################################################",
    "Solve Unbalanced Sinkhorn",
    "--------------",
    "Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Hicham Janati <hicham.janati@inria.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "parameters",
    "bin positions",
    "Gaussian distributions",
    "make unbalanced dists",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "non weighted barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "barycenter interpolation",
    "plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "---------",
    "%% parameters",
    "We create two 1D random measures",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Create structure matrices and across-feature distance matrix",
    "---------",
    "%% Structure matrices and across-features distance matrix",
    "#############################################################################",
    "Plot matrices",
    "---------",
    "%%",
    "pl.ylabel(\"$l$\",fontsize=fs)",
    "#############################################################################",
    "Compute FGW/GW",
    "---------",
    "%% Computing FGW and GW",
    "%reload_ext WGW",
    "#############################################################################",
    "Visualize transport matrices",
    "---------",
    "%% visu OT matrix",
    "pl.xlabel(\"$y$\",fontsize=fs)",
    "-*- coding: utf-8 -*-",
    "Author: Titouan Vayer <titouan.vayer@irisa.fr>",
    "",
    "License: MIT License",
    "%% load libraries",
    "%% Graph functions",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% circular dataset",
    "We build a dataset of noisy circular graphs.",
    "Noise is added on the structures by random connections and on the features by gaussian noise.",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% Plot graphs",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% We compute the barycenter using FGW. Structure matrices are computed using the shortest_path distance in the graph",
    "Features distances are the euclidean distances",
    "#############################################################################",
    "Plot Barycenter",
    "-------------------------",
    "%% Create the barycenter",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Kilian Fatras <kilian.fatras@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "#############################################################################",
    "Emprirical Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "--------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "DISCRETE CASE:",
    "",
    "Sample two discrete measures for the discrete case",
    "---------------------------------------------",
    "",
    "Define 2 discrete measures a and b, the points where are defined the source",
    "and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "---------------------------------------------",
    "",
    "Define the method \"SAG\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "SEMICONTINOUS CASE:",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define the method \"ASGD\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "PLOT TRANSPORTATION MATRIX",
    "#############################################################################",
    "#############################################################################",
    "Plot SAG results",
    "----------------",
    "#############################################################################",
    "Plot ASGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "SEMICONTINOUS CASE:",
    "",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semicontinous case",
    "---------------------------------------------",
    "",
    "Call ot.solve_dual_entropic and plot the results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot  SGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples"
  ],
  "0.5.0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "thanks Pipy for handling markdown now",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "coupling estimation",
    "deal with the value of log",
    "re compute inverse mapping",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "aviol = (G@one_m - a)",
    "aviol_2 = (G.T@one_n - b)",
    "print('b',np.max(abs(aviol -viol)),np.max(abs(aviol_2 - viol_2)))",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print('err=',err,' cpt=',cpt)",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "build the convolution operator",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Optimization toolbox for SEMI - DUAL problems",
    "#############################################################################",
    "#############################################################################",
    "Optimization toolbox for DUAL problems",
    "#############################################################################",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Ensure that distances between vectors and themselves are set to 0.0.",
    "This may not be the case due to floating point rounding errors.",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "Copyright (c) 2018, Mathieu Blondel",
    "All rights reserved.",
    "",
    "Redistribution and use in source and binary forms, with or without",
    "modification, are permitted provided that the following conditions are met:",
    "",
    "1. Redistributions of source code must retain the above copyright notice, this",
    "list of conditions and the following disclaimer.",
    "",
    "2. Redistributions in binary form must reproduce the above copyright notice,",
    "this list of conditions and the following disclaimer in the documentation and/or",
    "other materials provided with the distribution.",
    "",
    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND",
    "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED",
    "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.",
    "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,",
    "INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT",
    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,",
    "OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
    "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR",
    "OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
    "THE POSSIBILITY OF SUCH DAMAGE.",
    "Author: Mathieu Blondel",
    "Remi Flamary <remi.flamary@unice.fr>",
    "X[:, j] = alpha + beta[j] - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "Unpack alpha and beta.",
    "Pack grad_alpha and grad_beta.",
    "We need to maximize the dual.",
    "Unfortunately, `minimize` only supports functions whose argument is a",
    "vector. So, we need to concatenate alpha and beta.",
    "X[:, j] = alpha - C[:, j]",
    "val.shape = len(b)",
    "G.shape = len(a) x len(b)",
    "We need to maximize the semi-dual.",
    "solve dual",
    "reconstruct transport matrix",
    "solve dual",
    "reconstruct transport matrix",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "R\u00e9mi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "tens -= tens.min()",
    "compute the gradient",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "Next 3 lines equivalent to K= np.exp(-M/reg), but faster to compute",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "compute right marginal tmp2= (diag(u)Kdiag(v))^T1",
    "tmp2=np.einsum('i,ij,j->j', u, K, v)",
    "res = np.einsum('ik,ij,jk,ij->k', u, K, v, M) (explodes cupy memory)",
    "define sinkhorn as sinkhorn_knopp",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "Copyright 2001-2013 Python Software Foundation; All Rights Reserved",
    "Once '__signature__' will be added to 'C'-level",
    "callables, this check won't be necessary",
    "Unbound method: the first parameter becomes positional-only",
    "In this case we skip the first parameter of the underlying",
    "function (usually `self` or `cls`).",
    "Was this function wrapped by a decorator?",
    "We set a new default value, because the following code",
    "is correct:",
    "",
    ">>> def foo(a): print(a)",
    ">>> print(partial(partial(foo, a=10), a=20)())",
    "20",
    ">>> print(partial(partial(foo, a=10), a=20)(a=30))",
    "30",
    "",
    "So, with 'partial' objects, passing a keyword argument is",
    "like setting a new default value for the corresponding",
    "parameter",
    "",
    "We also mark this parameter with '_partial_kwarg'",
    "flag.  Later, in '_bind', the 'default' value of this",
    "parameter will be added to 'kwargs', to simulate",
    "the 'functools.partial' real call.",
    "obj is a class or a metaclass",
    "First, let's see if it has an overloaded __call__ defined",
    "in its metaclass",
    "Now we check if the 'obj' class has a '__new__' method",
    "Finally, we should have at least __init__ implemented",
    "An object with __call__",
    "We also check that the 'obj' is not an instance of",
    "_WrapperDescriptor or _MethodWrapper to avoid",
    "infinite recursion (and even potential segfault)",
    "For classes and objects we skip the first parameter of their",
    "__call__, __new__, or __init__ methods",
    "Raise a nicer error message for builtins",
    "Add annotation and default value",
    "Keyword arguments mapped by 'functools.partial'",
    "(Parameter._partial_kwarg is True) are mapped",
    "in 'BoundArguments.kwargs', along with VAR_KEYWORD &",
    "KEYWORD_ONLY",
    "We're done here. Other arguments",
    "will be mapped in 'BoundArguments.kwargs'",
    "*args",
    "plain argument",
    "**kwargs",
    "plain keyword argument",
    "Parameter information.",
    "Non-keyword-only parameters w/o defaults.",
    "... w/ defaults.",
    "*args",
    "Keyword-only parameters.",
    "**kwargs",
    "Support for binding arguments to 'functools.partial' objects.",
    "See 'functools.partial' case in 'signature()' implementation",
    "for details.",
    "Simulating 'functools.partial' behavior",
    "Let's iterate through the positional arguments and corresponding",
    "parameters",
    "No more positional arguments",
    "No more parameters. That's it. Just need to check that",
    "we have no `kwargs` after this while loop",
    "That's OK, just empty *args.  Let's start parsing",
    "kwargs",
    "That's fine too - we have a default value for this",
    "parameter.  So, lets start parsing `kwargs`, starting",
    "with the current parameter",
    "We have a positional argument to process",
    "Looks like we have no parameter for this positional",
    "argument",
    "We have an '*args'-like argument, let's fill it with",
    "all positional arguments we have left and move on to",
    "the next phase",
    "Now, we iterate through the remaining parameters to process",
    "keyword arguments",
    "This should never happen in case of a properly built",
    "Signature object (but let's have this check here",
    "to ensure correct behaviour just in case)",
    "Memorize that we have a '**kwargs'-like parameter",
    "We have no value for this parameter.  It's fine though,",
    "if it has a default value, or it is an '*args'-like",
    "parameter, left alone by the processing of positional",
    "arguments.",
    "Process our '**kwargs'-like parameter",
    "OK, we have an '*args'-like parameter, so we won't need",
    "a '*' to separate keyword-only arguments",
    "We have a keyword-only parameter to render and we haven't",
    "rendered an '*args'-like parameter before, so add a '*'",
    "separator to the parameters list (\"foo(arg1, *, arg2)\" case)",
    "This condition should be only triggered once, so",
    "reset the flag",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "row constraints",
    "columns constraints",
    "full problem",
    "cvxopt not installed or interior point",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if empty array given then use unifor distributions",
    "if empty array given then use unifor distributions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "--------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "DISCRETE CASE",
    "Sample two discrete measures for the discrete case",
    "---------------------------------------------",
    "",
    "Define 2 discrete measures a and b, the points where are defined the source",
    "and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "---------------------------------------------",
    "",
    "Define the method \"SAG\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "SEMICONTINOUS CASE",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define the method \"ASGD\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "PLOT TRANSPORTATION MATRIX",
    "#############################################################################",
    "#############################################################################",
    "Plot SAG results",
    "----------------",
    "#############################################################################",
    "Plot ASGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "SEMICONTINOUS CASE",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semicontinous case",
    "---------------------------------------------",
    "",
    "Call ot.solve_dual_entropic and plot the results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot  SGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "check raise not implemented wrong metric",
    "run all on gpu",
    "run sinkhorn for multiple targets",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TEST FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SAG algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test sag",
    "check constratints",
    "############################################################################",
    "",
    "TEST ASGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test asgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SAG and ASGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a learning rate and a number of iteration",
    "test all algorithms",
    "check constratints",
    "############################################################################",
    "COMPUTE TEST FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "",
    "TEST SGD algorithm",
    "---------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test sgd",
    "check constratints",
    "############################################################################",
    "",
    "TEST Convergence SGD toward Sinkhorn's solution",
    "--------------------------------------------------------",
    "2 identical discrete measures u defined on the same space with a",
    "regularization term, a batch_size and a number of iteration",
    "test all dual algorithms",
    "Test uniform",
    "check constratints",
    "Test gaussian",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "dist0 default to linear sampling with quadratic loss",
    "does nothing",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constratints",
    "test sinkhorn",
    "check constratints",
    "check constratints",
    "check constratints",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "creating matrix A containing all distributions",
    "wasserstein",
    "help in checking if log and verbose do not bug the function",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "check constratints",
    "check constratints",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test lp solver",
    "test bregman solver",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constratints",
    "check loss=0",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constratints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "obvious barycenter between two diracs",
    "obvious barycenter location between two diracs",
    "obvious barycenter between two diracs",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "get data",
    "check constratints",
    "kl regyularisation",
    "check constratints",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "############################################################################",
    "",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "############################################################################",
    "",
    "Plotting the distributions",
    "--------------------------",
    "############################################################################",
    "",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "############################################################################",
    "",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "those are the four corners coordinates that will be interpolated by bilinear",
    "interpolation",
    "#############################################################################",
    "Barycenter computation and visualization",
    "----------------------------------------",
    "",
    "regularization parameter",
    "weights are constructed by bilinear interpolation",
    "call to barycenter computation",
    "-*- coding: utf-8 -*-",
    "Author: Vivien Seguy <vivien.seguy@iip.ist.i.kyoto-u.ac.jp>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "#############################################################################",
    "Compute free support barycenter",
    "-------------",
    "#############################################################################",
    "Plot data",
    "---------",
    "!/usr/bin/env python3",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "source samples",
    "target samples",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Estimate linear mapping and transport",
    "-------------------------------------",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "#############################################################################",
    "Load image data",
    "---------------",
    "Loading images",
    "#############################################################################",
    "Estimate mapping and adapt",
    "----------------------------",
    "%%",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "import ot.lp.cvx as cvx",
    "#############################################################################",
    "Gaussian Data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Dirac Data",
    "----------",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% parameters",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Final figure",
    "------------",
    "",
    "%% plot",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "#############################################################################",
    "Solve Smooth OT",
    "--------------",
    "%% Smooth OT with KL regularization",
    "%% Smooth OT with KL regularization",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "Author: Kilian Fatras <kilian.fatras@gmail.com>",
    "",
    "License: MIT License",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR SEMI-DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "DISCRETE CASE",
    "Sample two discrete measures for the discrete case",
    "---------------------------------------------",
    "",
    "Define 2 discrete measures a and b, the points where are defined the source",
    "and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SAG\" method to find the transportation matrix in the discrete case",
    "---------------------------------------------",
    "",
    "Define the method \"SAG\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "SEMICONTINOUS CASE",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"ASGD\" method to find the transportation matrix in the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define the method \"ASGD\", call ot.solve_semi_dual_entropic and plot the",
    "results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "PLOT TRANSPORTATION MATRIX",
    "#############################################################################",
    "#############################################################################",
    "Plot SAG results",
    "----------------",
    "#############################################################################",
    "Plot ASGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "############################################################################",
    "COMPUTE TRANSPORTATION MATRIX FOR DUAL PROBLEM",
    "############################################################################",
    "############################################################################",
    "SEMICONTINOUS CASE",
    "Sample one general measure a, one discrete measures b for the semicontinous",
    "case",
    "---------------------------------------------",
    "",
    "Define one general measure a, one discrete measures b, the points where",
    "are defined the source and the target measures and finally the cost matrix c.",
    "############################################################################",
    "",
    "Call the \"SGD\" dual method to find the transportation matrix in the",
    "semicontinous case",
    "---------------------------------------------",
    "",
    "Call ot.solve_dual_entropic and plot the results.",
    "############################################################################",
    "",
    "Compare the results with the Sinkhorn algorithm",
    "---------------------------------------------",
    "",
    "Call the Sinkhorn algorithm from POT",
    "#############################################################################",
    "Plot  SGD results",
    "-----------------",
    "#############################################################################",
    "Plot Sinkhorn results",
    "---------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples"
  ],
  "0.4.0": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst if pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "aply the delta to the interpolation",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print('err=',err,' cpt=',cpt)",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "a is shape (n, f) and b shape (m, f). Return matrix c of shape (n, m).",
    "First compute in c_GPU the squared euclidean distance. And return its",
    "square root. At each cell [i,j] of c, we want to have",
    "sum{k in range(f)} ( (a[i,k] - b[j,k])^2 ). We know that",
    "(a-b)^2 = a^2 -2ab +b^2. Thus we want to have in each cell of c:",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2).",
    "Multiply a by b transpose to obtain in each cell [i,j] of c the",
    "value sum{k in range(f)} ( a[i,k]b[j,k] )",
    "multiply by -2 to have sum{k in range(f)} ( -2a[i,k]b[j,k] )",
    "Compute the vectors of the sum of squared elements.",
    "Add the vectors in each columns (respectivly rows) of c.",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] )",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2)",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if empty array given then use unifor distributions",
    "if empty array given then use unifor distributions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "#############################################################################",
    "Plotting the distributions",
    "--------------------------",
    "#############################################################################",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "#############################################################################",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "dist0 default to linear sampling with quadratic loss",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constratints",
    "test sinkhorn",
    "check constratints",
    "check constratints",
    "check constratints",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test lp solver",
    "test bregman solver",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constratints",
    "check loss=0",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constratints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "linear mapping",
    "nonlinear mapping",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "#############################################################################",
    "Plotting the distributions",
    "--------------------------",
    "#############################################################################",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "#############################################################################",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples"
  ],
  "0.4": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst if pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "",
    "License: MIT License",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "aply the delta to the interpolation",
    "check the necessary inputs parameters are here",
    "pairwise distance",
    "assumes labeled source samples occupy the first rows",
    "and labeled target samples occupy the first columns",
    "all the coefficients corresponding to a source sample",
    "and a target sample :",
    "with different labels get a infinite",
    "distribution estimation",
    "store arrays of samples",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "get the nearest neighbor in the source domain",
    "transport the source samples",
    "define the transported points",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "perform out of sample mapping",
    "transport the target samples",
    "define the transported points",
    "coupling estimation",
    "deal with the value of log",
    "coupling estimation",
    "check the necessary inputs parameters are here",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "deal with the value of log",
    "check the necessary inputs parameters are here",
    "perform standard barycentric mapping",
    "set nans to 0",
    "compute transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(reg)",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print('err=',err,' cpt=',cpt)",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "we recombine the current selection from dictionnary",
    "geometric interpolation",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Adapted from http://wiki.python.org/moin/PythonDecoratorLibrary,",
    "but with many changes.",
    "FIXME: we should probably reset __new__ for full generality",
    "fetch the constructor or the original constructor before",
    "deprecation wrapping if any",
    "No explicit constructor to introspect",
    "introspect the constructor arguments to find the model parameters",
    "to represent",
    "Consider the constructor parameters excluding 'self'",
    "Extract and sort argument names excluding 'self'",
    "We need deprecation warnings to always be on in order to",
    "catch deprecated param values.",
    "This is set in utils/__init__.py but it gets overwritten",
    "when running under python3 somehow.",
    "if the parameter is deprecated, don't show it",
    "XXX: should we rather test if instance of estimator?",
    "Simple optimisation to gain speed (inspect is slow)",
    "for key, value in iteritems(params):",
    "nested objects case",
    "simple objects case",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Initialization of C : random SPD matrix (if not provided by user)",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "class 1",
    "class 1",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "Michael Perrot <michael.perrot@univ-st-etienne.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "a is shape (n, f) and b shape (m, f). Return matrix c of shape (n, m).",
    "First compute in c_GPU the squared euclidean distance. And return its",
    "square root. At each cell [i,j] of c, we want to have",
    "sum{k in range(f)} ( (a[i,k] - b[j,k])^2 ). We know that",
    "(a-b)^2 = a^2 -2ab +b^2. Thus we want to have in each cell of c:",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2).",
    "Multiply a by b transpose to obtain in each cell [i,j] of c the",
    "value sum{k in range(f)} ( a[i,k]b[j,k] )",
    "multiply by -2 to have sum{k in range(f)} ( -2a[i,k]b[j,k] )",
    "Compute the vectors of the sum of squared elements.",
    "Add the vectors in each columns (respectivly rows) of c.",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] )",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2)",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "Leo Gautheron <https://github.com/aje>",
    "",
    "License: MIT License",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "import compiled emd",
    "if empty array given then use unifor distributions",
    "if empty array given then use unifor distributions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "#############################################################################",
    "Plotting the distributions",
    "--------------------------",
    "#############################################################################",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "#############################################################################",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "generate gaussian dataset",
    "generate gaussian dataset",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test timing",
    "test toc vs toq",
    "gaussian kernel  has ones on the diagonal",
    "dist shoul return squared euclidean",
    "dist0 default to linear sampling with quadratic loss",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test sinkhorn",
    "check constratints",
    "test sinkhorn",
    "check constratints",
    "check constratints",
    "check constratints",
    "test sinkhorn",
    "check values",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "wasserstein",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "check constratints",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test lp solver",
    "test bregman solver",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constratints",
    "check loss=0",
    "test emd and emd2 for simple identity",
    "check G is identity",
    "check constratints",
    "check loss=0",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "emd loss multipro proc with log",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "emd loss 1 proc",
    "Check symmetry",
    "Check with closed-form solution for gaussians",
    "Check that both cost computations are equivalent",
    "Check that dual and primal cost are equal",
    "Check that reduced cost is zero on transport arcs",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "check everything runs well with log=True",
    "test its computed",
    "test dimensions of coupling",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "test inverse transform",
    "check that the oos method is working",
    "test fit_transform",
    "test unsupervised vs semi-supervised mode",
    "check that the cost matrix norms are indeed different",
    "check that the coupling forbids mass transport between labeled source",
    "and labeled target samples",
    "we need to use a small tolerance here, otherwise the test breaks",
    "#########################################################################",
    "kernel == linear mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "#########################################################################",
    "kernel == gaussian mapping tests",
    "#########################################################################",
    "check computation and dimensions if bias == False",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check computation and dimensions if bias == True",
    "test margin constraints",
    "test transform",
    "check that the oos method is working",
    "check everything runs well with log=True",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "linear mapping",
    "nonlinear mapping",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named #'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "one of the target mode changes its variance (no linear mapping)",
    "#############################################################################",
    "Plot data",
    "---------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "MappingTransport with linear kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the linear mapping",
    "MappingTransport with gaussian kernel",
    "for original source samples, transform applies barycentric mapping",
    "for out of source samples, transform applies the gaussian mapping",
    "#############################################################################",
    "Plot transported samples",
    "------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Sample two Gaussian distributions (2D and 3D)",
    "---------------------------------------------",
    "",
    "The Gromov-Wasserstein distance allows to compute distances with samples that",
    "do not belong to the same metric space. For demonstration purpose, we sample",
    "two Gaussian distributions in 2- and 3-dimensional spaces.",
    "#############################################################################",
    "Plotting the distributions",
    "--------------------------",
    "#############################################################################",
    "Compute distance kernels, normalize them and then display",
    "---------------------------------------------------------",
    "#############################################################################",
    "Compute Gromov-Wasserstein plans and distance",
    "---------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Transport source samples onto target samples",
    "--------------------------------------------",
    "unsupervised domain adaptation",
    "semi-supervised domain adaptation",
    "semi supervised DA uses available labaled target samples to modify the cost",
    "matrix involved in the OT problem. The cost of transporting a source sample",
    "of class A onto a target sample of class B != A is set to infinite, or a",
    "very large value",
    "note that in the present case we consider that all the target samples are",
    "labeled. For daily applications, some target sample might not have labels,",
    "in this case the element of yt corresponding to these samples should be",
    "filled with -1.",
    "Warning: we recall that -1 cannot be used as a class label",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "the optimal coupling in the semi-supervised DA case will exhibit \" shape",
    "similar\" to the cost matrix, (block diagonal matrix)",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Dataset 1 : uniform sampling",
    "----------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 1 : Plot OT Matrices",
    "----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "#############################################################################",
    "Dataset 2 : Partial circle",
    "--------------------------",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "Data",
    "Cost matrices",
    "#############################################################################",
    "Dataset 2 : Plot  OT Matrices",
    "-----------------------------",
    "%% EMD",
    "OT matrices",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve EMD with Frobenius norm regularization",
    "--------------------------------------------",
    "%% Example with Frobenius norm regularization",
    "#############################################################################",
    "Solve EMD with entropic regularization",
    "--------------------------------------",
    "%% Example with entropic regularization",
    "#############################################################################",
    "Solve EMD with Frobenius norm + entropic regularization",
    "-------------------------------------------------------",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "#############################################################################",
    "Plot distributions and loss matrix",
    "----------------------------------",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "#############################################################################",
    "Solve EMD",
    "---------",
    "%% EMD",
    "#############################################################################",
    "Solve Sinkhorn",
    "--------------",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "necessary for 3d plot even if not used",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "#############################################################################",
    "Barycentric interpolation",
    "-------------------------",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "-*- coding: utf-8 -*-",
    "Author: Erwan Vautier <erwan.vautier@gmail.com>",
    "Nicolas Courty <ncourty@irisa.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Smacof MDS",
    "----------",
    "",
    "This function allows to find an embedding of points given a dissimilarity matrix",
    "that will be given by the output of the algorithm",
    "#############################################################################",
    "Data preparation",
    "----------------",
    "",
    "The four distributions are constructed from 4 simple images",
    "#############################################################################",
    "Barycenter computation",
    "----------------------",
    "#############################################################################",
    "Visualization",
    "-------------",
    "",
    "The PCA helps in getting consistency between the rotations",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Domain adaptation for pixel distribution transfer",
    "-------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "#############################################################################",
    "Plot original images",
    "--------------------",
    "#############################################################################",
    "Plot pixel values distribution",
    "------------------------------",
    "#############################################################################",
    "Plot transformed images",
    "-----------------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "Sinkhorn Transport with Group lasso regularization l1l2",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples",
    "---------------------------------------",
    "#############################################################################",
    "Fig 2 : plot optimal couplings and transported samples",
    "------------------------------------------------------",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters and data generation",
    "loss matrix",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute EMD",
    "-----------",
    "%% EMD",
    "#############################################################################",
    "Compute Sinkhorn",
    "----------------",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "generate circle dataset",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot samples",
    "#############################################################################",
    "Compute Fisher Discriminant Analysis",
    "------------------------------------",
    "%% Compute FDA",
    "#############################################################################",
    "Compute Wasserstein Discriminant Analysis",
    "-----------------------------------------",
    "%% Compute WDA",
    "#############################################################################",
    "Plot 2D projections",
    "-------------------",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "Author: Remi Flamary <remi.flamary@unice.fr>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "#############################################################################",
    "Plot data",
    "---------",
    "%% plot the distributions",
    "#############################################################################",
    "Compute EMD for the different losses",
    "------------------------------------",
    "%% Compute and plot distributions and loss matrix",
    "#############################################################################",
    "Compute Sinkhorn for the different losses",
    "-----------------------------------------",
    "%%",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "Generate data",
    "-------------",
    "Loading images",
    "training samples",
    "#############################################################################",
    "Plot original image",
    "-------------------",
    "#############################################################################",
    "Scatter plot of colors",
    "----------------------",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMDTransport",
    "SinkhornTransport",
    "prediction between images (using out of sample prediction as in [6])",
    "#############################################################################",
    "Plot new images",
    "---------------",
    "-*- coding: utf-8 -*-",
    "Authors: Remi Flamary <remi.flamary@unice.fr>",
    "Stanislas Chambon <stan.chambon@gmail.com>",
    "",
    "License: MIT License",
    "#############################################################################",
    "generate data",
    "-------------",
    "Cost matrix",
    "#############################################################################",
    "Instantiate the different transport algorithms and fit them",
    "-----------------------------------------------------------",
    "EMD Transport",
    "Sinkhorn Transport",
    "Sinkhorn Transport with Group lasso regularization",
    "transport source samples onto target samples",
    "#############################################################################",
    "Fig 1 : plots source and target samples + matrix of pairwise distance",
    "---------------------------------------------------------------------",
    "#############################################################################",
    "Fig 2 : plots optimal couplings for the different methods",
    "---------------------------------------------------------",
    "#############################################################################",
    "Fig 3 : plot transported samples",
    "--------------------------------",
    "display transported samples"
  ],
  "0.3.1": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst if pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print(reg)",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print('err=',err,' cpt=',cpt)",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "a is shape (n, f) and b shape (m, f). Return matrix c of shape (n, m).",
    "First compute in c_GPU the squared euclidean distance. And return its",
    "square root. At each cell [i,j] of c, we want to have",
    "sum{k in range(f)} ( (a[i,k] - b[j,k])^2 ). We know that",
    "(a-b)^2 = a^2 -2ab +b^2. Thus we want to have in each cell of c:",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2).",
    "Multiply a by b transpose to obtain in each cell [i,j] of c the",
    "value sum{k in range(f)} ( a[i,k]b[j,k] )",
    "multiply by -2 to have sum{k in range(f)} ( -2a[i,k]b[j,k] )",
    "Compute the vectors of the sum of squared elements.",
    "Add the vectors in each columns (respectivly rows) of c.",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] )",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2)",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "if empty array given then use unifor distributions",
    "if empty array given then use unifor distributions",
    "res=[emd2_c(a,b[:,i].copy(),M) for i in range(nb)]",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "generate circle dataset",
    "%% plot samples",
    "%% Compute FDA",
    "%% Compute WDA",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "%% plot the distributions",
    "%% Compute and plot distributions and loss matrix",
    "%%",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "test lp solver",
    "test bregman solver",
    "!/usr/bin/env python2",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "%%",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "pl.figure(1)",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('Source and traget distributions')",
    "",
    "pl.figure(2)",
    "pl.imshow(M,interpolation='nearest')",
    "pl.title('Cost matrix M')",
    "",
    "%% EMD",
    "pl.figure(3)",
    "pl.imshow(G0,interpolation='nearest')",
    "pl.title('OT matrix G0')",
    "",
    "pl.figure(4)",
    "ot.plot.plot2D_samples_mat(xs,xt,G0,c=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix with samples')",
    "%% sinkhorn",
    "reg term",
    "pl.figure(5)",
    "pl.imshow(Gs,interpolation='nearest')",
    "pl.title('OT matrix sinkhorn')",
    "",
    "pl.figure(6)",
    "ot.plot.plot2D_samples_mat(xs,xt,Gs,color=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix Sinkhorn with samples')",
    "",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "%% plot the distributions",
    "%% barycenter computation",
    "%%",
    "%%",
    "we assume that no distances are null except those of the diagonal of distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "%% barycenter interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% plot distributions and loss matrix",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "%% plot the distributions",
    "%% Compute and plot distributions and loss matrix",
    "%%",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples"
  ],
  "0.3": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst if pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "the transport has been computed. Check if classes are really",
    "separated",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print(reg)",
    "print(np.min(K))",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "test if multiple target",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print(np.min(K))",
    "sinkhorn update",
    "remove numerical problems and store them in K",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print('err=',err,' cpt=',cpt)",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of distances",
    "print(np.min(K))",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print('err=',err,' cpt=',cpt)",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "data split between classes",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "a is shape (n, f) and b shape (m, f). Return matrix c of shape (n, m).",
    "First compute in c_GPU the squared euclidean distance. And return its",
    "square root. At each cell [i,j] of c, we want to have",
    "sum{k in range(f)} ( (a[i,k] - b[j,k])^2 ). We know that",
    "(a-b)^2 = a^2 -2ab +b^2. Thus we want to have in each cell of c:",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2).",
    "Multiply a by b transpose to obtain in each cell [i,j] of c the",
    "value sum{k in range(f)} ( a[i,k]b[j,k] )",
    "multiply by -2 to have sum{k in range(f)} ( -2a[i,k]b[j,k] )",
    "Compute the vectors of the sum of squared elements.",
    "Add the vectors in each columns (respectivly rows) of c.",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] )",
    "sum{k in range(f)} ( a[i,k]^2 -2a[i,k]b[j,k] +b[j,k]^2)",
    "the transport has been computed. Check if classes are really",
    "separated",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of",
    "distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all",
    "the 10th iterations",
    "-*- coding: utf-8 -*-",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "if empty array given then use unifor distributions",
    "if empty array given then use unifor distributions",
    "res=[emd2_c(a,b[:,i].copy(),M) for i in range(nb)]",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "generate circle dataset",
    "%% plot samples",
    "%% Compute FDA",
    "%% Compute WDA",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "%% plot the distributions",
    "%% Compute and plot distributions and loss matrix",
    "%%",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "test lp solver",
    "test bregman solver",
    "!/usr/bin/env python2",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "%%",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!! This should be commented when executing sphinx-gallery",
    "'autograd.numpy','pymanopt.manifolds','pymanopt.solvers',",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "loss matrix",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "pl.legend(loc=0)",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "pl.figure(1)",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('Source and traget distributions')",
    "",
    "pl.figure(2)",
    "pl.imshow(M,interpolation='nearest')",
    "pl.title('Cost matrix M')",
    "",
    "%% EMD",
    "pl.figure(3)",
    "pl.imshow(G0,interpolation='nearest')",
    "pl.title('OT matrix G0')",
    "",
    "pl.figure(4)",
    "ot.plot.plot2D_samples_mat(xs,xt,G0,c=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix with samples')",
    "%% sinkhorn",
    "reg term",
    "pl.figure(5)",
    "pl.imshow(Gs,interpolation='nearest')",
    "pl.title('OT matrix sinkhorn')",
    "",
    "pl.figure(6)",
    "ot.plot.plot2D_samples_mat(xs,xt,Gs,color=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix Sinkhorn with samples')",
    "",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "%% plot the distributions",
    "%% barycenter computation",
    "%%",
    "%%",
    "we assume that no distances are null except those of the diagonal of distances",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "%% barycenter interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% plot distributions and loss matrix",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix and normalization",
    "%% plot the distributions",
    "%% Compute and plot distributions and loss matrix",
    "%%",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples"
  ],
  "V0.2": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of distances",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "data split between classes",
    "compute uniform weighs",
    "wda loss",
    "loss inversed because minimization",
    "declare manifold and problem",
    "declare solver and solve",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "if empty array given then use unifor distributions",
    "if empty array given then use unifor distributions",
    "res=[emd2_c(a,b[:,i].copy(),M) for i in range(nb)]",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% plot distributions and loss matrix",
    "%% plot samples",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "test lp solver",
    "test bregman solver",
    "!/usr/bin/env python2",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "M/=M.max()",
    "%%",
    "emd loss 1 proc",
    "emd loss multipro proc",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "# check whether in the source directory...",
    "",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "pl.figure(1)",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('Source and traget distributions')",
    "",
    "pl.figure(2)",
    "pl.imshow(M,interpolation='nearest')",
    "pl.title('Cost matrix M')",
    "",
    "%% EMD",
    "pl.figure(3)",
    "pl.imshow(G0,interpolation='nearest')",
    "pl.title('OT matrix G0')",
    "",
    "pl.figure(4)",
    "ot.plot.plot2D_samples_mat(xs,xt,G0,c=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix with samples')",
    "%% sinkhorn",
    "reg term",
    "pl.figure(5)",
    "pl.imshow(Gs,interpolation='nearest')",
    "pl.title('OT matrix sinkhorn')",
    "",
    "pl.figure(6)",
    "ot.plot.plot2D_samples_mat(xs,xt,Gs,color=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix Sinkhorn with samples')",
    "",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples"
  ],
  "V0.1.12": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of distances",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "problem linearization",
    "solve linear program with Sinkhorn",
    "Gc = sinkhorn_stabilized(a,b, Mi, reg1, numItermax = numInnerItermax)",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "test lp solver",
    "test bregman solver",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "!!!! allow readthedoc compilation",
    "!!!!",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "'sphinx_gallery.gen_gallery',",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library.",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenius norm regularization",
    "%% Example with entropic regularization",
    "%% Example with Frobenius norm + entropic regularization with gcg",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "pl.figure(1)",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('Source and traget distributions')",
    "",
    "pl.figure(2)",
    "pl.imshow(M,interpolation='nearest')",
    "pl.title('Cost matrix M')",
    "",
    "%% EMD",
    "pl.figure(3)",
    "pl.imshow(G0,interpolation='nearest')",
    "pl.title('OT matrix G0')",
    "",
    "pl.figure(4)",
    "ot.plot.plot2D_samples_mat(xs,xt,G0,c=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix with samples')",
    "%% sinkhorn",
    "reg term",
    "pl.figure(5)",
    "pl.imshow(Gs,interpolation='nearest')",
    "pl.title('OT matrix sinkhorn')",
    "",
    "pl.figure(6)",
    "ot.plot.plot2D_samples_mat(xs,xt,Gs,color=[.5,.5,1])",
    "pl.plot(xs[:,0],xs[:,1],'+b',label='Source samples')",
    "pl.plot(xt[:,0],xt[:,1],'xr',label='Target samples')",
    "pl.legend(loc=0)",
    "pl.title('OT matrix Sinkhorn with samples')",
    "",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "%% barycenter interpolation",
    "%% plot interpolation",
    "pl.subplot(1,2,1)",
    "pl.subplot(1,2,1)",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "non-convex Group lasso regularization",
    "True Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples"
  ],
  "V0.1.11": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of distances",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "try:",
    "except ImportError:",
    "from mock import MagicMock",
    "sys.setrecursionlimit(1500)",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1.10": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "print 'err=',err,' cpt=',cpt",
    "init data",
    "nrelative umerical precision with 64 bits",
    "we assume that no distances are null except those of the diagonal of distances",
    "print np.min(K)",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "linear mapping estimation",
    "nonlinear mapping estimation",
    "%% plot images",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "try:",
    "except ImportError:",
    "from mock import MagicMock",
    "sys.setrecursionlimit(1500)",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1.9.1": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "try:",
    "except ImportError:",
    "from mock import MagicMock",
    "sys.setrecursionlimit(1500)",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1.9": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "init loop",
    "update G",
    "update L",
    "ls regu",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "RKHS regul",
    "ls regul",
    "K0 = K1.T.dot(K1)+eta*I",
    "Kreg=I",
    "proper kernel ridge",
    "init loop",
    "update G",
    "update L",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "set M positive",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% Loading images",
    "%% Plot images",
    "%% Image conversion and dataset generation",
    "training samples",
    "%% Plot image distributions",
    "pl.imshow(I2)",
    "%% domain adaptation between images",
    "LP problem",
    "sinkhorn regularization",
    "%% prediction between images (using out of sample prediction as in [6])",
    "%% plot all images",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% dataset generation",
    "one of the target mode changes its variance (no linear mapping)",
    "%% plot samples",
    "%% OT linear mapping estimation",
    "%% Kernel mapping estimation",
    "%% Plotting the mapped samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "try:",
    "except ImportError:",
    "from mock import MagicMock",
    "sys.setrecursionlimit(1500)",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1.7": [
    "!/usr/bin/env python",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "%% plot samples",
    "%% OT estimation",
    "LP problem",
    "sinkhorn regularization",
    "Group lasso regularization",
    "%% plot interpolated source samples",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "try:",
    "except ImportError:",
    "from mock import MagicMock",
    "sys.setrecursionlimit(1500)",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1.6": [
    "!/usr/bin/env python",
    "import glob",
    "dirty but working",
    "The beautiful part is, I don't even need to check exceptions here.",
    "If something messes up, let the build process fail noisy, BEFORE my release!",
    "convert markdown readme to rst in pypandoc installed",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1.4": [
    "!/usr/bin/env python",
    "import glob",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1.3": [
    "!/usr/bin/env python",
    "import glob",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ],
  "V0.1": [
    "!/usr/bin/env python",
    "import glob",
    "additional C++ source files",
    "-*- coding: utf-8 -*-",
    "init data",
    "the transport has been computed. Check if classes are really separated",
    "now we majorize the unlabelled by the min of the majorizations",
    "do it only for unlabbled data",
    "-*- coding: utf-8 -*-",
    "init data",
    "we assume that no distances are null except those of the diagonal of distances",
    "print reg",
    "print np.min(K)",
    "we have reached the machine precision",
    "come back to previous solution and quit loop",
    "we can speed up the process by checking for the error only all the 10th iterations",
    "print 'err=',err,' cpt=',cpt",
    "return np.dot(np.diag(p/np.maximum(np.sum(gamma,axis=1),1e-10)),gamma)",
    "return (np.dot(np.diag(q/np.maximum(np.sum(gamma,axis=0),1e-10)),gamma.T)).T",
    "M = M/np.median(M) # suggested by G. Peyre",
    "log and verbose print",
    "M = M/np.median(M)",
    "M0 = M0/np.median(M0)",
    "log = {'niter':0, 'all_err':[]}",
    "pl.axis('off')",
    "pl.ylim((0,n))",
    "pl.axis('off')",
    "-*- coding: utf-8 -*-",
    "The corresponding scipy function does not work for matrices",
    "problem linearization",
    "solve linear program",
    "line search",
    "test convergence",
    "-*- coding: utf-8 -*-",
    "class 1",
    "class 1",
    "All submodules and packages",
    "OT functions",
    "utils functions",
    "beware M and C anre strored in row major C style!!!",
    "Get the number of non zero coordinates for r and c",
    "Define the graph",
    "Set supply and demand, don't account for 0 values (faster)",
    "Demand is actually negative supply...",
    "Set the cost of each edge",
    "Solve the problem with the network simplex algorithm",
    "-*- coding: utf-8 -*-",
    "import compiled emd",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "creating matrix A containing all distributions",
    "loss matrix + normalization",
    "%% plot the distributions",
    "%% barycenter computation",
    "l2bary",
    "wasserstein",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% plot the distributions",
    "%% plot distributions and loss matrix",
    "%% EMD",
    "%% Sinkhorn",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "bin positions",
    "Gaussian distributions",
    "loss matrix",
    "%% EMD",
    "%% Example with Frobenisu norm regularization",
    "%% Examlple with entropic regularization",
    "-*- coding: utf-8 -*-",
    "%% parameters and data generation",
    "loss matrix",
    "%% plot samples",
    "%% EMD",
    "%% sinkhorn",
    "reg term",
    "-*- coding: utf-8 -*-",
    "%% parameters",
    "loss matrix",
    "M/=M.max()",
    "%% plot samples",
    "%% OT estimation",
    "EMD",
    "sinkhorn",
    "Group lasso regularization",
    "%% visu matrices",
    "%% sample interpolation",
    "-*- coding: utf-8 -*-",
    "",
    "POT documentation build configuration file, created by",
    "sphinx-quickstart on Mon Oct 24 11:10:10 2016.",
    "",
    "This file is execfile()d with the current directory set to its",
    "containing dir.",
    "",
    "Note that not all possible configuration values are present in this",
    "autogenerated file.",
    "",
    "All configuration values have a default; values that are commented out",
    "serve to show the default.",
    "If extensions (or modules to document with autodoc) are in another directory,",
    "add these directories to sys.path here. If the directory is relative to the",
    "documentation root, use os.path.abspath to make it absolute, like shown here.",
    "sys.path.insert(0, os.path.abspath('.'))",
    "-- General configuration ------------------------------------------------",
    "If your documentation needs a minimal Sphinx version, state it here.",
    "needs_sphinx = '1.0'",
    "Add any Sphinx extension module names here, as strings. They can be",
    "extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
    "ones.",
    "Add any paths that contain templates here, relative to this directory.",
    "The suffix(es) of source filenames.",
    "You can specify multiple suffix as a list of string:",
    "source_suffix = ['.rst', '.md']",
    "The encoding of source files.",
    "source_encoding = 'utf-8-sig'",
    "The master toctree document.",
    "General information about the project.",
    "The version info for the project you're documenting, acts as replacement for",
    "|version| and |release|, also used in various other places throughout the",
    "built documents.",
    "",
    "The short X.Y version.",
    "The full version, including alpha/beta/rc tags.",
    "The language for content autogenerated by Sphinx. Refer to documentation",
    "for a list of supported languages.",
    "",
    "This is also used if you do content translation via gettext catalogs.",
    "Usually you set \"language\" from the command line for these cases.",
    "There are two options for replacing |today|: either, you set today to some",
    "non-false value, then it is used:",
    "today = ''",
    "Else, today_fmt is used as the format for a strftime call.",
    "today_fmt = '%B %d, %Y'",
    "List of patterns, relative to source directory, that match files and",
    "directories to ignore when looking for source files.",
    "The reST default role (used for this markup: `text`) to use for all",
    "documents.",
    "default_role = None",
    "If true, '()' will be appended to :func: etc. cross-reference text.",
    "add_function_parentheses = True",
    "If true, the current module name will be prepended to all description",
    "unit titles (such as .. function::).",
    "add_module_names = True",
    "If true, sectionauthor and moduleauthor directives will be shown in the",
    "output. They are ignored by default.",
    "show_authors = False",
    "The name of the Pygments (syntax highlighting) style to use.",
    "A list of ignored prefixes for module index sorting.",
    "modindex_common_prefix = []",
    "If true, keep warnings as \"system message\" paragraphs in the built documents.",
    "keep_warnings = False",
    "If true, `todo` and `todoList` produce output, else they produce nothing.",
    "-- Options for HTML output ----------------------------------------------",
    "The theme to use for HTML and HTML Help pages.  See the documentation for",
    "a list of builtin themes.",
    "Theme options are theme-specific and customize the look and feel of a theme",
    "further.  For a list of options available for each theme, see the",
    "documentation.",
    "html_theme_options = {}",
    "Add any paths that contain custom themes here, relative to this directory.",
    "html_theme_path = []",
    "The name for this set of Sphinx documents.  If None, it defaults to",
    "\"<project> v<release> documentation\".",
    "html_title = None",
    "A shorter title for the navigation bar.  Default is the same as html_title.",
    "html_short_title = None",
    "The name of an image file (relative to this directory) to place at the top",
    "of the sidebar.",
    "html_logo = None",
    "The name of an image file (relative to this directory) to use as a favicon of",
    "the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32",
    "pixels large.",
    "html_favicon = None",
    "Add any paths that contain custom static files (such as style sheets) here,",
    "relative to this directory. They are copied after the builtin static files,",
    "so a file named \"default.css\" will overwrite the builtin \"default.css\".",
    "Add any extra paths that contain custom files (such as robots.txt or",
    ".htaccess) here, relative to this directory. These files are copied",
    "directly to the root of the documentation.",
    "html_extra_path = []",
    "If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
    "using the given strftime format.",
    "html_last_updated_fmt = '%b %d, %Y'",
    "If true, SmartyPants will be used to convert quotes and dashes to",
    "typographically correct entities.",
    "html_use_smartypants = True",
    "Custom sidebar templates, maps document names to template names.",
    "html_sidebars = {}",
    "Additional templates that should be rendered to pages, maps page names to",
    "template names.",
    "html_additional_pages = {}",
    "If false, no module index is generated.",
    "html_domain_indices = True",
    "If false, no index is generated.",
    "html_use_index = True",
    "If true, the index is split into individual pages for each letter.",
    "html_split_index = False",
    "If true, links to the reST sources are added to the pages.",
    "html_show_sourcelink = True",
    "If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
    "html_show_sphinx = True",
    "If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
    "html_show_copyright = True",
    "If true, an OpenSearch description file will be output, and all pages will",
    "contain a <link> tag referring to it.  The value of this option must be the",
    "base URL from which the finished HTML is served.",
    "html_use_opensearch = ''",
    "This is the file name suffix for HTML files (e.g. \".xhtml\").",
    "html_file_suffix = None",
    "Language to be used for generating the HTML full-text search index.",
    "Sphinx supports the following languages:",
    "'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'",
    "'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'",
    "html_search_language = 'en'",
    "A dictionary with options for the search language support, empty by default.",
    "Now only 'ja' uses this config value",
    "html_search_options = {'type': 'default'}",
    "The name of a javascript file (relative to the configuration directory) that",
    "implements a search results scorer. If empty, the default will be used.",
    "html_search_scorer = 'scorer.js'",
    "Output file base name for HTML help builder.",
    "-- Options for LaTeX output ---------------------------------------------",
    "The paper size ('letterpaper' or 'a4paper').",
    "'papersize': 'letterpaper',",
    "The font size ('10pt', '11pt' or '12pt').",
    "'pointsize': '10pt',",
    "Additional stuff for the LaTeX preamble.",
    "'preamble': '',",
    "Latex figure (float) alignment",
    "'figure_align': 'htbp',",
    "Grouping the document tree into LaTeX files. List of tuples",
    "(source start file, target name, title,",
    "author, documentclass [howto, manual, or own class]).",
    "The name of an image file (relative to this directory) to place at the top of",
    "the title page.",
    "latex_logo = None",
    "For \"manual\" documents, if this is true, then toplevel headings are parts,",
    "not chapters.",
    "latex_use_parts = False",
    "If true, show page references after internal links.",
    "latex_show_pagerefs = False",
    "If true, show URL addresses after external links.",
    "latex_show_urls = False",
    "Documents to append as an appendix to all manuals.",
    "latex_appendices = []",
    "If false, no module index is generated.",
    "latex_domain_indices = True",
    "-- Options for manual page output ---------------------------------------",
    "One entry per manual page. List of tuples",
    "(source start file, name, description, authors, manual section).",
    "If true, show URL addresses after external links.",
    "man_show_urls = False",
    "-- Options for Texinfo output -------------------------------------------",
    "Grouping the document tree into Texinfo files. List of tuples",
    "(source start file, target name, title, author,",
    "dir menu entry, description, category)",
    "Documents to append as an appendix to all manuals.",
    "texinfo_appendices = []",
    "If false, no module index is generated.",
    "texinfo_domain_indices = True",
    "How to display URL addresses: 'footnote', 'no', or 'inline'.",
    "texinfo_show_urls = 'footnote'",
    "If true, do not generate a @detailmenu in the \"Top\" node's menu.",
    "texinfo_no_detailmenu = False",
    "Example configuration for intersphinx: refer to the Python standard library."
  ]
}